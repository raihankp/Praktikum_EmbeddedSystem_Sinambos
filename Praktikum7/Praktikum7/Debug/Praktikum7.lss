
Praktikum7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000197a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00802000  0000197a  00001a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000202  0080207a  0080207a  00001a88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000def0  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b9d  00000000  00000000  0000fcec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f2f  00000000  00000000  00014889  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000960  00000000  00000000  0001b7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032da9  00000000  00000000  0001c118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005aac  00000000  00000000  0004eec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  0005496d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bd68  00000000  00000000  00054dbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c2       	rjmp	.+1074   	; 0x4d0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d9 c1       	rjmp	.+946    	; 0x4d0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	d7 c1       	rjmp	.+942    	; 0x4d0 <__bad_interrupt>
     122:	00 00       	nop
     124:	d5 c1       	rjmp	.+938    	; 0x4d0 <__bad_interrupt>
     126:	00 00       	nop
     128:	d3 c1       	rjmp	.+934    	; 0x4d0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1e24>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x660c>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x65e4>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x560c>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1de4>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ea e7       	ldi	r30, 0x7A	; 122
     4a6:	f9 e1       	ldi	r31, 0x19	; 25
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	aa 37       	cpi	r26, 0x7A	; 122
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	aa e7       	ldi	r26, 0x7A	; 122
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	ac 37       	cpi	r26, 0x7C	; 124
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 37 0c 	call	0x186e	; 0x186e <main>
     4cc:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	fb d6       	rcall	.+3574   	; 0x132c <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     536:	c1 2c       	mov	r12, r1
     538:	d1 2c       	mov	r13, r1
     53a:	76 01       	movw	r14, r12
     53c:	00 e4       	ldi	r16, 0x40	; 64
     53e:	12 e4       	ldi	r17, 0x42	; 66
     540:	2f e0       	ldi	r18, 0x0F	; 15
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	43 e0       	ldi	r20, 0x03	; 3
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	80 ea       	ldi	r24, 0xA0	; 160
     54e:	99 e0       	ldi	r25, 0x09	; 9
     550:	1c d7       	rcall	.+3640   	; 0x138a <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     552:	00 e6       	ldi	r16, 0x60	; 96
     554:	16 e0       	ldi	r17, 0x06	; 6
     556:	ff 24       	eor	r15, r15
     558:	f3 94       	inc	r15
     55a:	f8 01       	movw	r30, r16
     55c:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55e:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     560:	be 01       	movw	r22, r28
     562:	6f 5f       	subi	r22, 0xFF	; 255
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	80 ea       	ldi	r24, 0xA0	; 160
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	29 d7       	rcall	.+3666   	; 0x13be <usart_spi_select_device>
     56c:	f8 01       	movw	r30, r16
     56e:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     570:	e0 ea       	ldi	r30, 0xA0	; 160
     572:	f9 e0       	ldi	r31, 0x09	; 9
     574:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     576:	85 ff       	sbrs	r24, 5
     578:	fd cf       	rjmp	.-6      	; 0x574 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     580:	e0 ea       	ldi	r30, 0xA0	; 160
     582:	f9 e0       	ldi	r31, 0x09	; 9
     584:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     586:	86 ff       	sbrs	r24, 6
     588:	fd cf       	rjmp	.-6      	; 0x584 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     592:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     594:	be 01       	movw	r22, r28
     596:	6f 5f       	subi	r22, 0xFF	; 255
     598:	7f 4f       	sbci	r23, 0xFF	; 255
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	99 e0       	ldi	r25, 0x09	; 9
     59e:	25 d7       	rcall	.+3658   	; 0x13ea <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	80 ea       	ldi	r24, 0xA0	; 160
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	07 d7       	rcall	.+3598   	; 0x13be <usart_spi_select_device>
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b6:	e0 ea       	ldi	r30, 0xA0	; 160
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5bc:	85 ff       	sbrs	r24, 5
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c0:	86 ea       	ldi	r24, 0xA6	; 166
     5c2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5cc:	86 ff       	sbrs	r24, 6
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d8:	80 81       	ld	r24, Z
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e4:	02 d7       	rcall	.+3588   	; 0x13ea <usart_spi_deselect_device>
     5e6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	be 01       	movw	r22, r28
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	99 e0       	ldi	r25, 0x09	; 9
     5f4:	e4 d6       	rcall	.+3528   	; 0x13be <usart_spi_select_device>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fc:	e0 ea       	ldi	r30, 0xA0	; 160
     5fe:	f9 e0       	ldi	r31, 0x09	; 9
     600:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     602:	85 ff       	sbrs	r24, 5
     604:	fd cf       	rjmp	.-6      	; 0x600 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     606:	88 ec       	ldi	r24, 0xC8	; 200
     608:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60c:	e0 ea       	ldi	r30, 0xA0	; 160
     60e:	f9 e0       	ldi	r31, 0x09	; 9
     610:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     612:	86 ff       	sbrs	r24, 6
     614:	fd cf       	rjmp	.-6      	; 0x610 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     616:	e0 ea       	ldi	r30, 0xA0	; 160
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     61c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61e:	80 81       	ld	r24, Z
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	80 ea       	ldi	r24, 0xA0	; 160
     628:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     62a:	df d6       	rcall	.+3518   	; 0x13ea <usart_spi_deselect_device>
     62c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	be 01       	movw	r22, r28
     632:	6f 5f       	subi	r22, 0xFF	; 255
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	80 ea       	ldi	r24, 0xA0	; 160
     638:	99 e0       	ldi	r25, 0x09	; 9
     63a:	c1 d6       	rcall	.+3458   	; 0x13be <usart_spi_select_device>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     642:	e0 ea       	ldi	r30, 0xA0	; 160
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     648:	85 ff       	sbrs	r24, 5
     64a:	fd cf       	rjmp	.-6      	; 0x646 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64c:	82 ea       	ldi	r24, 0xA2	; 162
     64e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     652:	e0 ea       	ldi	r30, 0xA0	; 160
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     658:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     65a:	fd cf       	rjmp	.-6      	; 0x656 <st7565r_init+0x16e>
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f9 e0       	ldi	r31, 0x09	; 9
     660:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     662:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     664:	80 81       	ld	r24, Z
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	80 ea       	ldi	r24, 0xA0	; 160
     66e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     670:	bc d6       	rcall	.+3448   	; 0x13ea <usart_spi_deselect_device>
     672:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	80 ea       	ldi	r24, 0xA0	; 160
     67e:	99 e0       	ldi	r25, 0x09	; 9
     680:	9e d6       	rcall	.+3388   	; 0x13be <usart_spi_select_device>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     688:	e0 ea       	ldi	r30, 0xA0	; 160
     68a:	f9 e0       	ldi	r31, 0x09	; 9
     68c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68e:	85 ff       	sbrs	r24, 5
     690:	fd cf       	rjmp	.-6      	; 0x68c <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     692:	8f e2       	ldi	r24, 0x2F	; 47
     694:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     698:	e0 ea       	ldi	r30, 0xA0	; 160
     69a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <st7565r_init+0x1b4>
     6a2:	e0 ea       	ldi	r30, 0xA0	; 160
     6a4:	f9 e0       	ldi	r31, 0x09	; 9
     6a6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6aa:	80 81       	ld	r24, Z
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	80 ea       	ldi	r24, 0xA0	; 160
     6b4:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b6:	99 d6       	rcall	.+3378   	; 0x13ea <usart_spi_deselect_device>
     6b8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	80 ea       	ldi	r24, 0xA0	; 160
     6c4:	99 e0       	ldi	r25, 0x09	; 9
     6c6:	7b d6       	rcall	.+3318   	; 0x13be <usart_spi_select_device>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6ce:	e0 ea       	ldi	r30, 0xA0	; 160
     6d0:	f9 e0       	ldi	r31, 0x09	; 9
     6d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d4:	85 ff       	sbrs	r24, 5
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d8:	88 ef       	ldi	r24, 0xF8	; 248
     6da:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6de:	e0 ea       	ldi	r30, 0xA0	; 160
     6e0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <st7565r_init+0x1fa>
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ec:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ee:	81 83       	std	Z+1, r24	; 0x01
     6f0:	80 81       	ld	r24, Z
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fc:	76 d6       	rcall	.+3308   	; 0x13ea <usart_spi_deselect_device>
     6fe:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	80 ea       	ldi	r24, 0xA0	; 160
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	58 d6       	rcall	.+3248   	; 0x13be <usart_spi_select_device>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     71a:	85 ff       	sbrs	r24, 5
     71c:	fd cf       	rjmp	.-6      	; 0x718 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     722:	e0 ea       	ldi	r30, 0xA0	; 160
     724:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     72a:	fd cf       	rjmp	.-6      	; 0x726 <st7565r_init+0x23e>
     72c:	e0 ea       	ldi	r30, 0xA0	; 160
     72e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     730:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     732:	81 83       	std	Z+1, r24	; 0x01
     734:	80 81       	ld	r24, Z
     736:	be 01       	movw	r22, r28
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	80 ea       	ldi	r24, 0xA0	; 160
     73e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     740:	54 d6       	rcall	.+3240   	; 0x13ea <usart_spi_deselect_device>
     742:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	80 ea       	ldi	r24, 0xA0	; 160
     74e:	99 e0       	ldi	r25, 0x09	; 9
     750:	36 d6       	rcall	.+3180   	; 0x13be <usart_spi_select_device>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     758:	e0 ea       	ldi	r30, 0xA0	; 160
     75a:	f9 e0       	ldi	r31, 0x09	; 9
     75c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     760:	fd cf       	rjmp	.-6      	; 0x75c <st7565r_init+0x274>
     762:	81 e2       	ldi	r24, 0x21	; 33
     764:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     768:	e0 ea       	ldi	r30, 0xA0	; 160
     76a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76e:	86 ff       	sbrs	r24, 6
     770:	fd cf       	rjmp	.-6      	; 0x76c <st7565r_init+0x284>
     772:	e0 ea       	ldi	r30, 0xA0	; 160
     774:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     776:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	80 81       	ld	r24, Z
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     786:	31 d6       	rcall	.+3170   	; 0x13ea <usart_spi_deselect_device>
     788:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	99 e0       	ldi	r25, 0x09	; 9
     796:	13 d6       	rcall	.+3110   	; 0x13be <usart_spi_select_device>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79e:	e0 ea       	ldi	r30, 0xA0	; 160
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
     7a4:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <st7565r_init+0x2ba>
     7a8:	81 e8       	ldi	r24, 0x81	; 129
     7aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ae:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b0:	f9 e0       	ldi	r31, 0x09	; 9
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b4:	86 ff       	sbrs	r24, 6
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <st7565r_init+0x2ca>
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7bc:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7be:	81 83       	std	Z+1, r24	; 0x01
     7c0:	80 81       	ld	r24, Z
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7cc:	0e d6       	rcall	.+3100   	; 0x13ea <usart_spi_deselect_device>
     7ce:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	be 01       	movw	r22, r28
     7d4:	6f 5f       	subi	r22, 0xFF	; 255
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	99 e0       	ldi	r25, 0x09	; 9
     7dc:	f0 d5       	rcall	.+3040   	; 0x13be <usart_spi_select_device>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e4:	e0 ea       	ldi	r30, 0xA0	; 160
     7e6:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
     7ea:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <st7565r_init+0x300>
     7ee:	81 e2       	ldi	r24, 0x21	; 33
     7f0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7fa:	86 ff       	sbrs	r24, 6
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <st7565r_init+0x310>
     7fe:	e0 ea       	ldi	r30, 0xA0	; 160
     800:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     802:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     804:	81 83       	std	Z+1, r24	; 0x01
     806:	80 81       	ld	r24, Z
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	80 ea       	ldi	r24, 0xA0	; 160
     810:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     812:	eb d5       	rcall	.+3030   	; 0x13ea <usart_spi_deselect_device>
     814:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	be 01       	movw	r22, r28
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	80 ea       	ldi	r24, 0xA0	; 160
     820:	99 e0       	ldi	r25, 0x09	; 9
     822:	cd d5       	rcall	.+2970   	; 0x13be <usart_spi_select_device>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82e:	81 81       	ldd	r24, Z+1	; 0x01
     830:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     832:	fd cf       	rjmp	.-6      	; 0x82e <st7565r_init+0x346>
     834:	8f ea       	ldi	r24, 0xAF	; 175
     836:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     842:	fd cf       	rjmp	.-6      	; 0x83e <st7565r_init+0x356>
     844:	e0 ea       	ldi	r30, 0xA0	; 160
     846:	f9 e0       	ldi	r31, 0x09	; 9
     848:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     84a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84c:	80 81       	ld	r24, Z
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	80 ea       	ldi	r24, 0xA0	; 160
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	c8 d5       	rcall	.+2960   	; 0x13ea <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     85a:	0f 90       	pop	r0
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	08 95       	ret

00000870 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	1f 92       	push	r1
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	08 2f       	mov	r16, r24
     882:	f6 2e       	mov	r15, r22
     884:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     886:	cc d5       	rcall	.+2968   	; 0x1420 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     888:	0f 70       	andi	r16, 0x0F	; 15
     88a:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     88c:	8b e2       	ldi	r24, 0x2B	; 43
     88e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     890:	be 01       	movw	r22, r28
     892:	6f 5f       	subi	r22, 0xFF	; 255
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	80 ea       	ldi	r24, 0xA0	; 160
     898:	99 e0       	ldi	r25, 0x09	; 9
     89a:	91 d5       	rcall	.+2850   	; 0x13be <usart_spi_select_device>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8a2:	e0 ea       	ldi	r30, 0xA0	; 160
     8a4:	f9 e0       	ldi	r31, 0x09	; 9
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8a8:	95 ff       	sbrs	r25, 5
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8ac:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8b0:	e0 ea       	ldi	r30, 0xA0	; 160
     8b2:	f9 e0       	ldi	r31, 0x09	; 9
     8b4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8b6:	86 ff       	sbrs	r24, 6
     8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ba:	e0 ea       	ldi	r30, 0xA0	; 160
     8bc:	f9 e0       	ldi	r31, 0x09	; 9
     8be:	80 e4       	ldi	r24, 0x40	; 64
     8c0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8c2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8c4:	be 01       	movw	r22, r28
     8c6:	6f 5f       	subi	r22, 0xFF	; 255
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	80 ea       	ldi	r24, 0xA0	; 160
     8cc:	99 e0       	ldi	r25, 0x09	; 9
     8ce:	8d d5       	rcall	.+2842   	; 0x13ea <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8d0:	0f 2d       	mov	r16, r15
     8d2:	0f 77       	andi	r16, 0x7F	; 127
     8d4:	02 95       	swap	r16
     8d6:	0f 70       	andi	r16, 0x0F	; 15
     8d8:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8da:	8b e2       	ldi	r24, 0x2B	; 43
     8dc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8de:	be 01       	movw	r22, r28
     8e0:	6f 5f       	subi	r22, 0xFF	; 255
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	80 ea       	ldi	r24, 0xA0	; 160
     8e6:	99 e0       	ldi	r25, 0x09	; 9
     8e8:	6a d5       	rcall	.+2772   	; 0x13be <usart_spi_select_device>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8f0:	e0 ea       	ldi	r30, 0xA0	; 160
     8f2:	f9 e0       	ldi	r31, 0x09	; 9
     8f4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8f6:	85 ff       	sbrs	r24, 5
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8fa:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8fe:	e0 ea       	ldi	r30, 0xA0	; 160
     900:	f9 e0       	ldi	r31, 0x09	; 9
     902:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     904:	86 ff       	sbrs	r24, 6
     906:	fd cf       	rjmp	.-6      	; 0x902 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     908:	e0 ea       	ldi	r30, 0xA0	; 160
     90a:	f9 e0       	ldi	r31, 0x09	; 9
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     910:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     912:	be 01       	movw	r22, r28
     914:	6f 5f       	subi	r22, 0xFF	; 255
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	80 ea       	ldi	r24, 0xA0	; 160
     91a:	99 e0       	ldi	r25, 0x09	; 9
     91c:	66 d5       	rcall	.+2764   	; 0x13ea <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     91e:	0f 2d       	mov	r16, r15
     920:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     922:	8b e2       	ldi	r24, 0x2B	; 43
     924:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     926:	be 01       	movw	r22, r28
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	80 ea       	ldi	r24, 0xA0	; 160
     92e:	99 e0       	ldi	r25, 0x09	; 9
     930:	46 d5       	rcall	.+2700   	; 0x13be <usart_spi_select_device>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f9 e0       	ldi	r31, 0x09	; 9
     93c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     93e:	85 ff       	sbrs	r24, 5
     940:	fd cf       	rjmp	.-6      	; 0x93c <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     942:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     946:	e0 ea       	ldi	r30, 0xA0	; 160
     948:	f9 e0       	ldi	r31, 0x09	; 9
     94a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     94c:	86 ff       	sbrs	r24, 6
     94e:	fd cf       	rjmp	.-6      	; 0x94a <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     950:	e0 ea       	ldi	r30, 0xA0	; 160
     952:	f9 e0       	ldi	r31, 0x09	; 9
     954:	80 e4       	ldi	r24, 0x40	; 64
     956:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     958:	80 81       	ld	r24, Z
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	80 ea       	ldi	r24, 0xA0	; 160
     962:	99 e0       	ldi	r25, 0x09	; 9
     964:	42 d5       	rcall	.+2692   	; 0x13ea <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     966:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	be 01       	movw	r22, r28
     96c:	6f 5f       	subi	r22, 0xFF	; 255
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	80 ea       	ldi	r24, 0xA0	; 160
     972:	99 e0       	ldi	r25, 0x09	; 9
     974:	24 d5       	rcall	.+2632   	; 0x13be <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     97c:	e0 ea       	ldi	r30, 0xA0	; 160
     97e:	f9 e0       	ldi	r31, 0x09	; 9
     980:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     982:	85 ff       	sbrs	r24, 5
     984:	fd cf       	rjmp	.-6      	; 0x980 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     986:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     98a:	e0 ea       	ldi	r30, 0xA0	; 160
     98c:	f9 e0       	ldi	r31, 0x09	; 9
     98e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     990:	86 ff       	sbrs	r24, 6
     992:	fd cf       	rjmp	.-6      	; 0x98e <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     994:	e0 ea       	ldi	r30, 0xA0	; 160
     996:	f9 e0       	ldi	r31, 0x09	; 9
     998:	80 e4       	ldi	r24, 0x40	; 64
     99a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     99c:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9a4:	be 01       	movw	r22, r28
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	80 ea       	ldi	r24, 0xA0	; 160
     9ac:	99 e0       	ldi	r25, 0x09	; 9
     9ae:	1d d5       	rcall	.+2618   	; 0x13ea <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9b0:	0f 90       	pop	r0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	08 95       	ret

000009be <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	1f 92       	push	r1
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9cc:	8a e7       	ldi	r24, 0x7A	; 122
     9ce:	90 e2       	ldi	r25, 0x20	; 32
     9d0:	22 d5       	rcall	.+2628   	; 0x1416 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9d2:	8a dd       	rcall	.-1260   	; 0x4e8 <st7565r_init>
     9d4:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9da:	6f 5f       	subi	r22, 0xFF	; 255
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	80 ea       	ldi	r24, 0xA0	; 160
     9e0:	99 e0       	ldi	r25, 0x09	; 9
     9e2:	ed d4       	rcall	.+2522   	; 0x13be <usart_spi_select_device>
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     9ea:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9ec:	f9 e0       	ldi	r31, 0x09	; 9
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
     9f0:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <gfx_mono_st7565r_init+0x30>
     9f4:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9f6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     9fa:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9fc:	f9 e0       	ldi	r31, 0x09	; 9
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <gfx_mono_st7565r_init+0x40>
     a04:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a06:	f9 e0       	ldi	r31, 0x09	; 9
     a08:	80 e4       	ldi	r24, 0x40	; 64
     a0a:	81 83       	std	Z+1, r24	; 0x01
     a0c:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a0e:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	80 ea       	ldi	r24, 0xA0	; 160
     a16:	99 e0       	ldi	r25, 0x09	; 9
     a18:	e8 d4       	rcall	.+2512   	; 0x13ea <usart_spi_deselect_device>
     a1a:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a1c:	0a c0       	rjmp	.+20     	; 0xa32 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	61 2f       	mov	r22, r17
     a22:	80 2f       	mov	r24, r16
     a24:	25 df       	rcall	.-438    	; 0x870 <gfx_mono_st7565r_put_byte>
     a26:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a28:	10 38       	cpi	r17, 0x80	; 128
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <gfx_mono_st7565r_init+0x60>
     a2c:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a2e:	04 30       	cpi	r16, 0x04	; 4
     a30:	11 f0       	breq	.+4      	; 0xa36 <gfx_mono_st7565r_init+0x78>
     a32:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a34:	f4 cf       	rjmp	.-24     	; 0xa1e <gfx_mono_st7565r_init+0x60>
     a36:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <gfx_mono_st7565r_draw_pixel>:
     a42:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a4c:	88 23       	and	r24, r24
     a4e:	4c f1       	brlt	.+82     	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x60>
     a50:	60 32       	cpi	r22, 0x20	; 32
     a52:	38 f5       	brcc	.+78     	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x60>
     a54:	d4 2f       	mov	r29, r20
     a56:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a58:	f6 2e       	mov	r15, r22
     a5a:	f6 94       	lsr	r15
     a5c:	f6 94       	lsr	r15
     a5e:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	88 e0       	ldi	r24, 0x08	; 8
     a64:	f8 9e       	mul	r15, r24
     a66:	60 19       	sub	r22, r0
     a68:	71 09       	sbc	r23, r1
     a6a:	11 24       	eor	r1, r1
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	8c 01       	movw	r16, r24
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <gfx_mono_st7565r_draw_pixel+0x36>
     a74:	00 0f       	add	r16, r16
     a76:	11 1f       	adc	r17, r17
     a78:	6a 95       	dec	r22
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a7c:	6c 2f       	mov	r22, r28
     a7e:	8f 2d       	mov	r24, r15
     a80:	dd d4       	rcall	.+2490   	; 0x143c <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a82:	d1 30       	cpi	r29, 0x01	; 1
     a84:	21 f0       	breq	.+8      	; 0xa8e <gfx_mono_st7565r_draw_pixel+0x4c>
     a86:	28 f0       	brcs	.+10     	; 0xa92 <gfx_mono_st7565r_draw_pixel+0x50>
     a88:	d2 30       	cpi	r29, 0x02	; 2
     a8a:	31 f0       	breq	.+12     	; 0xa98 <gfx_mono_st7565r_draw_pixel+0x56>
     a8c:	06 c0       	rjmp	.+12     	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     a8e:	80 2b       	or	r24, r16
		break;
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     a92:	00 95       	com	r16
     a94:	80 23       	and	r24, r16
		break;
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     a98:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     a9a:	48 2f       	mov	r20, r24
     a9c:	6c 2f       	mov	r22, r28
     a9e:	8f 2d       	mov	r24, r15
     aa0:	e7 de       	rcall	.-562    	; 0x870 <gfx_mono_st7565r_put_byte>
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	08 95       	ret

00000aae <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aae:	c6 c4       	rjmp	.+2444   	; 0x143c <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     ab0:	08 95       	ret

00000ab2 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     ab2:	fc 01       	movw	r30, r24
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	95 ff       	sbrs	r25, 5
     ab8:	fd cf       	rjmp	.-6      	; 0xab4 <usart_putchar+0x2>
     aba:	60 83       	st	Z, r22
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	08 95       	ret

00000ac2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ac2:	4f 92       	push	r4
     ac4:	5f 92       	push	r5
     ac6:	6f 92       	push	r6
     ac8:	7f 92       	push	r7
     aca:	8f 92       	push	r8
     acc:	9f 92       	push	r9
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	7c 01       	movw	r14, r24
     ade:	4a 01       	movw	r8, r20
     ae0:	5b 01       	movw	r10, r22
     ae2:	28 01       	movw	r4, r16
     ae4:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     ae6:	fc 01       	movw	r30, r24
     ae8:	84 81       	ldd	r24, Z+4	; 0x04
     aea:	82 ff       	sbrs	r24, 2
     aec:	16 c0       	rjmp	.+44     	; 0xb1a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     aee:	d9 01       	movw	r26, r18
     af0:	c8 01       	movw	r24, r16
     af2:	68 94       	set
     af4:	12 f8       	bld	r1, 2
     af6:	b6 95       	lsr	r27
     af8:	a7 95       	ror	r26
     afa:	97 95       	ror	r25
     afc:	87 95       	ror	r24
     afe:	16 94       	lsr	r1
     b00:	d1 f7       	brne	.-12     	; 0xaf6 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     b02:	b9 01       	movw	r22, r18
     b04:	a8 01       	movw	r20, r16
     b06:	03 2e       	mov	r0, r19
     b08:	36 e1       	ldi	r19, 0x16	; 22
     b0a:	76 95       	lsr	r23
     b0c:	67 95       	ror	r22
     b0e:	57 95       	ror	r21
     b10:	47 95       	ror	r20
     b12:	3a 95       	dec	r19
     b14:	d1 f7       	brne	.-12     	; 0xb0a <usart_set_baudrate+0x48>
     b16:	30 2d       	mov	r19, r0
     b18:	15 c0       	rjmp	.+42     	; 0xb44 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     b1a:	d9 01       	movw	r26, r18
     b1c:	c8 01       	movw	r24, r16
     b1e:	68 94       	set
     b20:	13 f8       	bld	r1, 3
     b22:	b6 95       	lsr	r27
     b24:	a7 95       	ror	r26
     b26:	97 95       	ror	r25
     b28:	87 95       	ror	r24
     b2a:	16 94       	lsr	r1
     b2c:	d1 f7       	brne	.-12     	; 0xb22 <usart_set_baudrate+0x60>
		min_rate /= 2;
     b2e:	b9 01       	movw	r22, r18
     b30:	a8 01       	movw	r20, r16
     b32:	03 2e       	mov	r0, r19
     b34:	37 e1       	ldi	r19, 0x17	; 23
     b36:	76 95       	lsr	r23
     b38:	67 95       	ror	r22
     b3a:	57 95       	ror	r21
     b3c:	47 95       	ror	r20
     b3e:	3a 95       	dec	r19
     b40:	d1 f7       	brne	.-12     	; 0xb36 <usart_set_baudrate+0x74>
     b42:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     b44:	88 15       	cp	r24, r8
     b46:	99 05       	cpc	r25, r9
     b48:	aa 05       	cpc	r26, r10
     b4a:	bb 05       	cpc	r27, r11
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <usart_set_baudrate+0x8e>
     b4e:	a2 c0       	rjmp	.+324    	; 0xc94 <usart_set_baudrate+0x1d2>
     b50:	84 16       	cp	r8, r20
     b52:	95 06       	cpc	r9, r21
     b54:	a6 06       	cpc	r10, r22
     b56:	b7 06       	cpc	r11, r23
     b58:	08 f4       	brcc	.+2      	; 0xb5c <usart_set_baudrate+0x9a>
     b5a:	9e c0       	rjmp	.+316    	; 0xc98 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b5c:	f7 01       	movw	r30, r14
     b5e:	84 81       	ldd	r24, Z+4	; 0x04
     b60:	82 fd       	sbrc	r24, 2
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <usart_set_baudrate+0xaa>
		baud *= 2;
     b64:	88 0c       	add	r8, r8
     b66:	99 1c       	adc	r9, r9
     b68:	aa 1c       	adc	r10, r10
     b6a:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     b6c:	c3 01       	movw	r24, r6
     b6e:	b2 01       	movw	r22, r4
     b70:	a5 01       	movw	r20, r10
     b72:	94 01       	movw	r18, r8
     b74:	de d6       	rcall	.+3516   	; 0x1932 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     b76:	2f 3f       	cpi	r18, 0xFF	; 255
     b78:	31 05       	cpc	r19, r1
     b7a:	41 05       	cpc	r20, r1
     b7c:	51 05       	cpc	r21, r1
     b7e:	08 f4       	brcc	.+2      	; 0xb82 <usart_set_baudrate+0xc0>
     b80:	8d c0       	rjmp	.+282    	; 0xc9c <usart_set_baudrate+0x1da>
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	c9 ef       	ldi	r28, 0xF9	; 249
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <usart_set_baudrate+0xd6>
     b8e:	28 17       	cp	r18, r24
     b90:	39 07       	cpc	r19, r25
     b92:	4a 07       	cpc	r20, r26
     b94:	5b 07       	cpc	r21, r27
     b96:	58 f0       	brcs	.+22     	; 0xbae <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	aa 1f       	adc	r26, r26
     b9e:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     ba0:	cd 3f       	cpi	r28, 0xFD	; 253
     ba2:	0c f4       	brge	.+2      	; 0xba6 <usart_set_baudrate+0xe4>
			limit |= 1;
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     ba8:	c7 30       	cpi	r28, 0x07	; 7
     baa:	89 f7       	brne	.-30     	; 0xb8e <usart_set_baudrate+0xcc>
     bac:	4d c0       	rjmp	.+154    	; 0xc48 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     bae:	cc 23       	and	r28, r28
     bb0:	0c f0       	brlt	.+2      	; 0xbb4 <usart_set_baudrate+0xf2>
     bb2:	4a c0       	rjmp	.+148    	; 0xc48 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     bb4:	d5 01       	movw	r26, r10
     bb6:	c4 01       	movw	r24, r8
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	aa 1f       	adc	r26, r26
     bbe:	bb 1f       	adc	r27, r27
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	aa 1f       	adc	r26, r26
     bc6:	bb 1f       	adc	r27, r27
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	aa 1f       	adc	r26, r26
     bce:	bb 1f       	adc	r27, r27
     bd0:	48 1a       	sub	r4, r24
     bd2:	59 0a       	sbc	r5, r25
     bd4:	6a 0a       	sbc	r6, r26
     bd6:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     bd8:	ce 3f       	cpi	r28, 0xFE	; 254
     bda:	ec f4       	brge	.+58     	; 0xc16 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     bdc:	8d ef       	ldi	r24, 0xFD	; 253
     bde:	9f ef       	ldi	r25, 0xFF	; 255
     be0:	8c 1b       	sub	r24, r28
     be2:	91 09       	sbc	r25, r1
     be4:	c7 fd       	sbrc	r28, 7
     be6:	93 95       	inc	r25
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <usart_set_baudrate+0x130>
     bea:	44 0c       	add	r4, r4
     bec:	55 1c       	adc	r5, r5
     bee:	66 1c       	adc	r6, r6
     bf0:	77 1c       	adc	r7, r7
     bf2:	8a 95       	dec	r24
     bf4:	d2 f7       	brpl	.-12     	; 0xbea <usart_set_baudrate+0x128>
     bf6:	d5 01       	movw	r26, r10
     bf8:	c4 01       	movw	r24, r8
     bfa:	b6 95       	lsr	r27
     bfc:	a7 95       	ror	r26
     bfe:	97 95       	ror	r25
     c00:	87 95       	ror	r24
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	64 0d       	add	r22, r4
     c08:	75 1d       	adc	r23, r5
     c0a:	86 1d       	adc	r24, r6
     c0c:	97 1d       	adc	r25, r7
     c0e:	a5 01       	movw	r20, r10
     c10:	94 01       	movw	r18, r8
     c12:	8f d6       	rcall	.+3358   	; 0x1932 <__udivmodsi4>
     c14:	35 c0       	rjmp	.+106    	; 0xc80 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
     c16:	83 e0       	ldi	r24, 0x03	; 3
     c18:	8c 0f       	add	r24, r28
     c1a:	a5 01       	movw	r20, r10
     c1c:	94 01       	movw	r18, r8
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <usart_set_baudrate+0x166>
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	8a 95       	dec	r24
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     c2c:	da 01       	movw	r26, r20
     c2e:	c9 01       	movw	r24, r18
     c30:	b6 95       	lsr	r27
     c32:	a7 95       	ror	r26
     c34:	97 95       	ror	r25
     c36:	87 95       	ror	r24
     c38:	bc 01       	movw	r22, r24
     c3a:	cd 01       	movw	r24, r26
     c3c:	64 0d       	add	r22, r4
     c3e:	75 1d       	adc	r23, r5
     c40:	86 1d       	adc	r24, r6
     c42:	97 1d       	adc	r25, r7
     c44:	76 d6       	rcall	.+3308   	; 0x1932 <__udivmodsi4>
     c46:	1c c0       	rjmp	.+56     	; 0xc80 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	8c 0f       	add	r24, r28
     c4c:	a5 01       	movw	r20, r10
     c4e:	94 01       	movw	r18, r8
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <usart_set_baudrate+0x198>
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	44 1f       	adc	r20, r20
     c58:	55 1f       	adc	r21, r21
     c5a:	8a 95       	dec	r24
     c5c:	d2 f7       	brpl	.-12     	; 0xc52 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
     c5e:	da 01       	movw	r26, r20
     c60:	c9 01       	movw	r24, r18
     c62:	b6 95       	lsr	r27
     c64:	a7 95       	ror	r26
     c66:	97 95       	ror	r25
     c68:	87 95       	ror	r24
     c6a:	bc 01       	movw	r22, r24
     c6c:	cd 01       	movw	r24, r26
     c6e:	64 0d       	add	r22, r4
     c70:	75 1d       	adc	r23, r5
     c72:	86 1d       	adc	r24, r6
     c74:	97 1d       	adc	r25, r7
     c76:	5d d6       	rcall	.+3258   	; 0x1932 <__udivmodsi4>
     c78:	21 50       	subi	r18, 0x01	; 1
     c7a:	31 09       	sbc	r19, r1
     c7c:	41 09       	sbc	r20, r1
     c7e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     c80:	83 2f       	mov	r24, r19
     c82:	8f 70       	andi	r24, 0x0F	; 15
     c84:	c2 95       	swap	r28
     c86:	c0 7f       	andi	r28, 0xF0	; 240
     c88:	c8 2b       	or	r28, r24
     c8a:	f7 01       	movw	r30, r14
     c8c:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     c8e:	26 83       	std	Z+6, r18	; 0x06

	return true;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	18 c0       	rjmp	.+48     	; 0xcc4 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	16 c0       	rjmp	.+44     	; 0xcc4 <usart_set_baudrate+0x202>
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	14 c0       	rjmp	.+40     	; 0xcc4 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     c9c:	d5 01       	movw	r26, r10
     c9e:	c4 01       	movw	r24, r8
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	aa 1f       	adc	r26, r26
     ca6:	bb 1f       	adc	r27, r27
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	aa 1f       	adc	r26, r26
     cae:	bb 1f       	adc	r27, r27
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	aa 1f       	adc	r26, r26
     cb6:	bb 1f       	adc	r27, r27
     cb8:	48 1a       	sub	r4, r24
     cba:	59 0a       	sbc	r5, r25
     cbc:	6a 0a       	sbc	r6, r26
     cbe:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     cc0:	c9 ef       	ldi	r28, 0xF9	; 249
     cc2:	8c cf       	rjmp	.-232    	; 0xbdc <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	bf 90       	pop	r11
     cd0:	af 90       	pop	r10
     cd2:	9f 90       	pop	r9
     cd4:	8f 90       	pop	r8
     cd6:	7f 90       	pop	r7
     cd8:	6f 90       	pop	r6
     cda:	5f 90       	pop	r5
     cdc:	4f 90       	pop	r4
     cde:	08 95       	ret

00000ce0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
     cea:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	09 f4       	brne	.+2      	; 0xcf2 <usart_init_rs232+0x12>
     cf0:	e6 c0       	rjmp	.+460    	; 0xebe <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     cf2:	80 3c       	cpi	r24, 0xC0	; 192
     cf4:	91 05       	cpc	r25, r1
     cf6:	21 f4       	brne	.+8      	; 0xd00 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     cf8:	60 e1       	ldi	r22, 0x10	; 16
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	29 d4       	rcall	.+2130   	; 0x1550 <sysclk_enable_module>
     cfe:	df c0       	rjmp	.+446    	; 0xebe <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     d00:	c0 38       	cpi	r28, 0x80	; 128
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	d8 07       	cpc	r29, r24
     d06:	21 f4       	brne	.+8      	; 0xd10 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     d08:	62 e0       	ldi	r22, 0x02	; 2
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	21 d4       	rcall	.+2114   	; 0x1550 <sysclk_enable_module>
     d0e:	d7 c0       	rjmp	.+430    	; 0xebe <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     d10:	c1 15       	cp	r28, r1
     d12:	e1 e0       	ldi	r30, 0x01	; 1
     d14:	de 07       	cpc	r29, r30
     d16:	21 f4       	brne	.+8      	; 0xd20 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	19 d4       	rcall	.+2098   	; 0x1550 <sysclk_enable_module>
     d1e:	cf c0       	rjmp	.+414    	; 0xebe <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     d20:	c0 38       	cpi	r28, 0x80	; 128
     d22:	f3 e0       	ldi	r31, 0x03	; 3
     d24:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     d26:	21 f4       	brne	.+8      	; 0xd30 <usart_init_rs232+0x50>
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	11 d4       	rcall	.+2082   	; 0x1550 <sysclk_enable_module>
     d2e:	c7 c0       	rjmp	.+398    	; 0xebe <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     d30:	c0 39       	cpi	r28, 0x90	; 144
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     d36:	21 f4       	brne	.+8      	; 0xd40 <usart_init_rs232+0x60>
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	09 d4       	rcall	.+2066   	; 0x1550 <sysclk_enable_module>
     d3e:	bf c0       	rjmp	.+382    	; 0xebe <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     d40:	c1 15       	cp	r28, r1
     d42:	e2 e0       	ldi	r30, 0x02	; 2
     d44:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d46:	21 f4       	brne	.+8      	; 0xd50 <usart_init_rs232+0x70>
     d48:	62 e0       	ldi	r22, 0x02	; 2
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	01 d4       	rcall	.+2050   	; 0x1550 <sysclk_enable_module>
     d4e:	b7 c0       	rjmp	.+366    	; 0xebe <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     d50:	c0 34       	cpi	r28, 0x40	; 64
     d52:	f2 e0       	ldi	r31, 0x02	; 2
     d54:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d56:	21 f4       	brne	.+8      	; 0xd60 <usart_init_rs232+0x80>
     d58:	62 e0       	ldi	r22, 0x02	; 2
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	f9 d3       	rcall	.+2034   	; 0x1550 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     d5e:	af c0       	rjmp	.+350    	; 0xebe <usart_init_rs232+0x1de>
     d60:	c0 32       	cpi	r28, 0x20	; 32
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     d66:	21 f4       	brne	.+8      	; 0xd70 <usart_init_rs232+0x90>
     d68:	64 e0       	ldi	r22, 0x04	; 4
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	f1 d3       	rcall	.+2018   	; 0x1550 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     d6e:	a7 c0       	rjmp	.+334    	; 0xebe <usart_init_rs232+0x1de>
     d70:	c1 15       	cp	r28, r1
     d72:	e8 e0       	ldi	r30, 0x08	; 8
     d74:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     d76:	21 f4       	brne	.+8      	; 0xd80 <usart_init_rs232+0xa0>
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	e9 d3       	rcall	.+2002   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     d7e:	9f c0       	rjmp	.+318    	; 0xebe <usart_init_rs232+0x1de>
     d80:	c1 15       	cp	r28, r1
     d82:	f9 e0       	ldi	r31, 0x09	; 9
     d84:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     d86:	21 f4       	brne	.+8      	; 0xd90 <usart_init_rs232+0xb0>
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	e1 d3       	rcall	.+1986   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     d8e:	97 c0       	rjmp	.+302    	; 0xebe <usart_init_rs232+0x1de>
     d90:	c1 15       	cp	r28, r1
     d92:	8a e0       	ldi	r24, 0x0A	; 10
     d94:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     d96:	21 f4       	brne	.+8      	; 0xda0 <usart_init_rs232+0xc0>
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	85 e0       	ldi	r24, 0x05	; 5
     d9c:	d9 d3       	rcall	.+1970   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     d9e:	8f c0       	rjmp	.+286    	; 0xebe <usart_init_rs232+0x1de>
     da0:	c1 15       	cp	r28, r1
     da2:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     da4:	de 07       	cpc	r29, r30
     da6:	21 f4       	brne	.+8      	; 0xdb0 <usart_init_rs232+0xd0>
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	86 e0       	ldi	r24, 0x06	; 6
     dac:	d1 d3       	rcall	.+1954   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     dae:	87 c0       	rjmp	.+270    	; 0xebe <usart_init_rs232+0x1de>
     db0:	c0 34       	cpi	r28, 0x40	; 64
     db2:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     db4:	df 07       	cpc	r29, r31
     db6:	21 f4       	brne	.+8      	; 0xdc0 <usart_init_rs232+0xe0>
     db8:	62 e0       	ldi	r22, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	c9 d3       	rcall	.+1938   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     dbe:	7f c0       	rjmp	.+254    	; 0xebe <usart_init_rs232+0x1de>
     dc0:	c0 34       	cpi	r28, 0x40	; 64
     dc2:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     dc4:	d8 07       	cpc	r29, r24
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <usart_init_rs232+0xf0>
     dc8:	62 e0       	ldi	r22, 0x02	; 2
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	c1 d3       	rcall	.+1922   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     dce:	77 c0       	rjmp	.+238    	; 0xebe <usart_init_rs232+0x1de>
     dd0:	c0 34       	cpi	r28, 0x40	; 64
     dd2:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     dd4:	de 07       	cpc	r29, r30
     dd6:	21 f4       	brne	.+8      	; 0xde0 <usart_init_rs232+0x100>
     dd8:	62 e0       	ldi	r22, 0x02	; 2
     dda:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     ddc:	b9 d3       	rcall	.+1906   	; 0x1550 <sysclk_enable_module>
     dde:	6f c0       	rjmp	.+222    	; 0xebe <usart_init_rs232+0x1de>
     de0:	c0 39       	cpi	r28, 0x90	; 144
     de2:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     de4:	df 07       	cpc	r29, r31
     de6:	21 f4       	brne	.+8      	; 0xdf0 <usart_init_rs232+0x110>
     de8:	64 e0       	ldi	r22, 0x04	; 4
     dea:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     dec:	b1 d3       	rcall	.+1890   	; 0x1550 <sysclk_enable_module>
     dee:	67 c0       	rjmp	.+206    	; 0xebe <usart_init_rs232+0x1de>
     df0:	c0 39       	cpi	r28, 0x90	; 144
     df2:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     df4:	d8 07       	cpc	r29, r24
     df6:	21 f4       	brne	.+8      	; 0xe00 <usart_init_rs232+0x120>
     df8:	64 e0       	ldi	r22, 0x04	; 4
     dfa:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     dfc:	a9 d3       	rcall	.+1874   	; 0x1550 <sysclk_enable_module>
     dfe:	5f c0       	rjmp	.+190    	; 0xebe <usart_init_rs232+0x1de>
     e00:	c0 39       	cpi	r28, 0x90	; 144
     e02:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     e04:	de 07       	cpc	r29, r30
     e06:	21 f4       	brne	.+8      	; 0xe10 <usart_init_rs232+0x130>
     e08:	64 e0       	ldi	r22, 0x04	; 4
     e0a:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     e0c:	a1 d3       	rcall	.+1858   	; 0x1550 <sysclk_enable_module>
     e0e:	57 c0       	rjmp	.+174    	; 0xebe <usart_init_rs232+0x1de>
     e10:	c0 39       	cpi	r28, 0x90	; 144
     e12:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     e14:	df 07       	cpc	r29, r31
     e16:	21 f4       	brne	.+8      	; 0xe20 <usart_init_rs232+0x140>
     e18:	64 e0       	ldi	r22, 0x04	; 4
     e1a:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     e1c:	99 d3       	rcall	.+1842   	; 0x1550 <sysclk_enable_module>
     e1e:	4f c0       	rjmp	.+158    	; 0xebe <usart_init_rs232+0x1de>
     e20:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     e22:	88 e0       	ldi	r24, 0x08	; 8
     e24:	d8 07       	cpc	r29, r24
     e26:	21 f4       	brne	.+8      	; 0xe30 <usart_init_rs232+0x150>
     e28:	68 e0       	ldi	r22, 0x08	; 8
     e2a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     e2c:	91 d3       	rcall	.+1826   	; 0x1550 <sysclk_enable_module>
     e2e:	47 c0       	rjmp	.+142    	; 0xebe <usart_init_rs232+0x1de>
     e30:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     e32:	e9 e0       	ldi	r30, 0x09	; 9
     e34:	de 07       	cpc	r29, r30
     e36:	21 f4       	brne	.+8      	; 0xe40 <usart_init_rs232+0x160>
     e38:	68 e0       	ldi	r22, 0x08	; 8
     e3a:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     e3c:	89 d3       	rcall	.+1810   	; 0x1550 <sysclk_enable_module>
     e3e:	3f c0       	rjmp	.+126    	; 0xebe <usart_init_rs232+0x1de>
     e40:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     e42:	f8 e0       	ldi	r31, 0x08	; 8
     e44:	df 07       	cpc	r29, r31
     e46:	21 f4       	brne	.+8      	; 0xe50 <usart_init_rs232+0x170>
     e48:	60 e1       	ldi	r22, 0x10	; 16
     e4a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     e4c:	81 d3       	rcall	.+1794   	; 0x1550 <sysclk_enable_module>
     e4e:	37 c0       	rjmp	.+110    	; 0xebe <usart_init_rs232+0x1de>
     e50:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     e52:	89 e0       	ldi	r24, 0x09	; 9
     e54:	d8 07       	cpc	r29, r24
     e56:	21 f4       	brne	.+8      	; 0xe60 <usart_init_rs232+0x180>
     e58:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     e5a:	84 e0       	ldi	r24, 0x04	; 4
     e5c:	79 d3       	rcall	.+1778   	; 0x1550 <sysclk_enable_module>
     e5e:	2f c0       	rjmp	.+94     	; 0xebe <usart_init_rs232+0x1de>
     e60:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e62:	ea e0       	ldi	r30, 0x0A	; 10
     e64:	de 07       	cpc	r29, r30
     e66:	21 f4       	brne	.+8      	; 0xe70 <usart_init_rs232+0x190>
     e68:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     e6a:	85 e0       	ldi	r24, 0x05	; 5
     e6c:	71 d3       	rcall	.+1762   	; 0x1550 <sysclk_enable_module>
     e6e:	27 c0       	rjmp	.+78     	; 0xebe <usart_init_rs232+0x1de>
     e70:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     e72:	fb e0       	ldi	r31, 0x0B	; 11
     e74:	df 07       	cpc	r29, r31
     e76:	21 f4       	brne	.+8      	; 0xe80 <usart_init_rs232+0x1a0>
     e78:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     e7a:	86 e0       	ldi	r24, 0x06	; 6
     e7c:	69 d3       	rcall	.+1746   	; 0x1550 <sysclk_enable_module>
     e7e:	1f c0       	rjmp	.+62     	; 0xebe <usart_init_rs232+0x1de>
     e80:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	d8 07       	cpc	r29, r24
     e86:	21 f4       	brne	.+8      	; 0xe90 <usart_init_rs232+0x1b0>
     e88:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	61 d3       	rcall	.+1730   	; 0x1550 <sysclk_enable_module>
     e8e:	17 c0       	rjmp	.+46     	; 0xebe <usart_init_rs232+0x1de>
     e90:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     e92:	e9 e0       	ldi	r30, 0x09	; 9
     e94:	de 07       	cpc	r29, r30
     e96:	21 f4       	brne	.+8      	; 0xea0 <usart_init_rs232+0x1c0>
     e98:	60 e2       	ldi	r22, 0x20	; 32
     e9a:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     e9c:	59 d3       	rcall	.+1714   	; 0x1550 <sysclk_enable_module>
     e9e:	0f c0       	rjmp	.+30     	; 0xebe <usart_init_rs232+0x1de>
     ea0:	c0 38       	cpi	r28, 0x80	; 128
     ea2:	f4 e0       	ldi	r31, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     ea4:	df 07       	cpc	r29, r31
     ea6:	21 f4       	brne	.+8      	; 0xeb0 <usart_init_rs232+0x1d0>
     ea8:	60 e4       	ldi	r22, 0x40	; 64
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	51 d3       	rcall	.+1698   	; 0x1550 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     eae:	07 c0       	rjmp	.+14     	; 0xebe <usart_init_rs232+0x1de>
     eb0:	c0 3a       	cpi	r28, 0xA0	; 160
     eb2:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     eb4:	d8 07       	cpc	r29, r24
     eb6:	19 f4       	brne	.+6      	; 0xebe <usart_init_rs232+0x1de>
     eb8:	60 e4       	ldi	r22, 0x40	; 64
     eba:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     ebc:	49 d3       	rcall	.+1682   	; 0x1550 <sysclk_enable_module>
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	f8 01       	movw	r30, r16
     ec6:	95 81       	ldd	r25, Z+5	; 0x05
     ec8:	84 81       	ldd	r24, Z+4	; 0x04
     eca:	89 2b       	or	r24, r25
     ecc:	96 81       	ldd	r25, Z+6	; 0x06
     ece:	91 11       	cpse	r25, r1
     ed0:	98 e0       	ldi	r25, 0x08	; 8
     ed2:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	f8 01       	movw	r30, r16
     ed8:	40 81       	ld	r20, Z
     eda:	51 81       	ldd	r21, Z+1	; 0x01
     edc:	62 81       	ldd	r22, Z+2	; 0x02
     ede:	73 81       	ldd	r23, Z+3	; 0x03
     ee0:	00 e8       	ldi	r16, 0x80	; 128
     ee2:	14 e8       	ldi	r17, 0x84	; 132
     ee4:	2e e1       	ldi	r18, 0x1E	; 30
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	ce 01       	movw	r24, r28
     eea:	eb dd       	rcall	.-1066   	; 0xac2 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     eec:	9c 81       	ldd	r25, Y+4	; 0x04
     eee:	98 60       	ori	r25, 0x08	; 8
     ef0:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	90 61       	ori	r25, 0x10	; 16
     ef6:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	08 95       	ret

00000f02 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     f14:	d9 01       	movw	r26, r18
     f16:	c8 01       	movw	r24, r16
     f18:	b6 95       	lsr	r27
     f1a:	a7 95       	ror	r26
     f1c:	97 95       	ror	r25
     f1e:	87 95       	ror	r24
     f20:	48 17       	cp	r20, r24
     f22:	59 07       	cpc	r21, r25
     f24:	6a 07       	cpc	r22, r26
     f26:	7b 07       	cpc	r23, r27
     f28:	70 f4       	brcc	.+28     	; 0xf46 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     f2a:	6a 01       	movw	r12, r20
     f2c:	7b 01       	movw	r14, r22
     f2e:	cc 0c       	add	r12, r12
     f30:	dd 1c       	adc	r13, r13
     f32:	ee 1c       	adc	r14, r14
     f34:	ff 1c       	adc	r15, r15
     f36:	c9 01       	movw	r24, r18
     f38:	b8 01       	movw	r22, r16
     f3a:	a7 01       	movw	r20, r14
     f3c:	96 01       	movw	r18, r12
     f3e:	f9 d4       	rcall	.+2546   	; 0x1932 <__udivmodsi4>
     f40:	21 50       	subi	r18, 0x01	; 1
     f42:	31 09       	sbc	r19, r1
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     f4a:	83 2f       	mov	r24, r19
     f4c:	8f 70       	andi	r24, 0x0F	; 15
     f4e:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     f50:	2e 83       	std	Y+6, r18	; 0x06
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	08 95       	ret

00000f64 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	1f 92       	push	r1
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	7c 01       	movw	r14, r24
     f7a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	09 f4       	brne	.+2      	; 0xf82 <usart_init_spi+0x1e>
     f80:	b2 c1       	rjmp	.+868    	; 0x12e6 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     f82:	80 3c       	cpi	r24, 0xC0	; 192
     f84:	91 05       	cpc	r25, r1
     f86:	21 f4       	brne	.+8      	; 0xf90 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     f88:	60 e1       	ldi	r22, 0x10	; 16
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	e1 d2       	rcall	.+1474   	; 0x1550 <sysclk_enable_module>
     f8e:	ab c1       	rjmp	.+854    	; 0x12e6 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     f90:	80 e8       	ldi	r24, 0x80	; 128
     f92:	e8 16       	cp	r14, r24
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	f8 06       	cpc	r15, r24
     f98:	21 f4       	brne	.+8      	; 0xfa2 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     f9a:	62 e0       	ldi	r22, 0x02	; 2
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	d8 d2       	rcall	.+1456   	; 0x1550 <sysclk_enable_module>
     fa0:	a2 c1       	rjmp	.+836    	; 0x12e6 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     fa2:	e1 14       	cp	r14, r1
     fa4:	e1 e0       	ldi	r30, 0x01	; 1
     fa6:	fe 06       	cpc	r15, r30
     fa8:	21 f4       	brne	.+8      	; 0xfb2 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	d0 d2       	rcall	.+1440   	; 0x1550 <sysclk_enable_module>
     fb0:	9a c1       	rjmp	.+820    	; 0x12e6 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     fb2:	f0 e8       	ldi	r31, 0x80	; 128
     fb4:	ef 16       	cp	r14, r31
     fb6:	f3 e0       	ldi	r31, 0x03	; 3
     fb8:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     fba:	21 f4       	brne	.+8      	; 0xfc4 <usart_init_spi+0x60>
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	c7 d2       	rcall	.+1422   	; 0x1550 <sysclk_enable_module>
     fc2:	91 c1       	rjmp	.+802    	; 0x12e6 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     fc4:	30 e9       	ldi	r19, 0x90	; 144
     fc6:	e3 16       	cp	r14, r19
     fc8:	33 e0       	ldi	r19, 0x03	; 3
     fca:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     fcc:	21 f4       	brne	.+8      	; 0xfd6 <usart_init_spi+0x72>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	be d2       	rcall	.+1404   	; 0x1550 <sysclk_enable_module>
     fd4:	88 c1       	rjmp	.+784    	; 0x12e6 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     fd6:	e1 14       	cp	r14, r1
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <usart_init_spi+0x82>
     fde:	62 e0       	ldi	r22, 0x02	; 2
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	b6 d2       	rcall	.+1388   	; 0x1550 <sysclk_enable_module>
     fe4:	80 c1       	rjmp	.+768    	; 0x12e6 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     fe6:	e0 e4       	ldi	r30, 0x40	; 64
     fe8:	ee 16       	cp	r14, r30
     fea:	e2 e0       	ldi	r30, 0x02	; 2
     fec:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     fee:	21 f4       	brne	.+8      	; 0xff8 <usart_init_spi+0x94>
     ff0:	62 e0       	ldi	r22, 0x02	; 2
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	ad d2       	rcall	.+1370   	; 0x1550 <sysclk_enable_module>
     ff6:	77 c1       	rjmp	.+750    	; 0x12e6 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     ff8:	f0 e2       	ldi	r31, 0x20	; 32
     ffa:	ef 16       	cp	r14, r31
     ffc:	f3 e0       	ldi	r31, 0x03	; 3
     ffe:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1000:	21 f4       	brne	.+8      	; 0x100a <usart_init_spi+0xa6>
    1002:	64 e0       	ldi	r22, 0x04	; 4
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	a4 d2       	rcall	.+1352   	; 0x1550 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1008:	6e c1       	rjmp	.+732    	; 0x12e6 <usart_init_spi+0x382>
    100a:	e1 14       	cp	r14, r1
    100c:	38 e0       	ldi	r19, 0x08	; 8
    100e:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1010:	21 f4       	brne	.+8      	; 0x101a <usart_init_spi+0xb6>
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	9c d2       	rcall	.+1336   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1018:	66 c1       	rjmp	.+716    	; 0x12e6 <usart_init_spi+0x382>
    101a:	e1 14       	cp	r14, r1
    101c:	89 e0       	ldi	r24, 0x09	; 9
    101e:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1020:	21 f4       	brne	.+8      	; 0x102a <usart_init_spi+0xc6>
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	94 d2       	rcall	.+1320   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1028:	5e c1       	rjmp	.+700    	; 0x12e6 <usart_init_spi+0x382>
    102a:	e1 14       	cp	r14, r1
    102c:	ea e0       	ldi	r30, 0x0A	; 10
    102e:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1030:	21 f4       	brne	.+8      	; 0x103a <usart_init_spi+0xd6>
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	85 e0       	ldi	r24, 0x05	; 5
    1036:	8c d2       	rcall	.+1304   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1038:	56 c1       	rjmp	.+684    	; 0x12e6 <usart_init_spi+0x382>
    103a:	e1 14       	cp	r14, r1
    103c:	fb e0       	ldi	r31, 0x0B	; 11
    103e:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1040:	21 f4       	brne	.+8      	; 0x104a <usart_init_spi+0xe6>
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	86 e0       	ldi	r24, 0x06	; 6
    1046:	84 d2       	rcall	.+1288   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1048:	4e c1       	rjmp	.+668    	; 0x12e6 <usart_init_spi+0x382>
    104a:	30 e4       	ldi	r19, 0x40	; 64
    104c:	e3 16       	cp	r14, r19
    104e:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1050:	f3 06       	cpc	r15, r19
    1052:	21 f4       	brne	.+8      	; 0x105c <usart_init_spi+0xf8>
    1054:	62 e0       	ldi	r22, 0x02	; 2
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	7b d2       	rcall	.+1270   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    105a:	45 c1       	rjmp	.+650    	; 0x12e6 <usart_init_spi+0x382>
    105c:	80 e4       	ldi	r24, 0x40	; 64
    105e:	e8 16       	cp	r14, r24
    1060:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1062:	f8 06       	cpc	r15, r24
    1064:	21 f4       	brne	.+8      	; 0x106e <usart_init_spi+0x10a>
    1066:	62 e0       	ldi	r22, 0x02	; 2
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	72 d2       	rcall	.+1252   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    106c:	3c c1       	rjmp	.+632    	; 0x12e6 <usart_init_spi+0x382>
    106e:	e0 e4       	ldi	r30, 0x40	; 64
    1070:	ee 16       	cp	r14, r30
    1072:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1074:	fe 06       	cpc	r15, r30
    1076:	21 f4       	brne	.+8      	; 0x1080 <usart_init_spi+0x11c>
    1078:	62 e0       	ldi	r22, 0x02	; 2
    107a:	85 e0       	ldi	r24, 0x05	; 5
    107c:	69 d2       	rcall	.+1234   	; 0x1550 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    107e:	33 c1       	rjmp	.+614    	; 0x12e6 <usart_init_spi+0x382>
    1080:	f0 e9       	ldi	r31, 0x90	; 144
    1082:	ef 16       	cp	r14, r31
    1084:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1086:	ff 06       	cpc	r15, r31
    1088:	21 f4       	brne	.+8      	; 0x1092 <usart_init_spi+0x12e>
    108a:	64 e0       	ldi	r22, 0x04	; 4
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	60 d2       	rcall	.+1216   	; 0x1550 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1090:	2a c1       	rjmp	.+596    	; 0x12e6 <usart_init_spi+0x382>
    1092:	30 e9       	ldi	r19, 0x90	; 144
    1094:	e3 16       	cp	r14, r19
    1096:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1098:	f3 06       	cpc	r15, r19
    109a:	21 f4       	brne	.+8      	; 0x10a4 <usart_init_spi+0x140>
    109c:	64 e0       	ldi	r22, 0x04	; 4
    109e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    10a0:	57 d2       	rcall	.+1198   	; 0x1550 <sysclk_enable_module>
    10a2:	21 c1       	rjmp	.+578    	; 0x12e6 <usart_init_spi+0x382>
    10a4:	80 e9       	ldi	r24, 0x90	; 144
    10a6:	e8 16       	cp	r14, r24
    10a8:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    10aa:	f8 06       	cpc	r15, r24
    10ac:	21 f4       	brne	.+8      	; 0x10b6 <usart_init_spi+0x152>
    10ae:	64 e0       	ldi	r22, 0x04	; 4
    10b0:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    10b2:	4e d2       	rcall	.+1180   	; 0x1550 <sysclk_enable_module>
    10b4:	18 c1       	rjmp	.+560    	; 0x12e6 <usart_init_spi+0x382>
    10b6:	e0 e9       	ldi	r30, 0x90	; 144
    10b8:	ee 16       	cp	r14, r30
    10ba:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    10bc:	fe 06       	cpc	r15, r30
    10be:	21 f4       	brne	.+8      	; 0x10c8 <usart_init_spi+0x164>
    10c0:	64 e0       	ldi	r22, 0x04	; 4
    10c2:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    10c4:	45 d2       	rcall	.+1162   	; 0x1550 <sysclk_enable_module>
    10c6:	0f c1       	rjmp	.+542    	; 0x12e6 <usart_init_spi+0x382>
    10c8:	f0 ec       	ldi	r31, 0xC0	; 192
    10ca:	ef 16       	cp	r14, r31
    10cc:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    10ce:	ff 06       	cpc	r15, r31
    10d0:	21 f4       	brne	.+8      	; 0x10da <usart_init_spi+0x176>
    10d2:	68 e0       	ldi	r22, 0x08	; 8
    10d4:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    10d6:	3c d2       	rcall	.+1144   	; 0x1550 <sysclk_enable_module>
    10d8:	06 c1       	rjmp	.+524    	; 0x12e6 <usart_init_spi+0x382>
    10da:	30 ec       	ldi	r19, 0xC0	; 192
    10dc:	e3 16       	cp	r14, r19
    10de:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    10e0:	f3 06       	cpc	r15, r19
    10e2:	21 f4       	brne	.+8      	; 0x10ec <usart_init_spi+0x188>
    10e4:	68 e0       	ldi	r22, 0x08	; 8
    10e6:	84 e0       	ldi	r24, 0x04	; 4
    10e8:	33 d2       	rcall	.+1126   	; 0x1550 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    10ea:	fd c0       	rjmp	.+506    	; 0x12e6 <usart_init_spi+0x382>
    10ec:	80 ea       	ldi	r24, 0xA0	; 160
    10ee:	e8 16       	cp	r14, r24
    10f0:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    10f2:	f8 06       	cpc	r15, r24
    10f4:	61 f4       	brne	.+24     	; 0x110e <usart_init_spi+0x1aa>
    10f6:	60 e1       	ldi	r22, 0x10	; 16
    10f8:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    10fa:	2a d2       	rcall	.+1108   	; 0x1550 <sysclk_enable_module>
    10fc:	e0 ea       	ldi	r30, 0xA0	; 160
    10fe:	f8 e0       	ldi	r31, 0x08	; 8
    1100:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1102:	8f 7e       	andi	r24, 0xEF	; 239
    1104:	84 83       	std	Z+4, r24	; 0x04
    1106:	f8 01       	movw	r30, r16
    1108:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    110a:	22 50       	subi	r18, 0x02	; 2
    110c:	4c c0       	rjmp	.+152    	; 0x11a6 <usart_init_spi+0x242>
    110e:	f0 ea       	ldi	r31, 0xA0	; 160
    1110:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1112:	f9 e0       	ldi	r31, 0x09	; 9
    1114:	ff 06       	cpc	r15, r31
    1116:	21 f4       	brne	.+8      	; 0x1120 <usart_init_spi+0x1bc>
    1118:	60 e1       	ldi	r22, 0x10	; 16
    111a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    111c:	19 d2       	rcall	.+1074   	; 0x1550 <sysclk_enable_module>
    111e:	e3 c0       	rjmp	.+454    	; 0x12e6 <usart_init_spi+0x382>
    1120:	30 ea       	ldi	r19, 0xA0	; 160
    1122:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1124:	3a e0       	ldi	r19, 0x0A	; 10
    1126:	f3 06       	cpc	r15, r19
    1128:	21 f4       	brne	.+8      	; 0x1132 <usart_init_spi+0x1ce>
    112a:	60 e1       	ldi	r22, 0x10	; 16
    112c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    112e:	10 d2       	rcall	.+1056   	; 0x1550 <sysclk_enable_module>
    1130:	da c0       	rjmp	.+436    	; 0x12e6 <usart_init_spi+0x382>
    1132:	80 ea       	ldi	r24, 0xA0	; 160
    1134:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1136:	8b e0       	ldi	r24, 0x0B	; 11
    1138:	f8 06       	cpc	r15, r24
    113a:	21 f4       	brne	.+8      	; 0x1144 <usart_init_spi+0x1e0>
    113c:	60 e1       	ldi	r22, 0x10	; 16
    113e:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1140:	07 d2       	rcall	.+1038   	; 0x1550 <sysclk_enable_module>
    1142:	d1 c0       	rjmp	.+418    	; 0x12e6 <usart_init_spi+0x382>
    1144:	e0 eb       	ldi	r30, 0xB0	; 176
    1146:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1148:	e8 e0       	ldi	r30, 0x08	; 8
    114a:	fe 06       	cpc	r15, r30
    114c:	21 f4       	brne	.+8      	; 0x1156 <usart_init_spi+0x1f2>
    114e:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1150:	83 e0       	ldi	r24, 0x03	; 3
    1152:	fe d1       	rcall	.+1020   	; 0x1550 <sysclk_enable_module>
    1154:	c8 c0       	rjmp	.+400    	; 0x12e6 <usart_init_spi+0x382>
    1156:	f0 eb       	ldi	r31, 0xB0	; 176
    1158:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    115a:	f9 e0       	ldi	r31, 0x09	; 9
    115c:	ff 06       	cpc	r15, r31
    115e:	21 f4       	brne	.+8      	; 0x1168 <usart_init_spi+0x204>
    1160:	60 e2       	ldi	r22, 0x20	; 32
    1162:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1164:	f5 d1       	rcall	.+1002   	; 0x1550 <sysclk_enable_module>
    1166:	bf c0       	rjmp	.+382    	; 0x12e6 <usart_init_spi+0x382>
    1168:	30 e8       	ldi	r19, 0x80	; 128
    116a:	e3 16       	cp	r14, r19
    116c:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    116e:	f3 06       	cpc	r15, r19
    1170:	21 f4       	brne	.+8      	; 0x117a <usart_init_spi+0x216>
    1172:	60 e4       	ldi	r22, 0x40	; 64
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	ec d1       	rcall	.+984    	; 0x1550 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1178:	b6 c0       	rjmp	.+364    	; 0x12e6 <usart_init_spi+0x382>
    117a:	80 ea       	ldi	r24, 0xA0	; 160
    117c:	e8 16       	cp	r14, r24
    117e:	84 e0       	ldi	r24, 0x04	; 4
    1180:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1182:	21 f4       	brne	.+8      	; 0x118c <usart_init_spi+0x228>
    1184:	60 e4       	ldi	r22, 0x40	; 64
    1186:	85 e0       	ldi	r24, 0x05	; 5
    1188:	e3 d1       	rcall	.+966    	; 0x1550 <sysclk_enable_module>
    118a:	ad c0       	rjmp	.+346    	; 0x12e6 <usart_init_spi+0x382>
    118c:	f7 01       	movw	r30, r14
    118e:	84 81       	ldd	r24, Z+4	; 0x04
    1190:	8f 7e       	andi	r24, 0xEF	; 239
    1192:	84 83       	std	Z+4, r24	; 0x04
    1194:	fb 01       	movw	r30, r22
    1196:	24 81       	ldd	r18, Z+4	; 0x04
    1198:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    119a:	c7 01       	movw	r24, r14
    119c:	f0 ea       	ldi	r31, 0xA0	; 160
    119e:	ef 16       	cp	r14, r31
    11a0:	f8 e0       	ldi	r31, 0x08	; 8
    11a2:	ff 06       	cpc	r15, r31
    11a4:	49 f4       	brne	.+18     	; 0x11b8 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    11a6:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    11aa:	84 fd       	sbrc	r24, 4
    11ac:	a5 c0       	rjmp	.+330    	; 0x12f8 <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    11ae:	0f 2e       	mov	r0, r31
    11b0:	f1 e1       	ldi	r31, 0x11	; 17
    11b2:	df 2e       	mov	r13, r31
    11b4:	f0 2d       	mov	r31, r0
    11b6:	a4 c0       	rjmp	.+328    	; 0x1300 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    11b8:	80 3b       	cpi	r24, 0xB0	; 176
    11ba:	38 e0       	ldi	r19, 0x08	; 8
    11bc:	93 07       	cpc	r25, r19
    11be:	91 f0       	breq	.+36     	; 0x11e4 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    11c0:	80 3a       	cpi	r24, 0xA0	; 160
    11c2:	e9 e0       	ldi	r30, 0x09	; 9
    11c4:	9e 07       	cpc	r25, r30
    11c6:	49 f4       	brne	.+18     	; 0x11da <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    11c8:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    11cc:	34 fd       	sbrc	r19, 4
    11ce:	9b c0       	rjmp	.+310    	; 0x1306 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    11d0:	0f 2e       	mov	r0, r31
    11d2:	f9 e1       	ldi	r31, 0x19	; 25
    11d4:	df 2e       	mov	r13, r31
    11d6:	f0 2d       	mov	r31, r0
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    11da:	80 3b       	cpi	r24, 0xB0	; 176
    11dc:	f9 e0       	ldi	r31, 0x09	; 9
    11de:	9f 07       	cpc	r25, r31
    11e0:	f1 f0       	breq	.+60     	; 0x121e <usart_init_spi+0x2ba>
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    11e4:	0f 2e       	mov	r0, r31
    11e6:	f5 e1       	ldi	r31, 0x15	; 21
    11e8:	df 2e       	mov	r13, r31
    11ea:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    11ec:	80 3a       	cpi	r24, 0xA0	; 160
    11ee:	3a e0       	ldi	r19, 0x0A	; 10
    11f0:	93 07       	cpc	r25, r19
    11f2:	49 f4       	brne	.+18     	; 0x1206 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    11f4:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    11f8:	84 fd       	sbrc	r24, 4
    11fa:	8a c0       	rjmp	.+276    	; 0x1310 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    11fc:	0f 2e       	mov	r0, r31
    11fe:	f1 e2       	ldi	r31, 0x21	; 33
    1200:	df 2e       	mov	r13, r31
    1202:	f0 2d       	mov	r31, r0
    1204:	15 c0       	rjmp	.+42     	; 0x1230 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1206:	80 3a       	cpi	r24, 0xA0	; 160
    1208:	9b 40       	sbci	r25, 0x0B	; 11
    120a:	91 f4       	brne	.+36     	; 0x1230 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    120c:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1210:	84 fd       	sbrc	r24, 4
    1212:	0a c0       	rjmp	.+20     	; 0x1228 <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1214:	0f 2e       	mov	r0, r31
    1216:	f9 e2       	ldi	r31, 0x29	; 41
    1218:	df 2e       	mov	r13, r31
    121a:	f0 2d       	mov	r31, r0
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    121e:	0f 2e       	mov	r0, r31
    1220:	fd e1       	ldi	r31, 0x1D	; 29
    1222:	df 2e       	mov	r13, r31
    1224:	f0 2d       	mov	r31, r0
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1228:	0f 2e       	mov	r0, r31
    122a:	fd e2       	ldi	r31, 0x2D	; 45
    122c:	df 2e       	mov	r13, r31
    122e:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1230:	ed 2d       	mov	r30, r13
    1232:	e6 95       	lsr	r30
    1234:	e6 95       	lsr	r30
    1236:	e6 95       	lsr	r30
    1238:	30 e2       	ldi	r19, 0x20	; 32
    123a:	e3 9f       	mul	r30, r19
    123c:	f0 01       	movw	r30, r0
    123e:	11 24       	eor	r1, r1
    1240:	fa 5f       	subi	r31, 0xFA	; 250
    1242:	3d 2d       	mov	r19, r13
    1244:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	03 2e       	mov	r0, r19
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <usart_init_spi+0x2ee>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1256:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	10 f0       	brcs	.+4      	; 0x1260 <usart_init_spi+0x2fc>
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <usart_init_spi+0x2fe>
    1260:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1262:	df 01       	movw	r26, r30
    1264:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1266:	a3 0f       	add	r26, r19
    1268:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    126a:	9f b7       	in	r25, 0x3f	; 63
    126c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    126e:	f8 94       	cli
	return flags;
    1270:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1272:	2c 91       	ld	r18, X
    1274:	27 70       	andi	r18, 0x07	; 7
    1276:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1278:	9c 91       	ld	r25, X
    127a:	94 2b       	or	r25, r20
    127c:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    127e:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1280:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1282:	f7 01       	movw	r30, r14
    1284:	85 81       	ldd	r24, Z+5	; 0x05
    1286:	80 6c       	ori	r24, 0xC0	; 192
    1288:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    128a:	f8 01       	movw	r30, r16
    128c:	84 81       	ldd	r24, Z+4	; 0x04
    128e:	8d 7f       	andi	r24, 0xFD	; 253
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	29 f4       	brne	.+10     	; 0x129e <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    1294:	f7 01       	movw	r30, r14
    1296:	85 81       	ldd	r24, Z+5	; 0x05
    1298:	82 60       	ori	r24, 0x02	; 2
    129a:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <usart_init_spi+0x342>
    129e:	f7 01       	movw	r30, r14
    12a0:	85 81       	ldd	r24, Z+5	; 0x05
    12a2:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    12a4:	85 83       	std	Z+5, r24	; 0x05
    12a6:	f8 01       	movw	r30, r16
    12a8:	85 81       	ldd	r24, Z+5	; 0x05
    12aa:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    12ac:	29 f0       	breq	.+10     	; 0x12b8 <usart_init_spi+0x354>
    12ae:	f7 01       	movw	r30, r14
    12b0:	85 81       	ldd	r24, Z+5	; 0x05
    12b2:	84 60       	ori	r24, 0x04	; 4
    12b4:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <usart_init_spi+0x35c>
    12b8:	f7 01       	movw	r30, r14
    12ba:	85 81       	ldd	r24, Z+5	; 0x05
    12bc:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    12be:	85 83       	std	Z+5, r24	; 0x05
    12c0:	f8 01       	movw	r30, r16
    12c2:	40 81       	ld	r20, Z
    12c4:	51 81       	ldd	r21, Z+1	; 0x01
    12c6:	62 81       	ldd	r22, Z+2	; 0x02
    12c8:	73 81       	ldd	r23, Z+3	; 0x03
    12ca:	00 e8       	ldi	r16, 0x80	; 128
    12cc:	14 e8       	ldi	r17, 0x84	; 132
    12ce:	2e e1       	ldi	r18, 0x1E	; 30
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	c7 01       	movw	r24, r14
    12d4:	16 de       	rcall	.-980    	; 0xf02 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    12d6:	f7 01       	movw	r30, r14
    12d8:	84 81       	ldd	r24, Z+4	; 0x04
    12da:	88 60       	ori	r24, 0x08	; 8
    12dc:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    12de:	84 81       	ldd	r24, Z+4	; 0x04
    12e0:	80 61       	ori	r24, 0x10	; 16
    12e2:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    12e4:	1a c0       	rjmp	.+52     	; 0x131a <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    12e6:	f7 01       	movw	r30, r14
    12e8:	84 81       	ldd	r24, Z+4	; 0x04
    12ea:	8f 7e       	andi	r24, 0xEF	; 239
    12ec:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    12ee:	f8 01       	movw	r30, r16
    12f0:	24 81       	ldd	r18, Z+4	; 0x04
    12f2:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    12f4:	c7 01       	movw	r24, r14
    12f6:	60 cf       	rjmp	.-320    	; 0x11b8 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    12f8:	0f 2e       	mov	r0, r31
    12fa:	f5 e1       	ldi	r31, 0x15	; 21
    12fc:	df 2e       	mov	r13, r31
    12fe:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1300:	80 ea       	ldi	r24, 0xA0	; 160
    1302:	98 e0       	ldi	r25, 0x08	; 8
    1304:	6a cf       	rjmp	.-300    	; 0x11da <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1306:	0f 2e       	mov	r0, r31
    1308:	fd e1       	ldi	r31, 0x1D	; 29
    130a:	df 2e       	mov	r13, r31
    130c:	f0 2d       	mov	r31, r0
    130e:	7b cf       	rjmp	.-266    	; 0x1206 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1310:	0f 2e       	mov	r0, r31
    1312:	f5 e2       	ldi	r31, 0x25	; 37
    1314:	df 2e       	mov	r13, r31
    1316:	f0 2d       	mov	r31, r0
    1318:	8b cf       	rjmp	.-234    	; 0x1230 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    131a:	0f 90       	pop	r0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	08 95       	ret

0000132c <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    132c:	80 3a       	cpi	r24, 0xA0	; 160
    132e:	28 e0       	ldi	r18, 0x08	; 8
    1330:	92 07       	cpc	r25, r18
    1332:	21 f4       	brne	.+8      	; 0x133c <usart_spi_init+0x10>
    1334:	60 e1       	ldi	r22, 0x10	; 16
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	0b c1       	rjmp	.+534    	; 0x1550 <sysclk_enable_module>
    133a:	08 95       	ret
    133c:	80 3b       	cpi	r24, 0xB0	; 176
    133e:	28 e0       	ldi	r18, 0x08	; 8
    1340:	92 07       	cpc	r25, r18
    1342:	21 f4       	brne	.+8      	; 0x134c <usart_spi_init+0x20>
    1344:	60 e2       	ldi	r22, 0x20	; 32
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	03 c1       	rjmp	.+518    	; 0x1550 <sysclk_enable_module>
    134a:	08 95       	ret
    134c:	80 3a       	cpi	r24, 0xA0	; 160
    134e:	29 e0       	ldi	r18, 0x09	; 9
    1350:	92 07       	cpc	r25, r18
    1352:	21 f4       	brne	.+8      	; 0x135c <usart_spi_init+0x30>
    1354:	60 e1       	ldi	r22, 0x10	; 16
    1356:	84 e0       	ldi	r24, 0x04	; 4
    1358:	fb c0       	rjmp	.+502    	; 0x1550 <sysclk_enable_module>
    135a:	08 95       	ret
    135c:	80 3b       	cpi	r24, 0xB0	; 176
    135e:	29 e0       	ldi	r18, 0x09	; 9
    1360:	92 07       	cpc	r25, r18
    1362:	21 f4       	brne	.+8      	; 0x136c <usart_spi_init+0x40>
    1364:	60 e2       	ldi	r22, 0x20	; 32
    1366:	84 e0       	ldi	r24, 0x04	; 4
    1368:	f3 c0       	rjmp	.+486    	; 0x1550 <sysclk_enable_module>
    136a:	08 95       	ret
    136c:	80 3a       	cpi	r24, 0xA0	; 160
    136e:	2a e0       	ldi	r18, 0x0A	; 10
    1370:	92 07       	cpc	r25, r18
    1372:	21 f4       	brne	.+8      	; 0x137c <usart_spi_init+0x50>
    1374:	60 e1       	ldi	r22, 0x10	; 16
    1376:	85 e0       	ldi	r24, 0x05	; 5
    1378:	eb c0       	rjmp	.+470    	; 0x1550 <sysclk_enable_module>
    137a:	08 95       	ret
    137c:	80 3a       	cpi	r24, 0xA0	; 160
    137e:	9b 40       	sbci	r25, 0x0B	; 11
    1380:	19 f4       	brne	.+6      	; 0x1388 <usart_spi_init+0x5c>
    1382:	60 e1       	ldi	r22, 0x10	; 16
    1384:	86 e0       	ldi	r24, 0x06	; 6
    1386:	e4 c0       	rjmp	.+456    	; 0x1550 <sysclk_enable_module>
    1388:	08 95       	ret

0000138a <usart_spi_setup_device>:
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	00 d0       	rcall	.+0      	; 0x1394 <usart_spi_setup_device+0xa>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <usart_spi_setup_device+0xc>
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	09 83       	std	Y+1, r16	; 0x01
    139c:	1a 83       	std	Y+2, r17	; 0x02
    139e:	2b 83       	std	Y+3, r18	; 0x03
    13a0:	3c 83       	std	Y+4, r19	; 0x04
    13a2:	4d 83       	std	Y+5, r20	; 0x05
    13a4:	1e 82       	std	Y+6, r1	; 0x06
    13a6:	be 01       	movw	r22, r28
    13a8:	6f 5f       	subi	r22, 0xFF	; 255
    13aa:	7f 4f       	sbci	r23, 0xFF	; 255
    13ac:	db dd       	rcall	.-1098   	; 0xf64 <usart_init_spi>
    13ae:	26 96       	adiw	r28, 0x06	; 6
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    13be:	fb 01       	movw	r30, r22
    13c0:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    13c2:	e8 2f       	mov	r30, r24
    13c4:	e6 95       	lsr	r30
    13c6:	e6 95       	lsr	r30
    13c8:	e6 95       	lsr	r30
    13ca:	40 e2       	ldi	r20, 0x20	; 32
    13cc:	e4 9f       	mul	r30, r20
    13ce:	f0 01       	movw	r30, r0
    13d0:	11 24       	eor	r1, r1
    13d2:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    13d4:	87 70       	andi	r24, 0x07	; 7
    13d6:	21 e0       	ldi	r18, 0x01	; 1
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	a9 01       	movw	r20, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <usart_spi_select_device+0x24>
    13de:	44 0f       	add	r20, r20
    13e0:	55 1f       	adc	r21, r21
    13e2:	8a 95       	dec	r24
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    13e6:	46 83       	std	Z+6, r20	; 0x06
    13e8:	08 95       	ret

000013ea <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    13ea:	fb 01       	movw	r30, r22
    13ec:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    13ee:	e8 2f       	mov	r30, r24
    13f0:	e6 95       	lsr	r30
    13f2:	e6 95       	lsr	r30
    13f4:	e6 95       	lsr	r30
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	e4 9f       	mul	r30, r20
    13fa:	f0 01       	movw	r30, r0
    13fc:	11 24       	eor	r1, r1
    13fe:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1400:	87 70       	andi	r24, 0x07	; 7
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <usart_spi_deselect_device+0x24>
    140a:	44 0f       	add	r20, r20
    140c:	55 1f       	adc	r21, r21
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1412:	45 83       	std	Z+5, r20	; 0x05
    1414:	08 95       	ret

00001416 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    1416:	80 93 7a 22 	sts	0x227A, r24	; 0x80227a <fbpointer>
    141a:	90 93 7b 22 	sts	0x227B, r25	; 0x80227b <fbpointer+0x1>
    141e:	08 95       	ret

00001420 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    1420:	20 91 7a 22 	lds	r18, 0x227A	; 0x80227a <fbpointer>
    1424:	30 91 7b 22 	lds	r19, 0x227B	; 0x80227b <fbpointer+0x1>
    1428:	90 e8       	ldi	r25, 0x80	; 128
    142a:	89 9f       	mul	r24, r25
    142c:	20 0d       	add	r18, r0
    142e:	31 1d       	adc	r19, r1
    1430:	11 24       	eor	r1, r1
    1432:	f9 01       	movw	r30, r18
    1434:	e6 0f       	add	r30, r22
    1436:	f1 1d       	adc	r31, r1
    1438:	40 83       	st	Z, r20
    143a:	08 95       	ret

0000143c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    143c:	20 91 7a 22 	lds	r18, 0x227A	; 0x80227a <fbpointer>
    1440:	30 91 7b 22 	lds	r19, 0x227B	; 0x80227b <fbpointer+0x1>
    1444:	90 e8       	ldi	r25, 0x80	; 128
    1446:	89 9f       	mul	r24, r25
    1448:	20 0d       	add	r18, r0
    144a:	31 1d       	adc	r19, r1
    144c:	11 24       	eor	r1, r1
    144e:	f9 01       	movw	r30, r18
    1450:	e6 0f       	add	r30, r22
    1452:	f1 1d       	adc	r31, r1
}
    1454:	80 81       	ld	r24, Z
    1456:	08 95       	ret

00001458 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	e4 2f       	mov	r30, r20
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	e8 0f       	add	r30, r24
    1468:	f1 1d       	adc	r31, r1
    146a:	e1 38       	cpi	r30, 0x81	; 129
    146c:	f1 05       	cpc	r31, r1
    146e:	1c f0       	brlt	.+6      	; 0x1476 <gfx_mono_generic_draw_horizontal_line+0x1e>
    1470:	c0 e8       	ldi	r28, 0x80	; 128
    1472:	4c 2f       	mov	r20, r28
    1474:	48 1b       	sub	r20, r24
    1476:	44 23       	and	r20, r20
    1478:	09 f4       	brne	.+2      	; 0x147c <gfx_mono_generic_draw_horizontal_line+0x24>
    147a:	4a c0       	rjmp	.+148    	; 0x1510 <gfx_mono_generic_draw_horizontal_line+0xb8>
    147c:	d6 2f       	mov	r29, r22
    147e:	d6 95       	lsr	r29
    1480:	d6 95       	lsr	r29
    1482:	d6 95       	lsr	r29
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	98 e0       	ldi	r25, 0x08	; 8
    1488:	d9 9f       	mul	r29, r25
    148a:	60 19       	sub	r22, r0
    148c:	71 09       	sbc	r23, r1
    148e:	11 24       	eor	r1, r1
    1490:	e1 e0       	ldi	r30, 0x01	; 1
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	df 01       	movw	r26, r30
    1496:	02 c0       	rjmp	.+4      	; 0x149c <gfx_mono_generic_draw_horizontal_line+0x44>
    1498:	aa 0f       	add	r26, r26
    149a:	bb 1f       	adc	r27, r27
    149c:	6a 95       	dec	r22
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <gfx_mono_generic_draw_horizontal_line+0x40>
    14a0:	fa 2e       	mov	r15, r26
    14a2:	21 30       	cpi	r18, 0x01	; 1
    14a4:	21 f0       	breq	.+8      	; 0x14ae <gfx_mono_generic_draw_horizontal_line+0x56>
    14a6:	98 f0       	brcs	.+38     	; 0x14ce <gfx_mono_generic_draw_horizontal_line+0x76>
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	19 f1       	breq	.+70     	; 0x14f2 <gfx_mono_generic_draw_horizontal_line+0x9a>
    14ac:	31 c0       	rjmp	.+98     	; 0x1510 <gfx_mono_generic_draw_horizontal_line+0xb8>
    14ae:	c4 2f       	mov	r28, r20
    14b0:	1f ef       	ldi	r17, 0xFF	; 255
    14b2:	18 0f       	add	r17, r24
    14b4:	01 2f       	mov	r16, r17
    14b6:	0c 0f       	add	r16, r28
    14b8:	60 2f       	mov	r22, r16
    14ba:	8d 2f       	mov	r24, r29
    14bc:	f8 da       	rcall	.-2576   	; 0xaae <gfx_mono_st7565r_get_byte>
    14be:	4f 2d       	mov	r20, r15
    14c0:	48 2b       	or	r20, r24
    14c2:	60 2f       	mov	r22, r16
    14c4:	8d 2f       	mov	r24, r29
    14c6:	d4 d9       	rcall	.-3160   	; 0x870 <gfx_mono_st7565r_put_byte>
    14c8:	c1 50       	subi	r28, 0x01	; 1
    14ca:	a1 f7       	brne	.-24     	; 0x14b4 <gfx_mono_generic_draw_horizontal_line+0x5c>
    14cc:	21 c0       	rjmp	.+66     	; 0x1510 <gfx_mono_generic_draw_horizontal_line+0xb8>
    14ce:	c4 2f       	mov	r28, r20
    14d0:	1f ef       	ldi	r17, 0xFF	; 255
    14d2:	18 0f       	add	r17, r24
    14d4:	fa 2e       	mov	r15, r26
    14d6:	f0 94       	com	r15
    14d8:	01 2f       	mov	r16, r17
    14da:	0c 0f       	add	r16, r28
    14dc:	60 2f       	mov	r22, r16
    14de:	8d 2f       	mov	r24, r29
    14e0:	e6 da       	rcall	.-2612   	; 0xaae <gfx_mono_st7565r_get_byte>
    14e2:	4f 2d       	mov	r20, r15
    14e4:	48 23       	and	r20, r24
    14e6:	60 2f       	mov	r22, r16
    14e8:	8d 2f       	mov	r24, r29
    14ea:	c2 d9       	rcall	.-3196   	; 0x870 <gfx_mono_st7565r_put_byte>
    14ec:	c1 50       	subi	r28, 0x01	; 1
    14ee:	a1 f7       	brne	.-24     	; 0x14d8 <gfx_mono_generic_draw_horizontal_line+0x80>
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <gfx_mono_generic_draw_horizontal_line+0xb8>
    14f2:	c4 2f       	mov	r28, r20
    14f4:	1f ef       	ldi	r17, 0xFF	; 255
    14f6:	18 0f       	add	r17, r24
    14f8:	01 2f       	mov	r16, r17
    14fa:	0c 0f       	add	r16, r28
    14fc:	60 2f       	mov	r22, r16
    14fe:	8d 2f       	mov	r24, r29
    1500:	d6 da       	rcall	.-2644   	; 0xaae <gfx_mono_st7565r_get_byte>
    1502:	4f 2d       	mov	r20, r15
    1504:	48 27       	eor	r20, r24
    1506:	60 2f       	mov	r22, r16
    1508:	8d 2f       	mov	r24, r29
    150a:	b2 d9       	rcall	.-3228   	; 0x870 <gfx_mono_st7565r_put_byte>
    150c:	c1 50       	subi	r28, 0x01	; 1
    150e:	a1 f7       	brne	.-24     	; 0x14f8 <gfx_mono_generic_draw_horizontal_line+0xa0>
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	08 95       	ret

0000151c <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
	if (height == 0) {
    1526:	22 23       	and	r18, r18
    1528:	69 f0       	breq	.+26     	; 0x1544 <gfx_mono_generic_draw_filled_rect+0x28>
    152a:	f4 2e       	mov	r15, r20
    152c:	18 2f       	mov	r17, r24
    152e:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    1530:	df ef       	ldi	r29, 0xFF	; 255
    1532:	d6 0f       	add	r29, r22
    1534:	6d 2f       	mov	r22, r29
    1536:	6c 0f       	add	r22, r28
    1538:	20 2f       	mov	r18, r16
    153a:	4f 2d       	mov	r20, r15
    153c:	81 2f       	mov	r24, r17
    153e:	8c df       	rcall	.-232    	; 0x1458 <gfx_mono_generic_draw_horizontal_line>
    1540:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    1542:	c1 f7       	brne	.-16     	; 0x1534 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	08 95       	ret

00001550 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	1f 92       	push	r1
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    155a:	9f b7       	in	r25, 0x3f	; 63
    155c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    155e:	f8 94       	cli
	return flags;
    1560:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1562:	e8 2f       	mov	r30, r24
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	e0 59       	subi	r30, 0x90	; 144
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	60 95       	com	r22
    156c:	80 81       	ld	r24, Z
    156e:	68 23       	and	r22, r24
    1570:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1572:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1574:	0f 90       	pop	r0
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    157c:	af 92       	push	r10
    157e:	bf 92       	push	r11
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	c8 2f       	mov	r28, r24
    1592:	e6 2e       	mov	r14, r22
    1594:	b4 2e       	mov	r11, r20
    1596:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1598:	00 e0       	ldi	r16, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	24 81       	ldd	r18, Z+4	; 0x04
    159e:	43 81       	ldd	r20, Z+3	; 0x03
    15a0:	6b 2d       	mov	r22, r11
    15a2:	8e 2d       	mov	r24, r14
    15a4:	bb df       	rcall	.-138    	; 0x151c <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    15a6:	f6 01       	movw	r30, r12
    15a8:	80 81       	ld	r24, Z
    15aa:	81 11       	cpse	r24, r1
    15ac:	39 c0       	rjmp	.+114    	; 0x1620 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    15ae:	83 81       	ldd	r24, Z+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	26 95       	lsr	r18
    15b4:	26 95       	lsr	r18
    15b6:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    15b8:	87 70       	andi	r24, 0x07	; 7
    15ba:	09 f0       	breq	.+2      	; 0x15be <gfx_mono_draw_char+0x42>
		char_row_size++;
    15bc:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    15be:	f6 01       	movw	r30, r12
    15c0:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    15c2:	8c 2f       	mov	r24, r28
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	35 81       	ldd	r19, Z+5	; 0x05
    15c8:	83 1b       	sub	r24, r19
    15ca:	91 09       	sbc	r25, r1
    15cc:	2a 9d       	mul	r18, r10
    15ce:	90 01       	movw	r18, r0
    15d0:	11 24       	eor	r1, r1
    15d2:	82 9f       	mul	r24, r18
    15d4:	a0 01       	movw	r20, r0
    15d6:	83 9f       	mul	r24, r19
    15d8:	50 0d       	add	r21, r0
    15da:	92 9f       	mul	r25, r18
    15dc:	50 0d       	add	r21, r0
    15de:	11 24       	eor	r1, r1
    15e0:	01 81       	ldd	r16, Z+1	; 0x01
    15e2:	12 81       	ldd	r17, Z+2	; 0x02
    15e4:	04 0f       	add	r16, r20
    15e6:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    15e8:	f6 01       	movw	r30, r12
    15ea:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    15ec:	ff 20       	and	r15, r15
    15ee:	a1 f0       	breq	.+40     	; 0x1618 <gfx_mono_draw_char+0x9c>
    15f0:	d0 e0       	ldi	r29, 0x00	; 0
    15f2:	c0 e0       	ldi	r28, 0x00	; 0
    15f4:	8e 2d       	mov	r24, r14
    15f6:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    15f8:	9c 2f       	mov	r25, r28
    15fa:	97 70       	andi	r25, 0x07	; 7
    15fc:	21 f4       	brne	.+8      	; 0x1606 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    15fe:	f8 01       	movw	r30, r16
    1600:	d4 91       	lpm	r29, Z
				glyph_data++;
    1602:	0f 5f       	subi	r16, 0xFF	; 255
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    1606:	dd 23       	and	r29, r29
    1608:	1c f4       	brge	.+6      	; 0x1610 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	6b 2d       	mov	r22, r11
    160e:	19 da       	rcall	.-3022   	; 0xa42 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1610:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1612:	cf 5f       	subi	r28, 0xFF	; 255
    1614:	fc 12       	cpse	r15, r28
    1616:	ee cf       	rjmp	.-36     	; 0x15f4 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1618:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    161a:	aa 94       	dec	r10
	} while (rows_left > 0);
    161c:	a1 10       	cpse	r10, r1
    161e:	e4 cf       	rjmp	.-56     	; 0x15e8 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	08 95       	ret

00001636 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1636:	df 92       	push	r13
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	d6 2e       	mov	r13, r22
    1646:	04 2f       	mov	r16, r20
    1648:	79 01       	movw	r14, r18
    164a:	ec 01       	movw	r28, r24
    164c:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    164e:	89 91       	ld	r24, Y+
    1650:	8a 30       	cpi	r24, 0x0A	; 10
    1652:	31 f4       	brne	.+12     	; 0x1660 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    1654:	f7 01       	movw	r30, r14
    1656:	84 81       	ldd	r24, Z+4	; 0x04
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    165c:	1d 2d       	mov	r17, r13
    165e:	09 c0       	rjmp	.+18     	; 0x1672 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    1660:	8d 30       	cpi	r24, 0x0D	; 13
    1662:	39 f0       	breq	.+14     	; 0x1672 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1664:	97 01       	movw	r18, r14
    1666:	40 2f       	mov	r20, r16
    1668:	61 2f       	mov	r22, r17
    166a:	88 df       	rcall	.-240    	; 0x157c <gfx_mono_draw_char>
			x += font->width;
    166c:	f7 01       	movw	r30, r14
    166e:	83 81       	ldd	r24, Z+3	; 0x03
    1670:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1672:	88 81       	ld	r24, Y
    1674:	81 11       	cpse	r24, r1
    1676:	eb cf       	rjmp	.-42     	; 0x164e <gfx_mono_draw_string+0x18>
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	08 95       	ret

00001688 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1692:	c6 2f       	mov	r28, r22
    1694:	d0 e0       	ldi	r29, 0x00	; 0
    1696:	de 01       	movw	r26, r28
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <ioport_configure_port_pin+0x18>
    169c:	b5 95       	asr	r27
    169e:	a7 95       	ror	r26
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <ioport_configure_port_pin+0x14>
    16a4:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    16a6:	50 8b       	std	Z+16, r21	; 0x10
    16a8:	2f 5f       	subi	r18, 0xFF	; 255
    16aa:	3f 4f       	sbci	r19, 0xFF	; 255
    16ac:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    16ae:	28 30       	cpi	r18, 0x08	; 8
    16b0:	31 05       	cpc	r19, r1
    16b2:	89 f7       	brne	.-30     	; 0x1696 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    16b4:	40 ff       	sbrs	r20, 0
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    16b8:	41 ff       	sbrs	r20, 1
    16ba:	03 c0       	rjmp	.+6      	; 0x16c2 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    16bc:	fc 01       	movw	r30, r24
    16be:	65 83       	std	Z+5, r22	; 0x05
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    16c2:	fc 01       	movw	r30, r24
    16c4:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    16c6:	fc 01       	movw	r30, r24
    16c8:	61 83       	std	Z+1, r22	; 0x01
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    16cc:	fc 01       	movw	r30, r24
    16ce:	62 83       	std	Z+2, r22	; 0x02
	}
}
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    16d6:	43 e0       	ldi	r20, 0x03	; 3
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	80 ee       	ldi	r24, 0xE0	; 224
    16de:	97 e0       	ldi	r25, 0x07	; 7
    16e0:	d3 df       	rcall	.-90     	; 0x1688 <ioport_configure_port_pin>
    16e2:	43 e0       	ldi	r20, 0x03	; 3
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	80 ee       	ldi	r24, 0xE0	; 224
    16ea:	97 e0       	ldi	r25, 0x07	; 7
    16ec:	cd df       	rcall	.-102    	; 0x1688 <ioport_configure_port_pin>
    16ee:	43 e0       	ldi	r20, 0x03	; 3
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	60 e1       	ldi	r22, 0x10	; 16
    16f4:	80 e6       	ldi	r24, 0x60	; 96
    16f6:	96 e0       	ldi	r25, 0x06	; 6
    16f8:	c7 df       	rcall	.-114    	; 0x1688 <ioport_configure_port_pin>
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	50 e4       	ldi	r21, 0x40	; 64
    16fe:	60 e2       	ldi	r22, 0x20	; 32
    1700:	80 e6       	ldi	r24, 0x60	; 96
    1702:	96 e0       	ldi	r25, 0x06	; 6
    1704:	c1 df       	rcall	.-126    	; 0x1688 <ioport_configure_port_pin>
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	5b e1       	ldi	r21, 0x1B	; 27
    170a:	60 e2       	ldi	r22, 0x20	; 32
    170c:	80 e8       	ldi	r24, 0x80	; 128
    170e:	96 e0       	ldi	r25, 0x06	; 6
    1710:	bb df       	rcall	.-138    	; 0x1688 <ioport_configure_port_pin>
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	5b e1       	ldi	r21, 0x1B	; 27
    1716:	62 e0       	ldi	r22, 0x02	; 2
    1718:	80 ea       	ldi	r24, 0xA0	; 160
    171a:	96 e0       	ldi	r25, 0x06	; 6
    171c:	b5 df       	rcall	.-150    	; 0x1688 <ioport_configure_port_pin>
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	5b e1       	ldi	r21, 0x1B	; 27
    1722:	64 e0       	ldi	r22, 0x04	; 4
    1724:	80 ea       	ldi	r24, 0xA0	; 160
    1726:	96 e0       	ldi	r25, 0x06	; 6
    1728:	af df       	rcall	.-162    	; 0x1688 <ioport_configure_port_pin>
    172a:	43 e0       	ldi	r20, 0x03	; 3
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	62 e0       	ldi	r22, 0x02	; 2
    1730:	80 e6       	ldi	r24, 0x60	; 96
    1732:	96 e0       	ldi	r25, 0x06	; 6
    1734:	a9 df       	rcall	.-174    	; 0x1688 <ioport_configure_port_pin>
    1736:	43 e0       	ldi	r20, 0x03	; 3
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	68 e0       	ldi	r22, 0x08	; 8
    173c:	80 e6       	ldi	r24, 0x60	; 96
    173e:	96 e0       	ldi	r25, 0x06	; 6
    1740:	a3 df       	rcall	.-186    	; 0x1688 <ioport_configure_port_pin>
    1742:	43 e0       	ldi	r20, 0x03	; 3
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	68 e0       	ldi	r22, 0x08	; 8
    1748:	80 ea       	ldi	r24, 0xA0	; 160
    174a:	96 e0       	ldi	r25, 0x06	; 6
    174c:	9d df       	rcall	.-198    	; 0x1688 <ioport_configure_port_pin>
    174e:	43 e0       	ldi	r20, 0x03	; 3
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	80 e6       	ldi	r24, 0x60	; 96
    1756:	96 e0       	ldi	r25, 0x06	; 6
    1758:	97 df       	rcall	.-210    	; 0x1688 <ioport_configure_port_pin>
    175a:	43 e0       	ldi	r20, 0x03	; 3
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	68 e0       	ldi	r22, 0x08	; 8
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	96 e0       	ldi	r25, 0x06	; 6
    1764:	91 df       	rcall	.-222    	; 0x1688 <ioport_configure_port_pin>
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	60 e1       	ldi	r22, 0x10	; 16
    176c:	80 e8       	ldi	r24, 0x80	; 128
    176e:	96 e0       	ldi	r25, 0x06	; 6
    1770:	8b df       	rcall	.-234    	; 0x1688 <ioport_configure_port_pin>
    1772:	43 e0       	ldi	r20, 0x03	; 3
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	62 e0       	ldi	r22, 0x02	; 2
    1778:	80 e6       	ldi	r24, 0x60	; 96
    177a:	96 e0       	ldi	r25, 0x06	; 6
    177c:	85 df       	rcall	.-246    	; 0x1688 <ioport_configure_port_pin>
    177e:	43 e0       	ldi	r20, 0x03	; 3
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	68 e0       	ldi	r22, 0x08	; 8
    1784:	80 e6       	ldi	r24, 0x60	; 96
    1786:	96 e0       	ldi	r25, 0x06	; 6
    1788:	7f df       	rcall	.-258    	; 0x1688 <ioport_configure_port_pin>
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	64 e0       	ldi	r22, 0x04	; 4
    1790:	80 e6       	ldi	r24, 0x60	; 96
    1792:	96 e0       	ldi	r25, 0x06	; 6
    1794:	79 df       	rcall	.-270    	; 0x1688 <ioport_configure_port_pin>
    1796:	43 e0       	ldi	r20, 0x03	; 3
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	60 e1       	ldi	r22, 0x10	; 16
    179c:	80 ea       	ldi	r24, 0xA0	; 160
    179e:	96 e0       	ldi	r25, 0x06	; 6
    17a0:	73 df       	rcall	.-282    	; 0x1688 <ioport_configure_port_pin>
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	96 e0       	ldi	r25, 0x06	; 6
    17ac:	6d df       	rcall	.-294    	; 0x1688 <ioport_configure_port_pin>
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	64 e0       	ldi	r22, 0x04	; 4
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	96 e0       	ldi	r25, 0x06	; 6
    17b8:	67 df       	rcall	.-306    	; 0x1688 <ioport_configure_port_pin>
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	62 e0       	ldi	r22, 0x02	; 2
    17c0:	80 e2       	ldi	r24, 0x20	; 32
    17c2:	96 e0       	ldi	r25, 0x06	; 6
    17c4:	61 df       	rcall	.-318    	; 0x1688 <ioport_configure_port_pin>
    17c6:	43 e0       	ldi	r20, 0x03	; 3
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	68 e0       	ldi	r22, 0x08	; 8
    17cc:	80 e4       	ldi	r24, 0x40	; 64
    17ce:	96 e0       	ldi	r25, 0x06	; 6
    17d0:	5b df       	rcall	.-330    	; 0x1688 <ioport_configure_port_pin>
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	64 e0       	ldi	r22, 0x04	; 4
    17d8:	80 e4       	ldi	r24, 0x40	; 64
    17da:	96 e0       	ldi	r25, 0x06	; 6
    17dc:	55 df       	rcall	.-342    	; 0x1688 <ioport_configure_port_pin>
    17de:	43 e0       	ldi	r20, 0x03	; 3
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	68 e0       	ldi	r22, 0x08	; 8
    17e4:	80 e6       	ldi	r24, 0x60	; 96
    17e6:	96 e0       	ldi	r25, 0x06	; 6
    17e8:	4f df       	rcall	.-354    	; 0x1688 <ioport_configure_port_pin>
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	64 e0       	ldi	r22, 0x04	; 4
    17f0:	80 e6       	ldi	r24, 0x60	; 96
    17f2:	96 e0       	ldi	r25, 0x06	; 6
    17f4:	49 df       	rcall	.-366    	; 0x1688 <ioport_configure_port_pin>
    17f6:	43 e0       	ldi	r20, 0x03	; 3
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	68 e0       	ldi	r22, 0x08	; 8
    17fc:	80 e8       	ldi	r24, 0x80	; 128
    17fe:	96 e0       	ldi	r25, 0x06	; 6
    1800:	43 df       	rcall	.-378    	; 0x1688 <ioport_configure_port_pin>
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	64 e0       	ldi	r22, 0x04	; 4
    1808:	80 e8       	ldi	r24, 0x80	; 128
    180a:	96 e0       	ldi	r25, 0x06	; 6
    180c:	3d cf       	rjmp	.-390    	; 0x1688 <ioport_configure_port_pin>
    180e:	08 95       	ret

00001810 <__portable_avr_delay_cycles>:
	}else if(strcmp(str2,reads) == 0){
		gpio_set_pin_high(J2_PIN0);
	}else{
		gpio_set_pin_low(J2_PIN0);
	}
}
    1810:	04 c0       	rjmp	.+8      	; 0x181a <__portable_avr_delay_cycles+0xa>
    1812:	61 50       	subi	r22, 0x01	; 1
    1814:	71 09       	sbc	r23, r1
    1816:	81 09       	sbc	r24, r1
    1818:	91 09       	sbc	r25, r1
    181a:	61 15       	cp	r22, r1
    181c:	71 05       	cpc	r23, r1
    181e:	81 05       	cpc	r24, r1
    1820:	91 05       	cpc	r25, r1
    1822:	b9 f7       	brne	.-18     	; 0x1812 <__portable_avr_delay_cycles+0x2>
    1824:	08 95       	ret

00001826 <setUpSerial>:
    1826:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
    182a:	8c e0       	ldi	r24, 0x0C	; 12
    182c:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7008a6>
    1830:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    183a:	88 e1       	ldi	r24, 0x18	; 24
    183c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    1840:	08 95       	ret

00001842 <sendString>:
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	fc 01       	movw	r30, r24
    1848:	60 81       	ld	r22, Z
    184a:	66 23       	and	r22, r22
    184c:	69 f0       	breq	.+26     	; 0x1868 <sendString+0x26>
    184e:	ec 01       	movw	r28, r24
    1850:	21 96       	adiw	r28, 0x01	; 1
    1852:	80 ea       	ldi	r24, 0xA0	; 160
    1854:	98 e0       	ldi	r25, 0x08	; 8
    1856:	2d d9       	rcall	.-3494   	; 0xab2 <usart_putchar>
    1858:	6b e0       	ldi	r22, 0x0B	; 11
    185a:	7a e1       	ldi	r23, 0x1A	; 26
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	d7 df       	rcall	.-82     	; 0x1810 <__portable_avr_delay_cycles>
    1862:	69 91       	ld	r22, Y+
    1864:	61 11       	cpse	r22, r1
    1866:	f5 cf       	rjmp	.-22     	; 0x1852 <sendString+0x10>
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <main>:

int main (void)
{
    // Insert system clock initialization code here (sysclk_init()).
	//sysclk_init();
    board_init();
    186e:	33 df       	rcall	.-410    	; 0x16d6 <board_init>
    gfx_mono_init();
    1870:	a6 d8       	rcall	.-3764   	; 0x9be <gfx_mono_st7565r_init>
    1872:	80 e1       	ldi	r24, 0x10	; 16
    1874:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    1878:	20 e0       	ldi	r18, 0x00	; 0
   
    gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	
	gfx_mono_draw_string("RaihanRadityaRafinal",0, 0, &sysfont);
    187a:	30 e2       	ldi	r19, 0x20	; 32
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	8e e0       	ldi	r24, 0x0E	; 14
    1882:	90 e2       	ldi	r25, 0x20	; 32
    1884:	d8 de       	rcall	.-592    	; 0x1636 <gfx_mono_draw_string>
    1886:	20 e0       	ldi	r18, 0x00	; 0
	gfx_mono_draw_string("Praktikum 7",0, 8, &sysfont);
    1888:	30 e2       	ldi	r19, 0x20	; 32
    188a:	48 e0       	ldi	r20, 0x08	; 8
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	83 e2       	ldi	r24, 0x23	; 35
    1890:	90 e2       	ldi	r25, 0x20	; 32
    1892:	d1 de       	rcall	.-606    	; 0x1636 <gfx_mono_draw_string>
    1894:	88 e0       	ldi	r24, 0x08	; 8
   
    PORTC_OUTSET = PIN3_bm; // PC3 as TX
    1896:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    189a:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    PORTC_DIRSET = PIN3_bm; //TX pin as output
    189e:	84 e0       	ldi	r24, 0x04	; 4
   
    PORTC_OUTCLR = PIN2_bm; //PC2 as RX
    18a0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    PORTC_DIRCLR = PIN2_bm; //RX pin as input
    18a4:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
   
    setUpSerial();
    18a8:	be df       	rcall	.-132    	; 0x1826 <setUpSerial>
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    18aa:	67 e0       	ldi	r22, 0x07	; 7
    18ac:	70 e2       	ldi	r23, 0x20	; 32
    18ae:	80 ea       	ldi	r24, 0xA0	; 160
    18b0:	98 e0       	ldi	r25, 0x08	; 8
    18b2:	16 da       	rcall	.-3028   	; 0xce0 <usart_init_rs232>
    18b4:	c0 ea       	ldi	r28, 0xA0	; 160

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    18b6:	d6 e0       	ldi	r29, 0x06	; 6
    18b8:	0f 2e       	mov	r0, r31
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    18ba:	f0 e6       	ldi	r31, 0x60	; 96
    18bc:	ef 2e       	mov	r14, r31
    18be:	f6 e0       	ldi	r31, 0x06	; 6
    18c0:	ff 2e       	mov	r15, r31
    18c2:	f0 2d       	mov	r31, r0
    18c4:	68 94       	set
    18c6:	cc 24       	eor	r12, r12
    18c8:	c4 f8       	bld	r12, 4
    18ca:	00 ee       	ldi	r16, 0xE0	; 224
    18cc:	17 e0       	ldi	r17, 0x07	; 7
    18ce:	68 94       	set
    18d0:	dd 24       	eor	r13, r13
    18d2:	d1 f8       	bld	r13, 1
    18d4:	88 85       	ldd	r24, Y+8	; 0x08

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    18d6:	81 fd       	sbrc	r24, 1

	

	   
    while(1){	   
        if(gpio_pin_is_low(GPIO_PUSH_BUTTON_1) && gpio_pin_is_high(GPIO_PUSH_BUTTON_2)){
    18d8:	0b c0       	rjmp	.+22     	; 0x18f0 <main+0x82>
    18da:	88 85       	ldd	r24, Y+8	; 0x08
    18dc:	82 ff       	sbrs	r24, 2
    18de:	08 c0       	rjmp	.+16     	; 0x18f0 <main+0x82>
    18e0:	f8 01       	movw	r30, r16
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    18e2:	d6 82       	std	Z+6, r13	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    18e4:	f7 01       	movw	r30, r14
    18e6:	c5 82       	std	Z+5, r12	; 0x05
            gpio_set_pin_low(LED1_GPIO);
            gpio_set_pin_high(LED2_GPIO);
			// sendChar('u');
            sendString("LED 1 On LED 2 Off\n");
    18e8:	8f e2       	ldi	r24, 0x2F	; 47
    18ea:	90 e2       	ldi	r25, 0x20	; 32
    18ec:	aa df       	rcall	.-172    	; 0x1842 <sendString>
    18ee:	1b c0       	rjmp	.+54     	; 0x1926 <main+0xb8>
    18f0:	88 85       	ldd	r24, Y+8	; 0x08

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    18f2:	82 fd       	sbrc	r24, 2
			//usart_putchar(USART_SERIAL_EXAMPLE,'u');
        }else if(gpio_pin_is_low(GPIO_PUSH_BUTTON_2) && gpio_pin_is_high(GPIO_PUSH_BUTTON_1)){
    18f4:	0b c0       	rjmp	.+22     	; 0x190c <main+0x9e>
    18f6:	88 85       	ldd	r24, Y+8	; 0x08
    18f8:	81 ff       	sbrs	r24, 1
    18fa:	08 c0       	rjmp	.+16     	; 0x190c <main+0x9e>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    18fc:	f7 01       	movw	r30, r14
    18fe:	c6 82       	std	Z+6, r12	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1900:	f8 01       	movw	r30, r16
    1902:	d5 82       	std	Z+5, r13	; 0x05
            gpio_set_pin_low(LED2_GPIO);
            gpio_set_pin_high(LED1_GPIO);
            // sendChar('d');
            sendString("LED 1 Off LED 2 On\n");
    1904:	83 e4       	ldi	r24, 0x43	; 67
    1906:	90 e2       	ldi	r25, 0x20	; 32
    1908:	9c df       	rcall	.-200    	; 0x1842 <sendString>
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <main+0xb8>
    190c:	88 85       	ldd	r24, Y+8	; 0x08

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    190e:	81 ff       	sbrs	r24, 1
			//usart_putchar(USART_SERIAL_EXAMPLE,'d');
        }else if(gpio_pin_is_high(GPIO_PUSH_BUTTON_1) && gpio_pin_is_high(GPIO_PUSH_BUTTON_2)){
    1910:	0a c0       	rjmp	.+20     	; 0x1926 <main+0xb8>
    1912:	88 85       	ldd	r24, Y+8	; 0x08
    1914:	82 ff       	sbrs	r24, 2
    1916:	07 c0       	rjmp	.+14     	; 0x1926 <main+0xb8>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1918:	f7 01       	movw	r30, r14
    191a:	c5 82       	std	Z+5, r12	; 0x05
    191c:	f8 01       	movw	r30, r16
            gpio_set_pin_high(LED2_GPIO);
            gpio_set_pin_high(LED1_GPIO);
            // sendChar('n');
            sendString("LED 1 Off LED 2 Off\n");
    191e:	d5 82       	std	Z+5, r13	; 0x05
    1920:	87 e5       	ldi	r24, 0x57	; 87
    1922:	90 e2       	ldi	r25, 0x20	; 32
    1924:	8e df       	rcall	.-228    	; 0x1842 <sendString>
		//in = usart_getchar(USART_SERIAL_EXAMPLE);
		//reads[0] = in;
       
        //snprintf(strbuf, sizeof(strbuf), "Read USART : %3d",in);
        //gfx_mono_draw_string(reads,0, 0, &sysfont);
        delay_ms(50);
    1926:	6b e1       	ldi	r22, 0x1B	; 27
    1928:	71 e4       	ldi	r23, 0x41	; 65
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	70 df       	rcall	.-288    	; 0x1810 <__portable_avr_delay_cycles>
    1930:	d1 cf       	rjmp	.-94     	; 0x18d4 <main+0x66>

00001932 <__udivmodsi4>:
    }
    1932:	a1 e2       	ldi	r26, 0x21	; 33
    1934:	1a 2e       	mov	r1, r26
    1936:	aa 1b       	sub	r26, r26
    1938:	bb 1b       	sub	r27, r27
    193a:	fd 01       	movw	r30, r26
    193c:	0d c0       	rjmp	.+26     	; 0x1958 <__udivmodsi4_ep>

0000193e <__udivmodsi4_loop>:
    193e:	aa 1f       	adc	r26, r26
    1940:	bb 1f       	adc	r27, r27
    1942:	ee 1f       	adc	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	a2 17       	cp	r26, r18
    1948:	b3 07       	cpc	r27, r19
    194a:	e4 07       	cpc	r30, r20
    194c:	f5 07       	cpc	r31, r21
    194e:	20 f0       	brcs	.+8      	; 0x1958 <__udivmodsi4_ep>
    1950:	a2 1b       	sub	r26, r18
    1952:	b3 0b       	sbc	r27, r19
    1954:	e4 0b       	sbc	r30, r20
    1956:	f5 0b       	sbc	r31, r21

00001958 <__udivmodsi4_ep>:
    1958:	66 1f       	adc	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	1a 94       	dec	r1
    1962:	69 f7       	brne	.-38     	; 0x193e <__udivmodsi4_loop>
    1964:	60 95       	com	r22
    1966:	70 95       	com	r23
    1968:	80 95       	com	r24
    196a:	90 95       	com	r25
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	bd 01       	movw	r22, r26
    1972:	cf 01       	movw	r24, r30
    1974:	08 95       	ret

00001976 <_exit>:
    1976:	f8 94       	cli

00001978 <__stop_program>:
    1978:	ff cf       	rjmp	.-2      	; 0x1978 <__stop_program>
