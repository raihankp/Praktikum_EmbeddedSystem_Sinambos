
Praktikum2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00802000  00001b26  00001bba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000282  0080202a  0080202a  00001be4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001c40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dc64  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004add  00000000  00000000  0000fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cf7  00000000  00000000  000146ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000934  00000000  00000000  0001b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032729  00000000  00000000  0001bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000584f  00000000  00000000  0004e401  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00053c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be41  00000000  00000000  00054058  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	64 c2       	rjmp	.+1224   	; 0x4ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c2       	rjmp	.+1220   	; 0x4ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c2       	rjmp	.+1216   	; 0x4ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c2       	rjmp	.+1212   	; 0x4ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c2       	rjmp	.+1208   	; 0x4ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c2       	rjmp	.+1204   	; 0x4ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c2       	rjmp	.+1200   	; 0x4ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c2       	rjmp	.+1196   	; 0x4ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c2       	rjmp	.+1192   	; 0x4ce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c2       	rjmp	.+1188   	; 0x4ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c2       	rjmp	.+1184   	; 0x4ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c2       	rjmp	.+1180   	; 0x4ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c2       	rjmp	.+1176   	; 0x4ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c2       	rjmp	.+1172   	; 0x4ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c2       	rjmp	.+1168   	; 0x4ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c2       	rjmp	.+1164   	; 0x4ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c2       	rjmp	.+1160   	; 0x4ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c2       	rjmp	.+1156   	; 0x4ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c2       	rjmp	.+1152   	; 0x4ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c2       	rjmp	.+1148   	; 0x4ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c2       	rjmp	.+1144   	; 0x4ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c2       	rjmp	.+1140   	; 0x4ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c2       	rjmp	.+1136   	; 0x4ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c2       	rjmp	.+1132   	; 0x4ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c2       	rjmp	.+1128   	; 0x4ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c2       	rjmp	.+1124   	; 0x4ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c2       	rjmp	.+1120   	; 0x4ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c2       	rjmp	.+1116   	; 0x4ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c2       	rjmp	.+1112   	; 0x4ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c2       	rjmp	.+1108   	; 0x4ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c2       	rjmp	.+1104   	; 0x4ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c2       	rjmp	.+1100   	; 0x4ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c2       	rjmp	.+1096   	; 0x4ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c2       	rjmp	.+1092   	; 0x4ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c2       	rjmp	.+1088   	; 0x4ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c2       	rjmp	.+1084   	; 0x4ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c2       	rjmp	.+1080   	; 0x4ce <__bad_interrupt>
      96:	00 00       	nop
      98:	1a c2       	rjmp	.+1076   	; 0x4ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	18 c2       	rjmp	.+1072   	; 0x4ce <__bad_interrupt>
      9e:	00 00       	nop
      a0:	16 c2       	rjmp	.+1068   	; 0x4ce <__bad_interrupt>
      a2:	00 00       	nop
      a4:	14 c2       	rjmp	.+1064   	; 0x4ce <__bad_interrupt>
      a6:	00 00       	nop
      a8:	12 c2       	rjmp	.+1060   	; 0x4ce <__bad_interrupt>
      aa:	00 00       	nop
      ac:	10 c2       	rjmp	.+1056   	; 0x4ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0e c2       	rjmp	.+1052   	; 0x4ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c c2       	rjmp	.+1048   	; 0x4ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0a c2       	rjmp	.+1044   	; 0x4ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	08 c2       	rjmp	.+1040   	; 0x4ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	06 c2       	rjmp	.+1036   	; 0x4ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	04 c2       	rjmp	.+1032   	; 0x4ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	02 c2       	rjmp	.+1028   	; 0x4ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	00 c2       	rjmp	.+1024   	; 0x4ce <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fe c1       	rjmp	.+1020   	; 0x4ce <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fc c1       	rjmp	.+1016   	; 0x4ce <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fa c1       	rjmp	.+1012   	; 0x4ce <__bad_interrupt>
      da:	00 00       	nop
      dc:	f8 c1       	rjmp	.+1008   	; 0x4ce <__bad_interrupt>
      de:	00 00       	nop
      e0:	f6 c1       	rjmp	.+1004   	; 0x4ce <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f4 c1       	rjmp	.+1000   	; 0x4ce <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f2 c1       	rjmp	.+996    	; 0x4ce <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f0 c1       	rjmp	.+992    	; 0x4ce <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ee c1       	rjmp	.+988    	; 0x4ce <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ec c1       	rjmp	.+984    	; 0x4ce <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ea c1       	rjmp	.+980    	; 0x4ce <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e8 c1       	rjmp	.+976    	; 0x4ce <__bad_interrupt>
      fe:	00 00       	nop
     100:	e6 c1       	rjmp	.+972    	; 0x4ce <__bad_interrupt>
     102:	00 00       	nop
     104:	e4 c1       	rjmp	.+968    	; 0x4ce <__bad_interrupt>
     106:	00 00       	nop
     108:	e2 c1       	rjmp	.+964    	; 0x4ce <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e0 c1       	rjmp	.+960    	; 0x4ce <__bad_interrupt>
     10e:	00 00       	nop
     110:	de c1       	rjmp	.+956    	; 0x4ce <__bad_interrupt>
     112:	00 00       	nop
     114:	dc c1       	rjmp	.+952    	; 0x4ce <__bad_interrupt>
     116:	00 00       	nop
     118:	da c1       	rjmp	.+948    	; 0x4ce <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d8 c1       	rjmp	.+944    	; 0x4ce <__bad_interrupt>
     11e:	00 00       	nop
     120:	d6 c1       	rjmp	.+940    	; 0x4ce <__bad_interrupt>
     122:	00 00       	nop
     124:	d4 c1       	rjmp	.+936    	; 0x4ce <__bad_interrupt>
     126:	00 00       	nop
     128:	d2 c1       	rjmp	.+932    	; 0x4ce <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d0 c1       	rjmp	.+928    	; 0x4ce <__bad_interrupt>
     12e:	00 00       	nop
     130:	ce c1       	rjmp	.+924    	; 0x4ce <__bad_interrupt>
     132:	00 00       	nop
     134:	cc c1       	rjmp	.+920    	; 0x4ce <__bad_interrupt>
     136:	00 00       	nop
     138:	ca c1       	rjmp	.+916    	; 0x4ce <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c8 c1       	rjmp	.+912    	; 0x4ce <__bad_interrupt>
     13e:	00 00       	nop
     140:	c6 c1       	rjmp	.+908    	; 0x4ce <__bad_interrupt>
     142:	00 00       	nop
     144:	c4 c1       	rjmp	.+904    	; 0x4ce <__bad_interrupt>
     146:	00 00       	nop
     148:	c2 c1       	rjmp	.+900    	; 0x4ce <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c0 c1       	rjmp	.+896    	; 0x4ce <__bad_interrupt>
     14e:	00 00       	nop
     150:	be c1       	rjmp	.+892    	; 0x4ce <__bad_interrupt>
     152:	00 00       	nop
     154:	bc c1       	rjmp	.+888    	; 0x4ce <__bad_interrupt>
     156:	00 00       	nop
     158:	ba c1       	rjmp	.+884    	; 0x4ce <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b8 c1       	rjmp	.+880    	; 0x4ce <__bad_interrupt>
     15e:	00 00       	nop
     160:	b6 c1       	rjmp	.+876    	; 0x4ce <__bad_interrupt>
     162:	00 00       	nop
     164:	b4 c1       	rjmp	.+872    	; 0x4ce <__bad_interrupt>
     166:	00 00       	nop
     168:	b2 c1       	rjmp	.+868    	; 0x4ce <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b0 c1       	rjmp	.+864    	; 0x4ce <__bad_interrupt>
     16e:	00 00       	nop
     170:	ae c1       	rjmp	.+860    	; 0x4ce <__bad_interrupt>
     172:	00 00       	nop
     174:	ac c1       	rjmp	.+856    	; 0x4ce <__bad_interrupt>
     176:	00 00       	nop
     178:	aa c1       	rjmp	.+852    	; 0x4ce <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a8 c1       	rjmp	.+848    	; 0x4ce <__bad_interrupt>
     17e:	00 00       	nop
     180:	a6 c1       	rjmp	.+844    	; 0x4ce <__bad_interrupt>
     182:	00 00       	nop
     184:	a4 c1       	rjmp	.+840    	; 0x4ce <__bad_interrupt>
     186:	00 00       	nop
     188:	a2 c1       	rjmp	.+836    	; 0x4ce <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a0 c1       	rjmp	.+832    	; 0x4ce <__bad_interrupt>
     18e:	00 00       	nop
     190:	9e c1       	rjmp	.+828    	; 0x4ce <__bad_interrupt>
     192:	00 00       	nop
     194:	9c c1       	rjmp	.+824    	; 0x4ce <__bad_interrupt>
     196:	00 00       	nop
     198:	9a c1       	rjmp	.+820    	; 0x4ce <__bad_interrupt>
     19a:	00 00       	nop
     19c:	98 c1       	rjmp	.+816    	; 0x4ce <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	96 c1       	rjmp	.+812    	; 0x4ce <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	94 c1       	rjmp	.+808    	; 0x4ce <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	92 c1       	rjmp	.+804    	; 0x4ce <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	90 c1       	rjmp	.+800    	; 0x4ce <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8e c1       	rjmp	.+796    	; 0x4ce <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8c c1       	rjmp	.+792    	; 0x4ce <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8a c1       	rjmp	.+788    	; 0x4ce <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	88 c1       	rjmp	.+784    	; 0x4ce <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	86 c1       	rjmp	.+780    	; 0x4ce <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	84 c1       	rjmp	.+776    	; 0x4ce <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	82 c1       	rjmp	.+772    	; 0x4ce <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	80 c1       	rjmp	.+768    	; 0x4ce <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7e c1       	rjmp	.+764    	; 0x4ce <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7c c1       	rjmp	.+760    	; 0x4ce <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7a c1       	rjmp	.+756    	; 0x4ce <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	78 c1       	rjmp	.+752    	; 0x4ce <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	76 c1       	rjmp	.+748    	; 0x4ce <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	74 c1       	rjmp	.+744    	; 0x4ce <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	72 c1       	rjmp	.+740    	; 0x4ce <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	70 c1       	rjmp	.+736    	; 0x4ce <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6e c1       	rjmp	.+732    	; 0x4ce <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6c c1       	rjmp	.+728    	; 0x4ce <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6a c1       	rjmp	.+724    	; 0x4ce <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1df4>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65dc>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x65b4>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55dc>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1db4>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e6 e2       	ldi	r30, 0x26	; 38
     4a6:	fb e1       	ldi	r31, 0x1B	; 27
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	aa 32       	cpi	r26, 0x2A	; 42
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	aa e2       	ldi	r26, 0x2A	; 42
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	ac 3a       	cpi	r26, 0xAC	; 172
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	a9 d7       	rcall	.+3922   	; 0x141c <main>
     4ca:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <_exit>

000004ce <__bad_interrupt>:
     4ce:	98 cd       	rjmp	.-1232   	; 0x0 <__vectors>

000004d0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d2:	61 50       	subi	r22, 0x01	; 1
     4d4:	71 09       	sbc	r23, r1
     4d6:	81 09       	sbc	r24, r1
     4d8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4da:	61 15       	cp	r22, r1
     4dc:	71 05       	cpc	r23, r1
     4de:	81 05       	cpc	r24, r1
     4e0:	91 05       	cpc	r25, r1
     4e2:	b9 f7       	brne	.-18     	; 0x4d2 <__portable_avr_delay_cycles+0x2>
     4e4:	08 95       	ret

000004e6 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4fe:	00 e0       	ldi	r16, 0x00	; 0
     500:	16 e0       	ldi	r17, 0x06	; 6
     502:	68 94       	set
     504:	ff 24       	eor	r15, r15
     506:	f3 f8       	bld	r15, 3
     508:	f8 01       	movw	r30, r16
     50a:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50c:	64 e0       	ldi	r22, 0x04	; 4
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	dd df       	rcall	.-70     	; 0x4d0 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     516:	f8 01       	movw	r30, r16
     518:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51a:	64 e0       	ldi	r22, 0x04	; 4
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	d6 df       	rcall	.-84     	; 0x4d0 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     524:	0f 2e       	mov	r0, r31
     526:	fb e2       	ldi	r31, 0x2B	; 43
     528:	bf 2e       	mov	r11, r31
     52a:	f0 2d       	mov	r31, r0
     52c:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     52e:	80 ea       	ldi	r24, 0xA0	; 160
     530:	99 e0       	ldi	r25, 0x09	; 9
     532:	d3 d4       	rcall	.+2470   	; 0xeda <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     534:	c1 2c       	mov	r12, r1
     536:	d1 2c       	mov	r13, r1
     538:	76 01       	movw	r14, r12
     53a:	00 e4       	ldi	r16, 0x40	; 64
     53c:	12 e4       	ldi	r17, 0x42	; 66
     53e:	2f e0       	ldi	r18, 0x0F	; 15
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	43 e0       	ldi	r20, 0x03	; 3
     544:	be 01       	movw	r22, r28
     546:	6f 5f       	subi	r22, 0xFF	; 255
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	80 ea       	ldi	r24, 0xA0	; 160
     54c:	99 e0       	ldi	r25, 0x09	; 9
     54e:	f4 d4       	rcall	.+2536   	; 0xf38 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     550:	00 e6       	ldi	r16, 0x60	; 96
     552:	16 e0       	ldi	r17, 0x06	; 6
     554:	ff 24       	eor	r15, r15
     556:	f3 94       	inc	r15
     558:	f8 01       	movw	r30, r16
     55a:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55c:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     55e:	be 01       	movw	r22, r28
     560:	6f 5f       	subi	r22, 0xFF	; 255
     562:	7f 4f       	sbci	r23, 0xFF	; 255
     564:	80 ea       	ldi	r24, 0xA0	; 160
     566:	99 e0       	ldi	r25, 0x09	; 9
     568:	01 d5       	rcall	.+2562   	; 0xf6c <usart_spi_select_device>
     56a:	f8 01       	movw	r30, r16
     56c:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     56e:	e0 ea       	ldi	r30, 0xA0	; 160
     570:	f9 e0       	ldi	r31, 0x09	; 9
     572:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     574:	85 ff       	sbrs	r24, 5
     576:	fd cf       	rjmp	.-6      	; 0x572 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     578:	80 ea       	ldi	r24, 0xA0	; 160
     57a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     57e:	e0 ea       	ldi	r30, 0xA0	; 160
     580:	f9 e0       	ldi	r31, 0x09	; 9
     582:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     584:	86 ff       	sbrs	r24, 6
     586:	fd cf       	rjmp	.-6      	; 0x582 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     588:	e0 ea       	ldi	r30, 0xA0	; 160
     58a:	f9 e0       	ldi	r31, 0x09	; 9
     58c:	80 e4       	ldi	r24, 0x40	; 64
     58e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     590:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     592:	be 01       	movw	r22, r28
     594:	6f 5f       	subi	r22, 0xFF	; 255
     596:	7f 4f       	sbci	r23, 0xFF	; 255
     598:	80 ea       	ldi	r24, 0xA0	; 160
     59a:	99 e0       	ldi	r25, 0x09	; 9
     59c:	fd d4       	rcall	.+2554   	; 0xf98 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     59e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	be 01       	movw	r22, r28
     5a4:	6f 5f       	subi	r22, 0xFF	; 255
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	80 ea       	ldi	r24, 0xA0	; 160
     5aa:	99 e0       	ldi	r25, 0x09	; 9
     5ac:	df d4       	rcall	.+2494   	; 0xf6c <usart_spi_select_device>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b4:	e0 ea       	ldi	r30, 0xA0	; 160
     5b6:	f9 e0       	ldi	r31, 0x09	; 9
     5b8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5ba:	85 ff       	sbrs	r24, 5
     5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5be:	86 ea       	ldi	r24, 0xA6	; 166
     5c0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c4:	e0 ea       	ldi	r30, 0xA0	; 160
     5c6:	f9 e0       	ldi	r31, 0x09	; 9
     5c8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5ca:	86 ff       	sbrs	r24, 6
     5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5ce:	e0 ea       	ldi	r30, 0xA0	; 160
     5d0:	f9 e0       	ldi	r31, 0x09	; 9
     5d2:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d4:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d6:	80 81       	ld	r24, Z
     5d8:	be 01       	movw	r22, r28
     5da:	6f 5f       	subi	r22, 0xFF	; 255
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	80 ea       	ldi	r24, 0xA0	; 160
     5e0:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e2:	da d4       	rcall	.+2484   	; 0xf98 <usart_spi_deselect_device>
     5e4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	be 01       	movw	r22, r28
     5ea:	6f 5f       	subi	r22, 0xFF	; 255
     5ec:	7f 4f       	sbci	r23, 0xFF	; 255
     5ee:	80 ea       	ldi	r24, 0xA0	; 160
     5f0:	99 e0       	ldi	r25, 0x09	; 9
     5f2:	bc d4       	rcall	.+2424   	; 0xf6c <usart_spi_select_device>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fa:	e0 ea       	ldi	r30, 0xA0	; 160
     5fc:	f9 e0       	ldi	r31, 0x09	; 9
     5fe:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     600:	85 ff       	sbrs	r24, 5
     602:	fd cf       	rjmp	.-6      	; 0x5fe <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     604:	88 ec       	ldi	r24, 0xC8	; 200
     606:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60a:	e0 ea       	ldi	r30, 0xA0	; 160
     60c:	f9 e0       	ldi	r31, 0x09	; 9
     60e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     610:	86 ff       	sbrs	r24, 6
     612:	fd cf       	rjmp	.-6      	; 0x60e <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     614:	e0 ea       	ldi	r30, 0xA0	; 160
     616:	f9 e0       	ldi	r31, 0x09	; 9
     618:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     61a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61c:	80 81       	ld	r24, Z
     61e:	be 01       	movw	r22, r28
     620:	6f 5f       	subi	r22, 0xFF	; 255
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	80 ea       	ldi	r24, 0xA0	; 160
     626:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     628:	b7 d4       	rcall	.+2414   	; 0xf98 <usart_spi_deselect_device>
     62a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	be 01       	movw	r22, r28
     630:	6f 5f       	subi	r22, 0xFF	; 255
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	80 ea       	ldi	r24, 0xA0	; 160
     636:	99 e0       	ldi	r25, 0x09	; 9
     638:	99 d4       	rcall	.+2354   	; 0xf6c <usart_spi_select_device>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     640:	e0 ea       	ldi	r30, 0xA0	; 160
     642:	f9 e0       	ldi	r31, 0x09	; 9
     644:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     646:	85 ff       	sbrs	r24, 5
     648:	fd cf       	rjmp	.-6      	; 0x644 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64a:	82 ea       	ldi	r24, 0xA2	; 162
     64c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     650:	e0 ea       	ldi	r30, 0xA0	; 160
     652:	f9 e0       	ldi	r31, 0x09	; 9
     654:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     656:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     658:	fd cf       	rjmp	.-6      	; 0x654 <st7565r_init+0x16e>
     65a:	e0 ea       	ldi	r30, 0xA0	; 160
     65c:	f9 e0       	ldi	r31, 0x09	; 9
     65e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     660:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     662:	80 81       	ld	r24, Z
     664:	be 01       	movw	r22, r28
     666:	6f 5f       	subi	r22, 0xFF	; 255
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	80 ea       	ldi	r24, 0xA0	; 160
     66c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     66e:	94 d4       	rcall	.+2344   	; 0xf98 <usart_spi_deselect_device>
     670:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	be 01       	movw	r22, r28
     676:	6f 5f       	subi	r22, 0xFF	; 255
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	80 ea       	ldi	r24, 0xA0	; 160
     67c:	99 e0       	ldi	r25, 0x09	; 9
     67e:	76 d4       	rcall	.+2284   	; 0xf6c <usart_spi_select_device>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     686:	e0 ea       	ldi	r30, 0xA0	; 160
     688:	f9 e0       	ldi	r31, 0x09	; 9
     68a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68c:	85 ff       	sbrs	r24, 5
     68e:	fd cf       	rjmp	.-6      	; 0x68a <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     690:	8f e2       	ldi	r24, 0x2F	; 47
     692:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     696:	e0 ea       	ldi	r30, 0xA0	; 160
     698:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69a:	81 81       	ldd	r24, Z+1	; 0x01
     69c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     69e:	fd cf       	rjmp	.-6      	; 0x69a <st7565r_init+0x1b4>
     6a0:	e0 ea       	ldi	r30, 0xA0	; 160
     6a2:	f9 e0       	ldi	r31, 0x09	; 9
     6a4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6a8:	80 81       	ld	r24, Z
     6aa:	be 01       	movw	r22, r28
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	80 ea       	ldi	r24, 0xA0	; 160
     6b2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b4:	71 d4       	rcall	.+2274   	; 0xf98 <usart_spi_deselect_device>
     6b6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	be 01       	movw	r22, r28
     6bc:	6f 5f       	subi	r22, 0xFF	; 255
     6be:	7f 4f       	sbci	r23, 0xFF	; 255
     6c0:	80 ea       	ldi	r24, 0xA0	; 160
     6c2:	99 e0       	ldi	r25, 0x09	; 9
     6c4:	53 d4       	rcall	.+2214   	; 0xf6c <usart_spi_select_device>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6cc:	e0 ea       	ldi	r30, 0xA0	; 160
     6ce:	f9 e0       	ldi	r31, 0x09	; 9
     6d0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d2:	85 ff       	sbrs	r24, 5
     6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d6:	88 ef       	ldi	r24, 0xF8	; 248
     6d8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6dc:	e0 ea       	ldi	r30, 0xA0	; 160
     6de:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e0:	81 81       	ldd	r24, Z+1	; 0x01
     6e2:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <st7565r_init+0x1fa>
     6e6:	e0 ea       	ldi	r30, 0xA0	; 160
     6e8:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ea:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ec:	81 83       	std	Z+1, r24	; 0x01
     6ee:	80 81       	ld	r24, Z
     6f0:	be 01       	movw	r22, r28
     6f2:	6f 5f       	subi	r22, 0xFF	; 255
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	80 ea       	ldi	r24, 0xA0	; 160
     6f8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fa:	4e d4       	rcall	.+2204   	; 0xf98 <usart_spi_deselect_device>
     6fc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	be 01       	movw	r22, r28
     702:	6f 5f       	subi	r22, 0xFF	; 255
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	80 ea       	ldi	r24, 0xA0	; 160
     708:	99 e0       	ldi	r25, 0x09	; 9
     70a:	30 d4       	rcall	.+2144   	; 0xf6c <usart_spi_select_device>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     712:	e0 ea       	ldi	r30, 0xA0	; 160
     714:	f9 e0       	ldi	r31, 0x09	; 9
     716:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     718:	85 ff       	sbrs	r24, 5
     71a:	fd cf       	rjmp	.-6      	; 0x716 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71c:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     720:	e0 ea       	ldi	r30, 0xA0	; 160
     722:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     724:	81 81       	ldd	r24, Z+1	; 0x01
     726:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     728:	fd cf       	rjmp	.-6      	; 0x724 <st7565r_init+0x23e>
     72a:	e0 ea       	ldi	r30, 0xA0	; 160
     72c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     72e:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     730:	81 83       	std	Z+1, r24	; 0x01
     732:	80 81       	ld	r24, Z
     734:	be 01       	movw	r22, r28
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	80 ea       	ldi	r24, 0xA0	; 160
     73c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     73e:	2c d4       	rcall	.+2136   	; 0xf98 <usart_spi_deselect_device>
     740:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	be 01       	movw	r22, r28
     746:	6f 5f       	subi	r22, 0xFF	; 255
     748:	7f 4f       	sbci	r23, 0xFF	; 255
     74a:	80 ea       	ldi	r24, 0xA0	; 160
     74c:	99 e0       	ldi	r25, 0x09	; 9
     74e:	0e d4       	rcall	.+2076   	; 0xf6c <usart_spi_select_device>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     756:	e0 ea       	ldi	r30, 0xA0	; 160
     758:	f9 e0       	ldi	r31, 0x09	; 9
     75a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75c:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     75e:	fd cf       	rjmp	.-6      	; 0x75a <st7565r_init+0x274>
     760:	81 e2       	ldi	r24, 0x21	; 33
     762:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     766:	e0 ea       	ldi	r30, 0xA0	; 160
     768:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76c:	86 ff       	sbrs	r24, 6
     76e:	fd cf       	rjmp	.-6      	; 0x76a <st7565r_init+0x284>
     770:	e0 ea       	ldi	r30, 0xA0	; 160
     772:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     774:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     776:	81 83       	std	Z+1, r24	; 0x01
     778:	80 81       	ld	r24, Z
     77a:	be 01       	movw	r22, r28
     77c:	6f 5f       	subi	r22, 0xFF	; 255
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	80 ea       	ldi	r24, 0xA0	; 160
     782:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     784:	09 d4       	rcall	.+2066   	; 0xf98 <usart_spi_deselect_device>
     786:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     788:	89 83       	std	Y+1, r24	; 0x01
     78a:	be 01       	movw	r22, r28
     78c:	6f 5f       	subi	r22, 0xFF	; 255
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	80 ea       	ldi	r24, 0xA0	; 160
     792:	99 e0       	ldi	r25, 0x09	; 9
     794:	eb d3       	rcall	.+2006   	; 0xf6c <usart_spi_select_device>
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79c:	e0 ea       	ldi	r30, 0xA0	; 160
     79e:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a0:	81 81       	ldd	r24, Z+1	; 0x01
     7a2:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a4:	fd cf       	rjmp	.-6      	; 0x7a0 <st7565r_init+0x2ba>
     7a6:	81 e8       	ldi	r24, 0x81	; 129
     7a8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ac:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7ae:	f9 e0       	ldi	r31, 0x09	; 9
     7b0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b2:	86 ff       	sbrs	r24, 6
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <st7565r_init+0x2ca>
     7b6:	e0 ea       	ldi	r30, 0xA0	; 160
     7b8:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ba:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7bc:	81 83       	std	Z+1, r24	; 0x01
     7be:	80 81       	ld	r24, Z
     7c0:	be 01       	movw	r22, r28
     7c2:	6f 5f       	subi	r22, 0xFF	; 255
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
     7c6:	80 ea       	ldi	r24, 0xA0	; 160
     7c8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7ca:	e6 d3       	rcall	.+1996   	; 0xf98 <usart_spi_deselect_device>
     7cc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	be 01       	movw	r22, r28
     7d2:	6f 5f       	subi	r22, 0xFF	; 255
     7d4:	7f 4f       	sbci	r23, 0xFF	; 255
     7d6:	80 ea       	ldi	r24, 0xA0	; 160
     7d8:	99 e0       	ldi	r25, 0x09	; 9
     7da:	c8 d3       	rcall	.+1936   	; 0xf6c <usart_spi_select_device>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e2:	e0 ea       	ldi	r30, 0xA0	; 160
     7e4:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e6:	81 81       	ldd	r24, Z+1	; 0x01
     7e8:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <st7565r_init+0x300>
     7ec:	81 e2       	ldi	r24, 0x21	; 33
     7ee:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f2:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f4:	f9 e0       	ldi	r31, 0x09	; 9
     7f6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7f8:	86 ff       	sbrs	r24, 6
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <st7565r_init+0x310>
     7fc:	e0 ea       	ldi	r30, 0xA0	; 160
     7fe:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     800:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     802:	81 83       	std	Z+1, r24	; 0x01
     804:	80 81       	ld	r24, Z
     806:	be 01       	movw	r22, r28
     808:	6f 5f       	subi	r22, 0xFF	; 255
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	80 ea       	ldi	r24, 0xA0	; 160
     80e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     810:	c3 d3       	rcall	.+1926   	; 0xf98 <usart_spi_deselect_device>
     812:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	be 01       	movw	r22, r28
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	80 ea       	ldi	r24, 0xA0	; 160
     81e:	99 e0       	ldi	r25, 0x09	; 9
     820:	a5 d3       	rcall	.+1866   	; 0xf6c <usart_spi_select_device>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     828:	e0 ea       	ldi	r30, 0xA0	; 160
     82a:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82c:	81 81       	ldd	r24, Z+1	; 0x01
     82e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     830:	fd cf       	rjmp	.-6      	; 0x82c <st7565r_init+0x346>
     832:	8f ea       	ldi	r24, 0xAF	; 175
     834:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     838:	e0 ea       	ldi	r30, 0xA0	; 160
     83a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83c:	81 81       	ldd	r24, Z+1	; 0x01
     83e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     840:	fd cf       	rjmp	.-6      	; 0x83c <st7565r_init+0x356>
     842:	e0 ea       	ldi	r30, 0xA0	; 160
     844:	f9 e0       	ldi	r31, 0x09	; 9
     846:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     848:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84a:	80 81       	ld	r24, Z
     84c:	be 01       	movw	r22, r28
     84e:	6f 5f       	subi	r22, 0xFF	; 255
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	80 ea       	ldi	r24, 0xA0	; 160
     854:	99 e0       	ldi	r25, 0x09	; 9
     856:	a0 d3       	rcall	.+1856   	; 0xf98 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	08 95       	ret

0000086e <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	1f 92       	push	r1
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	08 2f       	mov	r16, r24
     880:	f6 2e       	mov	r15, r22
     882:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     884:	a4 d3       	rcall	.+1864   	; 0xfce <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     886:	0f 70       	andi	r16, 0x0F	; 15
     888:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     88a:	8b e2       	ldi	r24, 0x2B	; 43
     88c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	80 ea       	ldi	r24, 0xA0	; 160
     896:	99 e0       	ldi	r25, 0x09	; 9
     898:	69 d3       	rcall	.+1746   	; 0xf6c <usart_spi_select_device>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8a0:	e0 ea       	ldi	r30, 0xA0	; 160
     8a2:	f9 e0       	ldi	r31, 0x09	; 9
     8a4:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8a6:	95 ff       	sbrs	r25, 5
     8a8:	fd cf       	rjmp	.-6      	; 0x8a4 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8aa:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8ae:	e0 ea       	ldi	r30, 0xA0	; 160
     8b0:	f9 e0       	ldi	r31, 0x09	; 9
     8b2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8b4:	86 ff       	sbrs	r24, 6
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8b8:	e0 ea       	ldi	r30, 0xA0	; 160
     8ba:	f9 e0       	ldi	r31, 0x09	; 9
     8bc:	80 e4       	ldi	r24, 0x40	; 64
     8be:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8c0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	80 ea       	ldi	r24, 0xA0	; 160
     8ca:	99 e0       	ldi	r25, 0x09	; 9
     8cc:	65 d3       	rcall	.+1738   	; 0xf98 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8ce:	0f 2d       	mov	r16, r15
     8d0:	0f 77       	andi	r16, 0x7F	; 127
     8d2:	02 95       	swap	r16
     8d4:	0f 70       	andi	r16, 0x0F	; 15
     8d6:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8d8:	8b e2       	ldi	r24, 0x2B	; 43
     8da:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8dc:	be 01       	movw	r22, r28
     8de:	6f 5f       	subi	r22, 0xFF	; 255
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	80 ea       	ldi	r24, 0xA0	; 160
     8e4:	99 e0       	ldi	r25, 0x09	; 9
     8e6:	42 d3       	rcall	.+1668   	; 0xf6c <usart_spi_select_device>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8ee:	e0 ea       	ldi	r30, 0xA0	; 160
     8f0:	f9 e0       	ldi	r31, 0x09	; 9
     8f2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8f4:	85 ff       	sbrs	r24, 5
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8f8:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8fc:	e0 ea       	ldi	r30, 0xA0	; 160
     8fe:	f9 e0       	ldi	r31, 0x09	; 9
     900:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     902:	86 ff       	sbrs	r24, 6
     904:	fd cf       	rjmp	.-6      	; 0x900 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     906:	e0 ea       	ldi	r30, 0xA0	; 160
     908:	f9 e0       	ldi	r31, 0x09	; 9
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     90e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     910:	be 01       	movw	r22, r28
     912:	6f 5f       	subi	r22, 0xFF	; 255
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	80 ea       	ldi	r24, 0xA0	; 160
     918:	99 e0       	ldi	r25, 0x09	; 9
     91a:	3e d3       	rcall	.+1660   	; 0xf98 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     91c:	0f 2d       	mov	r16, r15
     91e:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     920:	8b e2       	ldi	r24, 0x2B	; 43
     922:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     924:	be 01       	movw	r22, r28
     926:	6f 5f       	subi	r22, 0xFF	; 255
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	80 ea       	ldi	r24, 0xA0	; 160
     92c:	99 e0       	ldi	r25, 0x09	; 9
     92e:	1e d3       	rcall	.+1596   	; 0xf6c <usart_spi_select_device>
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     936:	e0 ea       	ldi	r30, 0xA0	; 160
     938:	f9 e0       	ldi	r31, 0x09	; 9
     93a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     93c:	85 ff       	sbrs	r24, 5
     93e:	fd cf       	rjmp	.-6      	; 0x93a <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     940:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     944:	e0 ea       	ldi	r30, 0xA0	; 160
     946:	f9 e0       	ldi	r31, 0x09	; 9
     948:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     94a:	86 ff       	sbrs	r24, 6
     94c:	fd cf       	rjmp	.-6      	; 0x948 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     94e:	e0 ea       	ldi	r30, 0xA0	; 160
     950:	f9 e0       	ldi	r31, 0x09	; 9
     952:	80 e4       	ldi	r24, 0x40	; 64
     954:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     956:	80 81       	ld	r24, Z
     958:	be 01       	movw	r22, r28
     95a:	6f 5f       	subi	r22, 0xFF	; 255
     95c:	7f 4f       	sbci	r23, 0xFF	; 255
     95e:	80 ea       	ldi	r24, 0xA0	; 160
     960:	99 e0       	ldi	r25, 0x09	; 9
     962:	1a d3       	rcall	.+1588   	; 0xf98 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     964:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	be 01       	movw	r22, r28
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	80 ea       	ldi	r24, 0xA0	; 160
     970:	99 e0       	ldi	r25, 0x09	; 9
     972:	fc d2       	rcall	.+1528   	; 0xf6c <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     97a:	e0 ea       	ldi	r30, 0xA0	; 160
     97c:	f9 e0       	ldi	r31, 0x09	; 9
     97e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     980:	85 ff       	sbrs	r24, 5
     982:	fd cf       	rjmp	.-6      	; 0x97e <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     984:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     988:	e0 ea       	ldi	r30, 0xA0	; 160
     98a:	f9 e0       	ldi	r31, 0x09	; 9
     98c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     98e:	86 ff       	sbrs	r24, 6
     990:	fd cf       	rjmp	.-6      	; 0x98c <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     992:	e0 ea       	ldi	r30, 0xA0	; 160
     994:	f9 e0       	ldi	r31, 0x09	; 9
     996:	80 e4       	ldi	r24, 0x40	; 64
     998:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     99a:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9a2:	be 01       	movw	r22, r28
     9a4:	6f 5f       	subi	r22, 0xFF	; 255
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	80 ea       	ldi	r24, 0xA0	; 160
     9aa:	99 e0       	ldi	r25, 0x09	; 9
     9ac:	f5 d2       	rcall	.+1514   	; 0xf98 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9ae:	0f 90       	pop	r0
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	08 95       	ret

000009bc <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	1f 92       	push	r1
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9ca:	8a e2       	ldi	r24, 0x2A	; 42
     9cc:	90 e2       	ldi	r25, 0x20	; 32
     9ce:	fa d2       	rcall	.+1524   	; 0xfc4 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9d0:	8a dd       	rcall	.-1260   	; 0x4e6 <st7565r_init>
     9d2:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	80 ea       	ldi	r24, 0xA0	; 160
     9de:	99 e0       	ldi	r25, 0x09	; 9
     9e0:	c5 d2       	rcall	.+1418   	; 0xf6c <usart_spi_select_device>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     9e8:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9ea:	f9 e0       	ldi	r31, 0x09	; 9
     9ec:	81 81       	ldd	r24, Z+1	; 0x01
     9ee:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9f0:	fd cf       	rjmp	.-6      	; 0x9ec <gfx_mono_st7565r_init+0x30>
     9f2:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9f4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     9f8:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9fa:	f9 e0       	ldi	r31, 0x09	; 9
     9fc:	81 81       	ldd	r24, Z+1	; 0x01
     9fe:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <gfx_mono_st7565r_init+0x40>
     a02:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a04:	f9 e0       	ldi	r31, 0x09	; 9
     a06:	80 e4       	ldi	r24, 0x40	; 64
     a08:	81 83       	std	Z+1, r24	; 0x01
     a0a:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a0c:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a0e:	6f 5f       	subi	r22, 0xFF	; 255
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	80 ea       	ldi	r24, 0xA0	; 160
     a14:	99 e0       	ldi	r25, 0x09	; 9
     a16:	c0 d2       	rcall	.+1408   	; 0xf98 <usart_spi_deselect_device>
     a18:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a1a:	0a c0       	rjmp	.+20     	; 0xa30 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	61 2f       	mov	r22, r17
     a20:	80 2f       	mov	r24, r16
     a22:	25 df       	rcall	.-438    	; 0x86e <gfx_mono_st7565r_put_byte>
     a24:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a26:	10 38       	cpi	r17, 0x80	; 128
     a28:	c9 f7       	brne	.-14     	; 0xa1c <gfx_mono_st7565r_init+0x60>
     a2a:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a2c:	04 30       	cpi	r16, 0x04	; 4
     a2e:	11 f0       	breq	.+4      	; 0xa34 <gfx_mono_st7565r_init+0x78>
     a30:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a32:	f4 cf       	rjmp	.-24     	; 0xa1c <gfx_mono_st7565r_init+0x60>
     a34:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <gfx_mono_st7565r_draw_pixel>:
     a40:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a4a:	88 23       	and	r24, r24
     a4c:	4c f1       	brlt	.+82     	; 0xaa0 <gfx_mono_st7565r_draw_pixel+0x60>
     a4e:	60 32       	cpi	r22, 0x20	; 32
     a50:	38 f5       	brcc	.+78     	; 0xaa0 <gfx_mono_st7565r_draw_pixel+0x60>
     a52:	d4 2f       	mov	r29, r20
     a54:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a56:	f6 2e       	mov	r15, r22
     a58:	f6 94       	lsr	r15
     a5a:	f6 94       	lsr	r15
     a5c:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	f8 9e       	mul	r15, r24
     a64:	60 19       	sub	r22, r0
     a66:	71 09       	sbc	r23, r1
     a68:	11 24       	eor	r1, r1
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	8c 01       	movw	r16, r24
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <gfx_mono_st7565r_draw_pixel+0x36>
     a72:	00 0f       	add	r16, r16
     a74:	11 1f       	adc	r17, r17
     a76:	6a 95       	dec	r22
     a78:	e2 f7       	brpl	.-8      	; 0xa72 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a7a:	6c 2f       	mov	r22, r28
     a7c:	8f 2d       	mov	r24, r15
     a7e:	b5 d2       	rcall	.+1386   	; 0xfea <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a80:	d1 30       	cpi	r29, 0x01	; 1
     a82:	21 f0       	breq	.+8      	; 0xa8c <gfx_mono_st7565r_draw_pixel+0x4c>
     a84:	28 f0       	brcs	.+10     	; 0xa90 <gfx_mono_st7565r_draw_pixel+0x50>
     a86:	d2 30       	cpi	r29, 0x02	; 2
     a88:	31 f0       	breq	.+12     	; 0xa96 <gfx_mono_st7565r_draw_pixel+0x56>
     a8a:	06 c0       	rjmp	.+12     	; 0xa98 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     a8c:	80 2b       	or	r24, r16
		break;
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     a90:	00 95       	com	r16
     a92:	80 23       	and	r24, r16
		break;
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     a96:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     a98:	48 2f       	mov	r20, r24
     a9a:	6c 2f       	mov	r22, r28
     a9c:	8f 2d       	mov	r24, r15
     a9e:	e7 de       	rcall	.-562    	; 0x86e <gfx_mono_st7565r_put_byte>
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	08 95       	ret

00000aac <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aac:	9e c2       	rjmp	.+1340   	; 0xfea <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     aae:	08 95       	ret

00000ab0 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     ac2:	d9 01       	movw	r26, r18
     ac4:	c8 01       	movw	r24, r16
     ac6:	b6 95       	lsr	r27
     ac8:	a7 95       	ror	r26
     aca:	97 95       	ror	r25
     acc:	87 95       	ror	r24
     ace:	48 17       	cp	r20, r24
     ad0:	59 07       	cpc	r21, r25
     ad2:	6a 07       	cpc	r22, r26
     ad4:	7b 07       	cpc	r23, r27
     ad6:	70 f4       	brcc	.+28     	; 0xaf4 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     ad8:	6a 01       	movw	r12, r20
     ada:	7b 01       	movw	r14, r22
     adc:	cc 0c       	add	r12, r12
     ade:	dd 1c       	adc	r13, r13
     ae0:	ee 1c       	adc	r14, r14
     ae2:	ff 1c       	adc	r15, r15
     ae4:	c9 01       	movw	r24, r18
     ae6:	b8 01       	movw	r22, r16
     ae8:	a7 01       	movw	r20, r14
     aea:	96 01       	movw	r18, r12
     aec:	07 d5       	rcall	.+2574   	; 0x14fc <__udivmodsi4>
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	31 09       	sbc	r19, r1
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     af8:	83 2f       	mov	r24, r19
     afa:	8f 70       	andi	r24, 0x0F	; 15
     afc:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     afe:	2e 83       	std	Y+6, r18	; 0x06
}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	08 95       	ret

00000b12 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	1f 92       	push	r1
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	7c 01       	movw	r14, r24
     b28:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	09 f4       	brne	.+2      	; 0xb30 <usart_init_spi+0x1e>
     b2e:	b2 c1       	rjmp	.+868    	; 0xe94 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b30:	80 3c       	cpi	r24, 0xC0	; 192
     b32:	91 05       	cpc	r25, r1
     b34:	21 f4       	brne	.+8      	; 0xb3e <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b36:	60 e1       	ldi	r22, 0x10	; 16
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	e1 d2       	rcall	.+1474   	; 0x10fe <sysclk_enable_module>
     b3c:	ab c1       	rjmp	.+854    	; 0xe94 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b3e:	80 e8       	ldi	r24, 0x80	; 128
     b40:	e8 16       	cp	r14, r24
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	f8 06       	cpc	r15, r24
     b46:	21 f4       	brne	.+8      	; 0xb50 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b48:	62 e0       	ldi	r22, 0x02	; 2
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	d8 d2       	rcall	.+1456   	; 0x10fe <sysclk_enable_module>
     b4e:	a2 c1       	rjmp	.+836    	; 0xe94 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b50:	e1 14       	cp	r14, r1
     b52:	e1 e0       	ldi	r30, 0x01	; 1
     b54:	fe 06       	cpc	r15, r30
     b56:	21 f4       	brne	.+8      	; 0xb60 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	d0 d2       	rcall	.+1440   	; 0x10fe <sysclk_enable_module>
     b5e:	9a c1       	rjmp	.+820    	; 0xe94 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b60:	f0 e8       	ldi	r31, 0x80	; 128
     b62:	ef 16       	cp	r14, r31
     b64:	f3 e0       	ldi	r31, 0x03	; 3
     b66:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b68:	21 f4       	brne	.+8      	; 0xb72 <usart_init_spi+0x60>
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	c7 d2       	rcall	.+1422   	; 0x10fe <sysclk_enable_module>
     b70:	91 c1       	rjmp	.+802    	; 0xe94 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b72:	30 e9       	ldi	r19, 0x90	; 144
     b74:	e3 16       	cp	r14, r19
     b76:	33 e0       	ldi	r19, 0x03	; 3
     b78:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b7a:	21 f4       	brne	.+8      	; 0xb84 <usart_init_spi+0x72>
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	be d2       	rcall	.+1404   	; 0x10fe <sysclk_enable_module>
     b82:	88 c1       	rjmp	.+784    	; 0xe94 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b84:	e1 14       	cp	r14, r1
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b8a:	21 f4       	brne	.+8      	; 0xb94 <usart_init_spi+0x82>
     b8c:	62 e0       	ldi	r22, 0x02	; 2
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	b6 d2       	rcall	.+1388   	; 0x10fe <sysclk_enable_module>
     b92:	80 c1       	rjmp	.+768    	; 0xe94 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     b94:	e0 e4       	ldi	r30, 0x40	; 64
     b96:	ee 16       	cp	r14, r30
     b98:	e2 e0       	ldi	r30, 0x02	; 2
     b9a:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     b9c:	21 f4       	brne	.+8      	; 0xba6 <usart_init_spi+0x94>
     b9e:	62 e0       	ldi	r22, 0x02	; 2
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	ad d2       	rcall	.+1370   	; 0x10fe <sysclk_enable_module>
     ba4:	77 c1       	rjmp	.+750    	; 0xe94 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     ba6:	f0 e2       	ldi	r31, 0x20	; 32
     ba8:	ef 16       	cp	r14, r31
     baa:	f3 e0       	ldi	r31, 0x03	; 3
     bac:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     bae:	21 f4       	brne	.+8      	; 0xbb8 <usart_init_spi+0xa6>
     bb0:	64 e0       	ldi	r22, 0x04	; 4
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	a4 d2       	rcall	.+1352   	; 0x10fe <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     bb6:	6e c1       	rjmp	.+732    	; 0xe94 <usart_init_spi+0x382>
     bb8:	e1 14       	cp	r14, r1
     bba:	38 e0       	ldi	r19, 0x08	; 8
     bbc:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <usart_init_spi+0xb6>
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	9c d2       	rcall	.+1336   	; 0x10fe <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     bc6:	66 c1       	rjmp	.+716    	; 0xe94 <usart_init_spi+0x382>
     bc8:	e1 14       	cp	r14, r1
     bca:	89 e0       	ldi	r24, 0x09	; 9
     bcc:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     bce:	21 f4       	brne	.+8      	; 0xbd8 <usart_init_spi+0xc6>
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	94 d2       	rcall	.+1320   	; 0x10fe <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     bd6:	5e c1       	rjmp	.+700    	; 0xe94 <usart_init_spi+0x382>
     bd8:	e1 14       	cp	r14, r1
     bda:	ea e0       	ldi	r30, 0x0A	; 10
     bdc:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     bde:	21 f4       	brne	.+8      	; 0xbe8 <usart_init_spi+0xd6>
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	85 e0       	ldi	r24, 0x05	; 5
     be4:	8c d2       	rcall	.+1304   	; 0x10fe <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     be6:	56 c1       	rjmp	.+684    	; 0xe94 <usart_init_spi+0x382>
     be8:	e1 14       	cp	r14, r1
     bea:	fb e0       	ldi	r31, 0x0B	; 11
     bec:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     bee:	21 f4       	brne	.+8      	; 0xbf8 <usart_init_spi+0xe6>
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	84 d2       	rcall	.+1288   	; 0x10fe <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     bf6:	4e c1       	rjmp	.+668    	; 0xe94 <usart_init_spi+0x382>
     bf8:	30 e4       	ldi	r19, 0x40	; 64
     bfa:	e3 16       	cp	r14, r19
     bfc:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     bfe:	f3 06       	cpc	r15, r19
     c00:	21 f4       	brne	.+8      	; 0xc0a <usart_init_spi+0xf8>
     c02:	62 e0       	ldi	r22, 0x02	; 2
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	7b d2       	rcall	.+1270   	; 0x10fe <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     c08:	45 c1       	rjmp	.+650    	; 0xe94 <usart_init_spi+0x382>
     c0a:	80 e4       	ldi	r24, 0x40	; 64
     c0c:	e8 16       	cp	r14, r24
     c0e:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     c10:	f8 06       	cpc	r15, r24
     c12:	21 f4       	brne	.+8      	; 0xc1c <usart_init_spi+0x10a>
     c14:	62 e0       	ldi	r22, 0x02	; 2
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	72 d2       	rcall	.+1252   	; 0x10fe <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     c1a:	3c c1       	rjmp	.+632    	; 0xe94 <usart_init_spi+0x382>
     c1c:	e0 e4       	ldi	r30, 0x40	; 64
     c1e:	ee 16       	cp	r14, r30
     c20:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     c22:	fe 06       	cpc	r15, r30
     c24:	21 f4       	brne	.+8      	; 0xc2e <usart_init_spi+0x11c>
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	69 d2       	rcall	.+1234   	; 0x10fe <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c2c:	33 c1       	rjmp	.+614    	; 0xe94 <usart_init_spi+0x382>
     c2e:	f0 e9       	ldi	r31, 0x90	; 144
     c30:	ef 16       	cp	r14, r31
     c32:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c34:	ff 06       	cpc	r15, r31
     c36:	21 f4       	brne	.+8      	; 0xc40 <usart_init_spi+0x12e>
     c38:	64 e0       	ldi	r22, 0x04	; 4
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	60 d2       	rcall	.+1216   	; 0x10fe <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c3e:	2a c1       	rjmp	.+596    	; 0xe94 <usart_init_spi+0x382>
     c40:	30 e9       	ldi	r19, 0x90	; 144
     c42:	e3 16       	cp	r14, r19
     c44:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c46:	f3 06       	cpc	r15, r19
     c48:	21 f4       	brne	.+8      	; 0xc52 <usart_init_spi+0x140>
     c4a:	64 e0       	ldi	r22, 0x04	; 4
     c4c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c4e:	57 d2       	rcall	.+1198   	; 0x10fe <sysclk_enable_module>
     c50:	21 c1       	rjmp	.+578    	; 0xe94 <usart_init_spi+0x382>
     c52:	80 e9       	ldi	r24, 0x90	; 144
     c54:	e8 16       	cp	r14, r24
     c56:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c58:	f8 06       	cpc	r15, r24
     c5a:	21 f4       	brne	.+8      	; 0xc64 <usart_init_spi+0x152>
     c5c:	64 e0       	ldi	r22, 0x04	; 4
     c5e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c60:	4e d2       	rcall	.+1180   	; 0x10fe <sysclk_enable_module>
     c62:	18 c1       	rjmp	.+560    	; 0xe94 <usart_init_spi+0x382>
     c64:	e0 e9       	ldi	r30, 0x90	; 144
     c66:	ee 16       	cp	r14, r30
     c68:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c6a:	fe 06       	cpc	r15, r30
     c6c:	21 f4       	brne	.+8      	; 0xc76 <usart_init_spi+0x164>
     c6e:	64 e0       	ldi	r22, 0x04	; 4
     c70:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c72:	45 d2       	rcall	.+1162   	; 0x10fe <sysclk_enable_module>
     c74:	0f c1       	rjmp	.+542    	; 0xe94 <usart_init_spi+0x382>
     c76:	f0 ec       	ldi	r31, 0xC0	; 192
     c78:	ef 16       	cp	r14, r31
     c7a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c7c:	ff 06       	cpc	r15, r31
     c7e:	21 f4       	brne	.+8      	; 0xc88 <usart_init_spi+0x176>
     c80:	68 e0       	ldi	r22, 0x08	; 8
     c82:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c84:	3c d2       	rcall	.+1144   	; 0x10fe <sysclk_enable_module>
     c86:	06 c1       	rjmp	.+524    	; 0xe94 <usart_init_spi+0x382>
     c88:	30 ec       	ldi	r19, 0xC0	; 192
     c8a:	e3 16       	cp	r14, r19
     c8c:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     c8e:	f3 06       	cpc	r15, r19
     c90:	21 f4       	brne	.+8      	; 0xc9a <usart_init_spi+0x188>
     c92:	68 e0       	ldi	r22, 0x08	; 8
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	33 d2       	rcall	.+1126   	; 0x10fe <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     c98:	fd c0       	rjmp	.+506    	; 0xe94 <usart_init_spi+0x382>
     c9a:	80 ea       	ldi	r24, 0xA0	; 160
     c9c:	e8 16       	cp	r14, r24
     c9e:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     ca0:	f8 06       	cpc	r15, r24
     ca2:	61 f4       	brne	.+24     	; 0xcbc <usart_init_spi+0x1aa>
     ca4:	60 e1       	ldi	r22, 0x10	; 16
     ca6:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     ca8:	2a d2       	rcall	.+1108   	; 0x10fe <sysclk_enable_module>
     caa:	e0 ea       	ldi	r30, 0xA0	; 160
     cac:	f8 e0       	ldi	r31, 0x08	; 8
     cae:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     cb0:	8f 7e       	andi	r24, 0xEF	; 239
     cb2:	84 83       	std	Z+4, r24	; 0x04
     cb4:	f8 01       	movw	r30, r16
     cb6:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     cb8:	22 50       	subi	r18, 0x02	; 2
     cba:	4c c0       	rjmp	.+152    	; 0xd54 <usart_init_spi+0x242>
     cbc:	f0 ea       	ldi	r31, 0xA0	; 160
     cbe:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     cc0:	f9 e0       	ldi	r31, 0x09	; 9
     cc2:	ff 06       	cpc	r15, r31
     cc4:	21 f4       	brne	.+8      	; 0xcce <usart_init_spi+0x1bc>
     cc6:	60 e1       	ldi	r22, 0x10	; 16
     cc8:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     cca:	19 d2       	rcall	.+1074   	; 0x10fe <sysclk_enable_module>
     ccc:	e3 c0       	rjmp	.+454    	; 0xe94 <usart_init_spi+0x382>
     cce:	30 ea       	ldi	r19, 0xA0	; 160
     cd0:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     cd2:	3a e0       	ldi	r19, 0x0A	; 10
     cd4:	f3 06       	cpc	r15, r19
     cd6:	21 f4       	brne	.+8      	; 0xce0 <usart_init_spi+0x1ce>
     cd8:	60 e1       	ldi	r22, 0x10	; 16
     cda:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     cdc:	10 d2       	rcall	.+1056   	; 0x10fe <sysclk_enable_module>
     cde:	da c0       	rjmp	.+436    	; 0xe94 <usart_init_spi+0x382>
     ce0:	80 ea       	ldi	r24, 0xA0	; 160
     ce2:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     ce4:	8b e0       	ldi	r24, 0x0B	; 11
     ce6:	f8 06       	cpc	r15, r24
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <usart_init_spi+0x1e0>
     cea:	60 e1       	ldi	r22, 0x10	; 16
     cec:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     cee:	07 d2       	rcall	.+1038   	; 0x10fe <sysclk_enable_module>
     cf0:	d1 c0       	rjmp	.+418    	; 0xe94 <usart_init_spi+0x382>
     cf2:	e0 eb       	ldi	r30, 0xB0	; 176
     cf4:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     cf6:	e8 e0       	ldi	r30, 0x08	; 8
     cf8:	fe 06       	cpc	r15, r30
     cfa:	21 f4       	brne	.+8      	; 0xd04 <usart_init_spi+0x1f2>
     cfc:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	fe d1       	rcall	.+1020   	; 0x10fe <sysclk_enable_module>
     d02:	c8 c0       	rjmp	.+400    	; 0xe94 <usart_init_spi+0x382>
     d04:	f0 eb       	ldi	r31, 0xB0	; 176
     d06:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     d08:	f9 e0       	ldi	r31, 0x09	; 9
     d0a:	ff 06       	cpc	r15, r31
     d0c:	21 f4       	brne	.+8      	; 0xd16 <usart_init_spi+0x204>
     d0e:	60 e2       	ldi	r22, 0x20	; 32
     d10:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     d12:	f5 d1       	rcall	.+1002   	; 0x10fe <sysclk_enable_module>
     d14:	bf c0       	rjmp	.+382    	; 0xe94 <usart_init_spi+0x382>
     d16:	30 e8       	ldi	r19, 0x80	; 128
     d18:	e3 16       	cp	r14, r19
     d1a:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     d1c:	f3 06       	cpc	r15, r19
     d1e:	21 f4       	brne	.+8      	; 0xd28 <usart_init_spi+0x216>
     d20:	60 e4       	ldi	r22, 0x40	; 64
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	ec d1       	rcall	.+984    	; 0x10fe <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     d26:	b6 c0       	rjmp	.+364    	; 0xe94 <usart_init_spi+0x382>
     d28:	80 ea       	ldi	r24, 0xA0	; 160
     d2a:	e8 16       	cp	r14, r24
     d2c:	84 e0       	ldi	r24, 0x04	; 4
     d2e:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     d30:	21 f4       	brne	.+8      	; 0xd3a <usart_init_spi+0x228>
     d32:	60 e4       	ldi	r22, 0x40	; 64
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	e3 d1       	rcall	.+966    	; 0x10fe <sysclk_enable_module>
     d38:	ad c0       	rjmp	.+346    	; 0xe94 <usart_init_spi+0x382>
     d3a:	f7 01       	movw	r30, r14
     d3c:	84 81       	ldd	r24, Z+4	; 0x04
     d3e:	8f 7e       	andi	r24, 0xEF	; 239
     d40:	84 83       	std	Z+4, r24	; 0x04
     d42:	fb 01       	movw	r30, r22
     d44:	24 81       	ldd	r18, Z+4	; 0x04
     d46:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     d48:	c7 01       	movw	r24, r14
     d4a:	f0 ea       	ldi	r31, 0xA0	; 160
     d4c:	ef 16       	cp	r14, r31
     d4e:	f8 e0       	ldi	r31, 0x08	; 8
     d50:	ff 06       	cpc	r15, r31
     d52:	49 f4       	brne	.+18     	; 0xd66 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     d54:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
     d58:	84 fd       	sbrc	r24, 4
     d5a:	a5 c0       	rjmp	.+330    	; 0xea6 <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     d5c:	0f 2e       	mov	r0, r31
     d5e:	f1 e1       	ldi	r31, 0x11	; 17
     d60:	df 2e       	mov	r13, r31
     d62:	f0 2d       	mov	r31, r0
     d64:	a4 c0       	rjmp	.+328    	; 0xeae <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     d66:	80 3b       	cpi	r24, 0xB0	; 176
     d68:	38 e0       	ldi	r19, 0x08	; 8
     d6a:	93 07       	cpc	r25, r19
     d6c:	91 f0       	breq	.+36     	; 0xd92 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     d6e:	80 3a       	cpi	r24, 0xA0	; 160
     d70:	e9 e0       	ldi	r30, 0x09	; 9
     d72:	9e 07       	cpc	r25, r30
     d74:	49 f4       	brne	.+18     	; 0xd88 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     d76:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
     d7a:	34 fd       	sbrc	r19, 4
     d7c:	9b c0       	rjmp	.+310    	; 0xeb4 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     d7e:	0f 2e       	mov	r0, r31
     d80:	f9 e1       	ldi	r31, 0x19	; 25
     d82:	df 2e       	mov	r13, r31
     d84:	f0 2d       	mov	r31, r0
     d86:	16 c0       	rjmp	.+44     	; 0xdb4 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     d88:	80 3b       	cpi	r24, 0xB0	; 176
     d8a:	f9 e0       	ldi	r31, 0x09	; 9
     d8c:	9f 07       	cpc	r25, r31
     d8e:	f1 f0       	breq	.+60     	; 0xdcc <usart_init_spi+0x2ba>
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     d92:	0f 2e       	mov	r0, r31
     d94:	f5 e1       	ldi	r31, 0x15	; 21
     d96:	df 2e       	mov	r13, r31
     d98:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     d9a:	80 3a       	cpi	r24, 0xA0	; 160
     d9c:	3a e0       	ldi	r19, 0x0A	; 10
     d9e:	93 07       	cpc	r25, r19
     da0:	49 f4       	brne	.+18     	; 0xdb4 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     da2:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
     da6:	84 fd       	sbrc	r24, 4
     da8:	8a c0       	rjmp	.+276    	; 0xebe <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     daa:	0f 2e       	mov	r0, r31
     dac:	f1 e2       	ldi	r31, 0x21	; 33
     dae:	df 2e       	mov	r13, r31
     db0:	f0 2d       	mov	r31, r0
     db2:	15 c0       	rjmp	.+42     	; 0xdde <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     db4:	80 3a       	cpi	r24, 0xA0	; 160
     db6:	9b 40       	sbci	r25, 0x0B	; 11
     db8:	91 f4       	brne	.+36     	; 0xdde <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     dba:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
     dbe:	84 fd       	sbrc	r24, 4
     dc0:	0a c0       	rjmp	.+20     	; 0xdd6 <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f9 e2       	ldi	r31, 0x29	; 41
     dc6:	df 2e       	mov	r13, r31
     dc8:	f0 2d       	mov	r31, r0
     dca:	09 c0       	rjmp	.+18     	; 0xdde <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     dcc:	0f 2e       	mov	r0, r31
     dce:	fd e1       	ldi	r31, 0x1D	; 29
     dd0:	df 2e       	mov	r13, r31
     dd2:	f0 2d       	mov	r31, r0
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
     dd6:	0f 2e       	mov	r0, r31
     dd8:	fd e2       	ldi	r31, 0x2D	; 45
     dda:	df 2e       	mov	r13, r31
     ddc:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     dde:	ed 2d       	mov	r30, r13
     de0:	e6 95       	lsr	r30
     de2:	e6 95       	lsr	r30
     de4:	e6 95       	lsr	r30
     de6:	30 e2       	ldi	r19, 0x20	; 32
     de8:	e3 9f       	mul	r30, r19
     dea:	f0 01       	movw	r30, r0
     dec:	11 24       	eor	r1, r1
     dee:	fa 5f       	subi	r31, 0xFA	; 250
     df0:	3d 2d       	mov	r19, r13
     df2:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	03 2e       	mov	r0, r19
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <usart_init_spi+0x2ee>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     e04:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
     e06:	22 30       	cpi	r18, 0x02	; 2
     e08:	10 f0       	brcs	.+4      	; 0xe0e <usart_init_spi+0x2fc>
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <usart_init_spi+0x2fe>
     e0e:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
     e10:	df 01       	movw	r26, r30
     e12:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
     e14:	a3 0f       	add	r26, r19
     e16:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e18:	9f b7       	in	r25, 0x3f	; 63
     e1a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e1c:	f8 94       	cli
	return flags;
     e1e:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
     e20:	2c 91       	ld	r18, X
     e22:	27 70       	andi	r18, 0x07	; 7
     e24:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
     e26:	9c 91       	ld	r25, X
     e28:	94 2b       	or	r25, r20
     e2a:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e2c:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e2e:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     e30:	f7 01       	movw	r30, r14
     e32:	85 81       	ldd	r24, Z+5	; 0x05
     e34:	80 6c       	ori	r24, 0xC0	; 192
     e36:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     e38:	f8 01       	movw	r30, r16
     e3a:	84 81       	ldd	r24, Z+4	; 0x04
     e3c:	8d 7f       	andi	r24, 0xFD	; 253
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	29 f4       	brne	.+10     	; 0xe4c <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
     e42:	f7 01       	movw	r30, r14
     e44:	85 81       	ldd	r24, Z+5	; 0x05
     e46:	82 60       	ori	r24, 0x02	; 2
     e48:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <usart_init_spi+0x342>
     e4c:	f7 01       	movw	r30, r14
     e4e:	85 81       	ldd	r24, Z+5	; 0x05
     e50:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
     e52:	85 83       	std	Z+5, r24	; 0x05
     e54:	f8 01       	movw	r30, r16
     e56:	85 81       	ldd	r24, Z+5	; 0x05
     e58:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
     e5a:	29 f0       	breq	.+10     	; 0xe66 <usart_init_spi+0x354>
     e5c:	f7 01       	movw	r30, r14
     e5e:	85 81       	ldd	r24, Z+5	; 0x05
     e60:	84 60       	ori	r24, 0x04	; 4
     e62:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <usart_init_spi+0x35c>
     e66:	f7 01       	movw	r30, r14
     e68:	85 81       	ldd	r24, Z+5	; 0x05
     e6a:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     e6c:	85 83       	std	Z+5, r24	; 0x05
     e6e:	f8 01       	movw	r30, r16
     e70:	40 81       	ld	r20, Z
     e72:	51 81       	ldd	r21, Z+1	; 0x01
     e74:	62 81       	ldd	r22, Z+2	; 0x02
     e76:	73 81       	ldd	r23, Z+3	; 0x03
     e78:	00 e8       	ldi	r16, 0x80	; 128
     e7a:	14 e8       	ldi	r17, 0x84	; 132
     e7c:	2e e1       	ldi	r18, 0x1E	; 30
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	c7 01       	movw	r24, r14
     e82:	16 de       	rcall	.-980    	; 0xab0 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     e84:	f7 01       	movw	r30, r14
     e86:	84 81       	ldd	r24, Z+4	; 0x04
     e88:	88 60       	ori	r24, 0x08	; 8
     e8a:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     e8c:	84 81       	ldd	r24, Z+4	; 0x04
     e8e:	80 61       	ori	r24, 0x10	; 16
     e90:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     e92:	1a c0       	rjmp	.+52     	; 0xec8 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     e94:	f7 01       	movw	r30, r14
     e96:	84 81       	ldd	r24, Z+4	; 0x04
     e98:	8f 7e       	andi	r24, 0xEF	; 239
     e9a:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     e9c:	f8 01       	movw	r30, r16
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     ea2:	c7 01       	movw	r24, r14
     ea4:	60 cf       	rjmp	.-320    	; 0xd66 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     ea6:	0f 2e       	mov	r0, r31
     ea8:	f5 e1       	ldi	r31, 0x15	; 21
     eaa:	df 2e       	mov	r13, r31
     eac:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     eae:	80 ea       	ldi	r24, 0xA0	; 160
     eb0:	98 e0       	ldi	r25, 0x08	; 8
     eb2:	6a cf       	rjmp	.-300    	; 0xd88 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     eb4:	0f 2e       	mov	r0, r31
     eb6:	fd e1       	ldi	r31, 0x1D	; 29
     eb8:	df 2e       	mov	r13, r31
     eba:	f0 2d       	mov	r31, r0
     ebc:	7b cf       	rjmp	.-266    	; 0xdb4 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
     ebe:	0f 2e       	mov	r0, r31
     ec0:	f5 e2       	ldi	r31, 0x25	; 37
     ec2:	df 2e       	mov	r13, r31
     ec4:	f0 2d       	mov	r31, r0
     ec6:	8b cf       	rjmp	.-234    	; 0xdde <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     ec8:	0f 90       	pop	r0
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	08 95       	ret

00000eda <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     eda:	80 3a       	cpi	r24, 0xA0	; 160
     edc:	28 e0       	ldi	r18, 0x08	; 8
     ede:	92 07       	cpc	r25, r18
     ee0:	21 f4       	brne	.+8      	; 0xeea <usart_spi_init+0x10>
     ee2:	60 e1       	ldi	r22, 0x10	; 16
     ee4:	83 e0       	ldi	r24, 0x03	; 3
     ee6:	0b c1       	rjmp	.+534    	; 0x10fe <sysclk_enable_module>
     ee8:	08 95       	ret
     eea:	80 3b       	cpi	r24, 0xB0	; 176
     eec:	28 e0       	ldi	r18, 0x08	; 8
     eee:	92 07       	cpc	r25, r18
     ef0:	21 f4       	brne	.+8      	; 0xefa <usart_spi_init+0x20>
     ef2:	60 e2       	ldi	r22, 0x20	; 32
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	03 c1       	rjmp	.+518    	; 0x10fe <sysclk_enable_module>
     ef8:	08 95       	ret
     efa:	80 3a       	cpi	r24, 0xA0	; 160
     efc:	29 e0       	ldi	r18, 0x09	; 9
     efe:	92 07       	cpc	r25, r18
     f00:	21 f4       	brne	.+8      	; 0xf0a <usart_spi_init+0x30>
     f02:	60 e1       	ldi	r22, 0x10	; 16
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	fb c0       	rjmp	.+502    	; 0x10fe <sysclk_enable_module>
     f08:	08 95       	ret
     f0a:	80 3b       	cpi	r24, 0xB0	; 176
     f0c:	29 e0       	ldi	r18, 0x09	; 9
     f0e:	92 07       	cpc	r25, r18
     f10:	21 f4       	brne	.+8      	; 0xf1a <usart_spi_init+0x40>
     f12:	60 e2       	ldi	r22, 0x20	; 32
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	f3 c0       	rjmp	.+486    	; 0x10fe <sysclk_enable_module>
     f18:	08 95       	ret
     f1a:	80 3a       	cpi	r24, 0xA0	; 160
     f1c:	2a e0       	ldi	r18, 0x0A	; 10
     f1e:	92 07       	cpc	r25, r18
     f20:	21 f4       	brne	.+8      	; 0xf2a <usart_spi_init+0x50>
     f22:	60 e1       	ldi	r22, 0x10	; 16
     f24:	85 e0       	ldi	r24, 0x05	; 5
     f26:	eb c0       	rjmp	.+470    	; 0x10fe <sysclk_enable_module>
     f28:	08 95       	ret
     f2a:	80 3a       	cpi	r24, 0xA0	; 160
     f2c:	9b 40       	sbci	r25, 0x0B	; 11
     f2e:	19 f4       	brne	.+6      	; 0xf36 <usart_spi_init+0x5c>
     f30:	60 e1       	ldi	r22, 0x10	; 16
     f32:	86 e0       	ldi	r24, 0x06	; 6
     f34:	e4 c0       	rjmp	.+456    	; 0x10fe <sysclk_enable_module>
     f36:	08 95       	ret

00000f38 <usart_spi_setup_device>:
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	00 d0       	rcall	.+0      	; 0xf42 <usart_spi_setup_device+0xa>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <usart_spi_setup_device+0xc>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	09 83       	std	Y+1, r16	; 0x01
     f4a:	1a 83       	std	Y+2, r17	; 0x02
     f4c:	2b 83       	std	Y+3, r18	; 0x03
     f4e:	3c 83       	std	Y+4, r19	; 0x04
     f50:	4d 83       	std	Y+5, r20	; 0x05
     f52:	1e 82       	std	Y+6, r1	; 0x06
     f54:	be 01       	movw	r22, r28
     f56:	6f 5f       	subi	r22, 0xFF	; 255
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	db dd       	rcall	.-1098   	; 0xb12 <usart_init_spi>
     f5c:	26 96       	adiw	r28, 0x06	; 6
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	08 95       	ret

00000f6c <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     f6c:	fb 01       	movw	r30, r22
     f6e:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     f70:	e8 2f       	mov	r30, r24
     f72:	e6 95       	lsr	r30
     f74:	e6 95       	lsr	r30
     f76:	e6 95       	lsr	r30
     f78:	40 e2       	ldi	r20, 0x20	; 32
     f7a:	e4 9f       	mul	r30, r20
     f7c:	f0 01       	movw	r30, r0
     f7e:	11 24       	eor	r1, r1
     f80:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     f82:	87 70       	andi	r24, 0x07	; 7
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <usart_spi_select_device+0x24>
     f8c:	44 0f       	add	r20, r20
     f8e:	55 1f       	adc	r21, r21
     f90:	8a 95       	dec	r24
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     f94:	46 83       	std	Z+6, r20	; 0x06
     f96:	08 95       	ret

00000f98 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     f98:	fb 01       	movw	r30, r22
     f9a:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     f9c:	e8 2f       	mov	r30, r24
     f9e:	e6 95       	lsr	r30
     fa0:	e6 95       	lsr	r30
     fa2:	e6 95       	lsr	r30
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	e4 9f       	mul	r30, r20
     fa8:	f0 01       	movw	r30, r0
     faa:	11 24       	eor	r1, r1
     fac:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     fae:	87 70       	andi	r24, 0x07	; 7
     fb0:	21 e0       	ldi	r18, 0x01	; 1
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	a9 01       	movw	r20, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <usart_spi_deselect_device+0x24>
     fb8:	44 0f       	add	r20, r20
     fba:	55 1f       	adc	r21, r21
     fbc:	8a 95       	dec	r24
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     fc0:	45 83       	std	Z+5, r20	; 0x05
     fc2:	08 95       	ret

00000fc4 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     fc4:	80 93 2a 22 	sts	0x222A, r24	; 0x80222a <fbpointer>
     fc8:	90 93 2b 22 	sts	0x222B, r25	; 0x80222b <fbpointer+0x1>
     fcc:	08 95       	ret

00000fce <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     fce:	20 91 2a 22 	lds	r18, 0x222A	; 0x80222a <fbpointer>
     fd2:	30 91 2b 22 	lds	r19, 0x222B	; 0x80222b <fbpointer+0x1>
     fd6:	90 e8       	ldi	r25, 0x80	; 128
     fd8:	89 9f       	mul	r24, r25
     fda:	20 0d       	add	r18, r0
     fdc:	31 1d       	adc	r19, r1
     fde:	11 24       	eor	r1, r1
     fe0:	f9 01       	movw	r30, r18
     fe2:	e6 0f       	add	r30, r22
     fe4:	f1 1d       	adc	r31, r1
     fe6:	40 83       	st	Z, r20
     fe8:	08 95       	ret

00000fea <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     fea:	20 91 2a 22 	lds	r18, 0x222A	; 0x80222a <fbpointer>
     fee:	30 91 2b 22 	lds	r19, 0x222B	; 0x80222b <fbpointer+0x1>
     ff2:	90 e8       	ldi	r25, 0x80	; 128
     ff4:	89 9f       	mul	r24, r25
     ff6:	20 0d       	add	r18, r0
     ff8:	31 1d       	adc	r19, r1
     ffa:	11 24       	eor	r1, r1
     ffc:	f9 01       	movw	r30, r18
     ffe:	e6 0f       	add	r30, r22
    1000:	f1 1d       	adc	r31, r1
}
    1002:	80 81       	ld	r24, Z
    1004:	08 95       	ret

00001006 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	e4 2f       	mov	r30, r20
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	e8 0f       	add	r30, r24
    1016:	f1 1d       	adc	r31, r1
    1018:	e1 38       	cpi	r30, 0x81	; 129
    101a:	f1 05       	cpc	r31, r1
    101c:	1c f0       	brlt	.+6      	; 0x1024 <gfx_mono_generic_draw_horizontal_line+0x1e>
    101e:	c0 e8       	ldi	r28, 0x80	; 128
    1020:	4c 2f       	mov	r20, r28
    1022:	48 1b       	sub	r20, r24
    1024:	44 23       	and	r20, r20
    1026:	09 f4       	brne	.+2      	; 0x102a <gfx_mono_generic_draw_horizontal_line+0x24>
    1028:	4a c0       	rjmp	.+148    	; 0x10be <gfx_mono_generic_draw_horizontal_line+0xb8>
    102a:	d6 2f       	mov	r29, r22
    102c:	d6 95       	lsr	r29
    102e:	d6 95       	lsr	r29
    1030:	d6 95       	lsr	r29
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	98 e0       	ldi	r25, 0x08	; 8
    1036:	d9 9f       	mul	r29, r25
    1038:	60 19       	sub	r22, r0
    103a:	71 09       	sbc	r23, r1
    103c:	11 24       	eor	r1, r1
    103e:	e1 e0       	ldi	r30, 0x01	; 1
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	df 01       	movw	r26, r30
    1044:	02 c0       	rjmp	.+4      	; 0x104a <gfx_mono_generic_draw_horizontal_line+0x44>
    1046:	aa 0f       	add	r26, r26
    1048:	bb 1f       	adc	r27, r27
    104a:	6a 95       	dec	r22
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <gfx_mono_generic_draw_horizontal_line+0x40>
    104e:	fa 2e       	mov	r15, r26
    1050:	21 30       	cpi	r18, 0x01	; 1
    1052:	21 f0       	breq	.+8      	; 0x105c <gfx_mono_generic_draw_horizontal_line+0x56>
    1054:	98 f0       	brcs	.+38     	; 0x107c <gfx_mono_generic_draw_horizontal_line+0x76>
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	19 f1       	breq	.+70     	; 0x10a0 <gfx_mono_generic_draw_horizontal_line+0x9a>
    105a:	31 c0       	rjmp	.+98     	; 0x10be <gfx_mono_generic_draw_horizontal_line+0xb8>
    105c:	c4 2f       	mov	r28, r20
    105e:	1f ef       	ldi	r17, 0xFF	; 255
    1060:	18 0f       	add	r17, r24
    1062:	01 2f       	mov	r16, r17
    1064:	0c 0f       	add	r16, r28
    1066:	60 2f       	mov	r22, r16
    1068:	8d 2f       	mov	r24, r29
    106a:	20 dd       	rcall	.-1472   	; 0xaac <gfx_mono_st7565r_get_byte>
    106c:	4f 2d       	mov	r20, r15
    106e:	48 2b       	or	r20, r24
    1070:	60 2f       	mov	r22, r16
    1072:	8d 2f       	mov	r24, r29
    1074:	fc db       	rcall	.-2056   	; 0x86e <gfx_mono_st7565r_put_byte>
    1076:	c1 50       	subi	r28, 0x01	; 1
    1078:	a1 f7       	brne	.-24     	; 0x1062 <gfx_mono_generic_draw_horizontal_line+0x5c>
    107a:	21 c0       	rjmp	.+66     	; 0x10be <gfx_mono_generic_draw_horizontal_line+0xb8>
    107c:	c4 2f       	mov	r28, r20
    107e:	1f ef       	ldi	r17, 0xFF	; 255
    1080:	18 0f       	add	r17, r24
    1082:	fa 2e       	mov	r15, r26
    1084:	f0 94       	com	r15
    1086:	01 2f       	mov	r16, r17
    1088:	0c 0f       	add	r16, r28
    108a:	60 2f       	mov	r22, r16
    108c:	8d 2f       	mov	r24, r29
    108e:	0e dd       	rcall	.-1508   	; 0xaac <gfx_mono_st7565r_get_byte>
    1090:	4f 2d       	mov	r20, r15
    1092:	48 23       	and	r20, r24
    1094:	60 2f       	mov	r22, r16
    1096:	8d 2f       	mov	r24, r29
    1098:	ea db       	rcall	.-2092   	; 0x86e <gfx_mono_st7565r_put_byte>
    109a:	c1 50       	subi	r28, 0x01	; 1
    109c:	a1 f7       	brne	.-24     	; 0x1086 <gfx_mono_generic_draw_horizontal_line+0x80>
    109e:	0f c0       	rjmp	.+30     	; 0x10be <gfx_mono_generic_draw_horizontal_line+0xb8>
    10a0:	c4 2f       	mov	r28, r20
    10a2:	1f ef       	ldi	r17, 0xFF	; 255
    10a4:	18 0f       	add	r17, r24
    10a6:	01 2f       	mov	r16, r17
    10a8:	0c 0f       	add	r16, r28
    10aa:	60 2f       	mov	r22, r16
    10ac:	8d 2f       	mov	r24, r29
    10ae:	fe dc       	rcall	.-1540   	; 0xaac <gfx_mono_st7565r_get_byte>
    10b0:	4f 2d       	mov	r20, r15
    10b2:	48 27       	eor	r20, r24
    10b4:	60 2f       	mov	r22, r16
    10b6:	8d 2f       	mov	r24, r29
    10b8:	da db       	rcall	.-2124   	; 0x86e <gfx_mono_st7565r_put_byte>
    10ba:	c1 50       	subi	r28, 0x01	; 1
    10bc:	a1 f7       	brne	.-24     	; 0x10a6 <gfx_mono_generic_draw_horizontal_line+0xa0>
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	08 95       	ret

000010ca <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
	if (height == 0) {
    10d4:	22 23       	and	r18, r18
    10d6:	69 f0       	breq	.+26     	; 0x10f2 <gfx_mono_generic_draw_filled_rect+0x28>
    10d8:	f4 2e       	mov	r15, r20
    10da:	18 2f       	mov	r17, r24
    10dc:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    10de:	df ef       	ldi	r29, 0xFF	; 255
    10e0:	d6 0f       	add	r29, r22
    10e2:	6d 2f       	mov	r22, r29
    10e4:	6c 0f       	add	r22, r28
    10e6:	20 2f       	mov	r18, r16
    10e8:	4f 2d       	mov	r20, r15
    10ea:	81 2f       	mov	r24, r17
    10ec:	8c df       	rcall	.-232    	; 0x1006 <gfx_mono_generic_draw_horizontal_line>
    10ee:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    10f0:	c1 f7       	brne	.-16     	; 0x10e2 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	08 95       	ret

000010fe <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	1f 92       	push	r1
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1108:	9f b7       	in	r25, 0x3f	; 63
    110a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    110c:	f8 94       	cli
	return flags;
    110e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1110:	e8 2f       	mov	r30, r24
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	e0 59       	subi	r30, 0x90	; 144
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	60 95       	com	r22
    111a:	80 81       	ld	r24, Z
    111c:	68 23       	and	r22, r24
    111e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1120:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1122:	0f 90       	pop	r0
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    112a:	af 92       	push	r10
    112c:	bf 92       	push	r11
    112e:	cf 92       	push	r12
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	c8 2f       	mov	r28, r24
    1140:	e6 2e       	mov	r14, r22
    1142:	b4 2e       	mov	r11, r20
    1144:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1146:	00 e0       	ldi	r16, 0x00	; 0
    1148:	f9 01       	movw	r30, r18
    114a:	24 81       	ldd	r18, Z+4	; 0x04
    114c:	43 81       	ldd	r20, Z+3	; 0x03
    114e:	6b 2d       	mov	r22, r11
    1150:	8e 2d       	mov	r24, r14
    1152:	bb df       	rcall	.-138    	; 0x10ca <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1154:	f6 01       	movw	r30, r12
    1156:	80 81       	ld	r24, Z
    1158:	81 11       	cpse	r24, r1
    115a:	39 c0       	rjmp	.+114    	; 0x11ce <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    115c:	83 81       	ldd	r24, Z+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	26 95       	lsr	r18
    1162:	26 95       	lsr	r18
    1164:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1166:	87 70       	andi	r24, 0x07	; 7
    1168:	09 f0       	breq	.+2      	; 0x116c <gfx_mono_draw_char+0x42>
		char_row_size++;
    116a:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    116c:	f6 01       	movw	r30, r12
    116e:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1170:	8c 2f       	mov	r24, r28
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	35 81       	ldd	r19, Z+5	; 0x05
    1176:	83 1b       	sub	r24, r19
    1178:	91 09       	sbc	r25, r1
    117a:	2a 9d       	mul	r18, r10
    117c:	90 01       	movw	r18, r0
    117e:	11 24       	eor	r1, r1
    1180:	82 9f       	mul	r24, r18
    1182:	a0 01       	movw	r20, r0
    1184:	83 9f       	mul	r24, r19
    1186:	50 0d       	add	r21, r0
    1188:	92 9f       	mul	r25, r18
    118a:	50 0d       	add	r21, r0
    118c:	11 24       	eor	r1, r1
    118e:	01 81       	ldd	r16, Z+1	; 0x01
    1190:	12 81       	ldd	r17, Z+2	; 0x02
    1192:	04 0f       	add	r16, r20
    1194:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1196:	f6 01       	movw	r30, r12
    1198:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    119a:	ff 20       	and	r15, r15
    119c:	a1 f0       	breq	.+40     	; 0x11c6 <gfx_mono_draw_char+0x9c>
    119e:	d0 e0       	ldi	r29, 0x00	; 0
    11a0:	c0 e0       	ldi	r28, 0x00	; 0
    11a2:	8e 2d       	mov	r24, r14
    11a4:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    11a6:	9c 2f       	mov	r25, r28
    11a8:	97 70       	andi	r25, 0x07	; 7
    11aa:	21 f4       	brne	.+8      	; 0x11b4 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    11ac:	f8 01       	movw	r30, r16
    11ae:	d4 91       	lpm	r29, Z
				glyph_data++;
    11b0:	0f 5f       	subi	r16, 0xFF	; 255
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    11b4:	dd 23       	and	r29, r29
    11b6:	1c f4       	brge	.+6      	; 0x11be <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    11b8:	41 e0       	ldi	r20, 0x01	; 1
    11ba:	6b 2d       	mov	r22, r11
    11bc:	41 dc       	rcall	.-1918   	; 0xa40 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    11be:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    11c0:	cf 5f       	subi	r28, 0xFF	; 255
    11c2:	fc 12       	cpse	r15, r28
    11c4:	ee cf       	rjmp	.-36     	; 0x11a2 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    11c6:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    11c8:	aa 94       	dec	r10
	} while (rows_left > 0);
    11ca:	a1 10       	cpse	r10, r1
    11cc:	e4 cf       	rjmp	.-56     	; 0x1196 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	bf 90       	pop	r11
    11e0:	af 90       	pop	r10
    11e2:	08 95       	ret

000011e4 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	d6 2e       	mov	r13, r22
    11f4:	04 2f       	mov	r16, r20
    11f6:	79 01       	movw	r14, r18
    11f8:	ec 01       	movw	r28, r24
    11fa:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    11fc:	89 91       	ld	r24, Y+
    11fe:	8a 30       	cpi	r24, 0x0A	; 10
    1200:	31 f4       	brne	.+12     	; 0x120e <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    1202:	f7 01       	movw	r30, r14
    1204:	84 81       	ldd	r24, Z+4	; 0x04
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    120a:	1d 2d       	mov	r17, r13
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    120e:	8d 30       	cpi	r24, 0x0D	; 13
    1210:	39 f0       	breq	.+14     	; 0x1220 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1212:	97 01       	movw	r18, r14
    1214:	40 2f       	mov	r20, r16
    1216:	61 2f       	mov	r22, r17
    1218:	88 df       	rcall	.-240    	; 0x112a <gfx_mono_draw_char>
			x += font->width;
    121a:	f7 01       	movw	r30, r14
    121c:	83 81       	ldd	r24, Z+3	; 0x03
    121e:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1220:	88 81       	ld	r24, Y
    1222:	81 11       	cpse	r24, r1
    1224:	eb cf       	rjmp	.-42     	; 0x11fc <gfx_mono_draw_string+0x18>
}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	08 95       	ret

00001236 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1240:	c6 2f       	mov	r28, r22
    1242:	d0 e0       	ldi	r29, 0x00	; 0
    1244:	de 01       	movw	r26, r28
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <ioport_configure_port_pin+0x18>
    124a:	b5 95       	asr	r27
    124c:	a7 95       	ror	r26
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <ioport_configure_port_pin+0x14>
    1252:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1254:	50 8b       	std	Z+16, r21	; 0x10
    1256:	2f 5f       	subi	r18, 0xFF	; 255
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    125c:	28 30       	cpi	r18, 0x08	; 8
    125e:	31 05       	cpc	r19, r1
    1260:	89 f7       	brne	.-30     	; 0x1244 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1262:	40 ff       	sbrs	r20, 0
    1264:	0a c0       	rjmp	.+20     	; 0x127a <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1266:	41 ff       	sbrs	r20, 1
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    126a:	fc 01       	movw	r30, r24
    126c:	65 83       	std	Z+5, r22	; 0x05
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1270:	fc 01       	movw	r30, r24
    1272:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1274:	fc 01       	movw	r30, r24
    1276:	61 83       	std	Z+1, r22	; 0x01
    1278:	02 c0       	rjmp	.+4      	; 0x127e <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    127a:	fc 01       	movw	r30, r24
    127c:	62 83       	std	Z+2, r22	; 0x02
	}
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1284:	43 e0       	ldi	r20, 0x03	; 3
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	80 ee       	ldi	r24, 0xE0	; 224
    128c:	97 e0       	ldi	r25, 0x07	; 7
    128e:	d3 df       	rcall	.-90     	; 0x1236 <ioport_configure_port_pin>
    1290:	43 e0       	ldi	r20, 0x03	; 3
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	62 e0       	ldi	r22, 0x02	; 2
    1296:	80 ee       	ldi	r24, 0xE0	; 224
    1298:	97 e0       	ldi	r25, 0x07	; 7
    129a:	cd df       	rcall	.-102    	; 0x1236 <ioport_configure_port_pin>
    129c:	43 e0       	ldi	r20, 0x03	; 3
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	60 e1       	ldi	r22, 0x10	; 16
    12a2:	80 e6       	ldi	r24, 0x60	; 96
    12a4:	96 e0       	ldi	r25, 0x06	; 6
    12a6:	c7 df       	rcall	.-114    	; 0x1236 <ioport_configure_port_pin>
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	50 e4       	ldi	r21, 0x40	; 64
    12ac:	60 e2       	ldi	r22, 0x20	; 32
    12ae:	80 e6       	ldi	r24, 0x60	; 96
    12b0:	96 e0       	ldi	r25, 0x06	; 6
    12b2:	c1 df       	rcall	.-126    	; 0x1236 <ioport_configure_port_pin>
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	5b e1       	ldi	r21, 0x1B	; 27
    12b8:	60 e2       	ldi	r22, 0x20	; 32
    12ba:	80 e8       	ldi	r24, 0x80	; 128
    12bc:	96 e0       	ldi	r25, 0x06	; 6
    12be:	bb df       	rcall	.-138    	; 0x1236 <ioport_configure_port_pin>
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	5b e1       	ldi	r21, 0x1B	; 27
    12c4:	62 e0       	ldi	r22, 0x02	; 2
    12c6:	80 ea       	ldi	r24, 0xA0	; 160
    12c8:	96 e0       	ldi	r25, 0x06	; 6
    12ca:	b5 df       	rcall	.-150    	; 0x1236 <ioport_configure_port_pin>
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	5b e1       	ldi	r21, 0x1B	; 27
    12d0:	64 e0       	ldi	r22, 0x04	; 4
    12d2:	80 ea       	ldi	r24, 0xA0	; 160
    12d4:	96 e0       	ldi	r25, 0x06	; 6
    12d6:	af df       	rcall	.-162    	; 0x1236 <ioport_configure_port_pin>
    12d8:	43 e0       	ldi	r20, 0x03	; 3
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	62 e0       	ldi	r22, 0x02	; 2
    12de:	80 e6       	ldi	r24, 0x60	; 96
    12e0:	96 e0       	ldi	r25, 0x06	; 6
    12e2:	a9 df       	rcall	.-174    	; 0x1236 <ioport_configure_port_pin>
    12e4:	43 e0       	ldi	r20, 0x03	; 3
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	68 e0       	ldi	r22, 0x08	; 8
    12ea:	80 e6       	ldi	r24, 0x60	; 96
    12ec:	96 e0       	ldi	r25, 0x06	; 6
    12ee:	a3 df       	rcall	.-186    	; 0x1236 <ioport_configure_port_pin>
    12f0:	43 e0       	ldi	r20, 0x03	; 3
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	68 e0       	ldi	r22, 0x08	; 8
    12f6:	80 ea       	ldi	r24, 0xA0	; 160
    12f8:	96 e0       	ldi	r25, 0x06	; 6
    12fa:	9d df       	rcall	.-198    	; 0x1236 <ioport_configure_port_pin>
    12fc:	43 e0       	ldi	r20, 0x03	; 3
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	80 e6       	ldi	r24, 0x60	; 96
    1304:	96 e0       	ldi	r25, 0x06	; 6
    1306:	97 df       	rcall	.-210    	; 0x1236 <ioport_configure_port_pin>
    1308:	43 e0       	ldi	r20, 0x03	; 3
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	68 e0       	ldi	r22, 0x08	; 8
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	96 e0       	ldi	r25, 0x06	; 6
    1312:	91 df       	rcall	.-222    	; 0x1236 <ioport_configure_port_pin>
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	60 e1       	ldi	r22, 0x10	; 16
    131a:	80 e8       	ldi	r24, 0x80	; 128
    131c:	96 e0       	ldi	r25, 0x06	; 6
    131e:	8b df       	rcall	.-234    	; 0x1236 <ioport_configure_port_pin>
    1320:	43 e0       	ldi	r20, 0x03	; 3
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	62 e0       	ldi	r22, 0x02	; 2
    1326:	80 e6       	ldi	r24, 0x60	; 96
    1328:	96 e0       	ldi	r25, 0x06	; 6
    132a:	85 df       	rcall	.-246    	; 0x1236 <ioport_configure_port_pin>
    132c:	43 e0       	ldi	r20, 0x03	; 3
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	68 e0       	ldi	r22, 0x08	; 8
    1332:	80 e6       	ldi	r24, 0x60	; 96
    1334:	96 e0       	ldi	r25, 0x06	; 6
    1336:	7f df       	rcall	.-258    	; 0x1236 <ioport_configure_port_pin>
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	64 e0       	ldi	r22, 0x04	; 4
    133e:	80 e6       	ldi	r24, 0x60	; 96
    1340:	96 e0       	ldi	r25, 0x06	; 6
    1342:	79 df       	rcall	.-270    	; 0x1236 <ioport_configure_port_pin>
    1344:	43 e0       	ldi	r20, 0x03	; 3
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	60 e1       	ldi	r22, 0x10	; 16
    134a:	80 ea       	ldi	r24, 0xA0	; 160
    134c:	96 e0       	ldi	r25, 0x06	; 6
    134e:	73 df       	rcall	.-282    	; 0x1236 <ioport_configure_port_pin>
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	61 e0       	ldi	r22, 0x01	; 1
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	96 e0       	ldi	r25, 0x06	; 6
    135a:	6d df       	rcall	.-294    	; 0x1236 <ioport_configure_port_pin>
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	64 e0       	ldi	r22, 0x04	; 4
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	96 e0       	ldi	r25, 0x06	; 6
    1366:	67 df       	rcall	.-306    	; 0x1236 <ioport_configure_port_pin>
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	62 e0       	ldi	r22, 0x02	; 2
    136e:	80 e2       	ldi	r24, 0x20	; 32
    1370:	96 e0       	ldi	r25, 0x06	; 6
    1372:	61 df       	rcall	.-318    	; 0x1236 <ioport_configure_port_pin>
    1374:	43 e0       	ldi	r20, 0x03	; 3
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	68 e0       	ldi	r22, 0x08	; 8
    137a:	80 e4       	ldi	r24, 0x40	; 64
    137c:	96 e0       	ldi	r25, 0x06	; 6
    137e:	5b df       	rcall	.-330    	; 0x1236 <ioport_configure_port_pin>
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	64 e0       	ldi	r22, 0x04	; 4
    1386:	80 e4       	ldi	r24, 0x40	; 64
    1388:	96 e0       	ldi	r25, 0x06	; 6
    138a:	55 df       	rcall	.-342    	; 0x1236 <ioport_configure_port_pin>
    138c:	43 e0       	ldi	r20, 0x03	; 3
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	68 e0       	ldi	r22, 0x08	; 8
    1392:	80 e6       	ldi	r24, 0x60	; 96
    1394:	96 e0       	ldi	r25, 0x06	; 6
    1396:	4f df       	rcall	.-354    	; 0x1236 <ioport_configure_port_pin>
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	64 e0       	ldi	r22, 0x04	; 4
    139e:	80 e6       	ldi	r24, 0x60	; 96
    13a0:	96 e0       	ldi	r25, 0x06	; 6
    13a2:	49 df       	rcall	.-366    	; 0x1236 <ioport_configure_port_pin>
    13a4:	43 e0       	ldi	r20, 0x03	; 3
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	68 e0       	ldi	r22, 0x08	; 8
    13aa:	80 e8       	ldi	r24, 0x80	; 128
    13ac:	96 e0       	ldi	r25, 0x06	; 6
    13ae:	43 df       	rcall	.-378    	; 0x1236 <ioport_configure_port_pin>
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	64 e0       	ldi	r22, 0x04	; 4
    13b6:	80 e8       	ldi	r24, 0x80	; 128
    13b8:	96 e0       	ldi	r25, 0x06	; 6
    13ba:	3d cf       	rjmp	.-390    	; 0x1236 <ioport_configure_port_pin>
    13bc:	08 95       	ret

000013be <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    13c0:	61 50       	subi	r22, 0x01	; 1
    13c2:	71 09       	sbc	r23, r1
    13c4:	81 09       	sbc	r24, r1
    13c6:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    13c8:	61 15       	cp	r22, r1
    13ca:	71 05       	cpc	r23, r1
    13cc:	81 05       	cpc	r24, r1
    13ce:	91 05       	cpc	r25, r1
    13d0:	b9 f7       	brne	.-18     	; 0x13c0 <__portable_avr_delay_cycles+0x2>
    13d2:	08 95       	ret

000013d4 <PWM_Init>:
static char strbuf[128];

void PWM_Init(void)
{
	/* Set output */
	PORTC.DIR |= PIN0_bm;
    13d4:	e0 e4       	ldi	r30, 0x40	; 64
    13d6:	f6 e0       	ldi	r31, 0x06	; 6
    13d8:	80 81       	ld	r24, Z
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	80 83       	st	Z, r24

	/* Set Register */
	TCC0.CTRLA = PIN1_bm; //(PIN2_bm) | (PIN0_bm);
    13de:	e0 e0       	ldi	r30, 0x00	; 0
    13e0:	f8 e0       	ldi	r31, 0x08	; 8
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	80 83       	st	Z, r24
	TCC0.CTRLB = (PIN4_bm) | (PIN2_bm) | (PIN1_bm);
    13e6:	86 e1       	ldi	r24, 0x16	; 22
    13e8:	81 83       	std	Z+1, r24	; 0x01
	
	/* Set Period */
	TCC0.PER = 1000;
    13ea:	88 ee       	ldi	r24, 0xE8	; 232
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	86 a3       	std	Z+38, r24	; 0x26
    13f0:	97 a3       	std	Z+39, r25	; 0x27

	/* Set Compare Register value*/
	TCC0.CCA = 375;
    13f2:	87 e7       	ldi	r24, 0x77	; 119
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	80 a7       	std	Z+40, r24	; 0x28
    13f8:	91 a7       	std	Z+41, r25	; 0x29
    13fa:	08 95       	ret

000013fc <update_led_brightness>:
}

void update_led_brightness(uint8_t counter) {
	uint16_t duty_cycle = (counter * 1000) / 7;  // Convert counter (0-7) into duty cycle value (0-1000)
    13fc:	28 ee       	ldi	r18, 0xE8	; 232
    13fe:	33 e0       	ldi	r19, 0x03	; 3
    1400:	48 2f       	mov	r20, r24
    1402:	42 9f       	mul	r20, r18
    1404:	c0 01       	movw	r24, r0
    1406:	43 9f       	mul	r20, r19
    1408:	90 0d       	add	r25, r0
    140a:	11 24       	eor	r1, r1
    140c:	67 e0       	ldi	r22, 0x07	; 7
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	62 d0       	rcall	.+196    	; 0x14d6 <__divmodhi4>
	TCC0.CCA = duty_cycle;
    1412:	60 93 28 08 	sts	0x0828, r22	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1416:	70 93 29 08 	sts	0x0829, r23	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    141a:	08 95       	ret

0000141c <main>:
}

int main(void) {
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
    141c:	33 df       	rcall	.-410    	; 0x1284 <board_init>
	PWM_Init();
    141e:	da df       	rcall	.-76     	; 0x13d4 <PWM_Init>
	
	// Initialize the LCD
	gfx_mono_init();
    1420:	cd da       	rcall	.-2662   	; 0x9bc <gfx_mono_st7565r_init>
    1422:	80 e1       	ldi	r24, 0x10	; 16
    1424:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    1428:	20 e0       	ldi	r18, 0x00	; 0
	
	// Set the background LCD on
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);

	// Display the user's name on the first line of the LCD
	gfx_mono_draw_string("Raihan\nRaditya\nRafinal", 0, 0, &sysfont);
    142a:	30 e2       	ldi	r19, 0x20	; 32
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	87 e0       	ldi	r24, 0x07	; 7
    1432:	90 e2       	ldi	r25, 0x20	; 32
    1434:	d7 de       	rcall	.-594    	; 0x11e4 <gfx_mono_draw_string>
    1436:	d1 2c       	mov	r13, r1

	// Initialize counter
	uint8_t counter = 0;
    1438:	0f 2e       	mov	r0, r31

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    143a:	f0 ea       	ldi	r31, 0xA0	; 160
    143c:	ef 2e       	mov	r14, r31
    143e:	f6 e0       	ldi	r31, 0x06	; 6
    1440:	ff 2e       	mov	r15, r31
    1442:	f0 2d       	mov	r31, r0
    1444:	0e e1       	ldi	r16, 0x1E	; 30

		// Change LED brightness based on counter value
		update_led_brightness(counter);

		// Display the counter value on the second line of the LCD
		snprintf(strbuf, sizeof(strbuf), "Counter: %d", counter);
    1446:	10 e2       	ldi	r17, 0x20	; 32
    1448:	68 94       	set
    144a:	cc 24       	eor	r12, r12
    144c:	c7 f8       	bld	r12, 7
    144e:	cc e2       	ldi	r28, 0x2C	; 44
    1450:	d2 e2       	ldi	r29, 0x22	; 34
    1452:	f7 01       	movw	r30, r14
    1454:	80 85       	ldd	r24, Z+8	; 0x08
    1456:	81 fd       	sbrc	r24, 1
	// Initialize counter
	uint8_t counter = 0;

	while(1) {
		// Check if SW1 is pressed (increment)
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_1) == 0) {
    1458:	11 c0       	rjmp	.+34     	; 0x147c <main+0x60>
    145a:	8d 2d       	mov	r24, r13
			counter = (counter + 1) % 8;  // Increment and wrap around at 8
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	87 70       	andi	r24, 0x07	; 7
    1462:	90 78       	andi	r25, 0x80	; 128
    1464:	99 23       	and	r25, r25
    1466:	24 f4       	brge	.+8      	; 0x1470 <main+0x54>
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	88 6f       	ori	r24, 0xF8	; 248
    146c:	9f 6f       	ori	r25, 0xFF	; 255
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	d8 2e       	mov	r13, r24
    1472:	6b e6       	ldi	r22, 0x6B	; 107
			delay_ms(200);  // Debounce delay
    1474:	74 e0       	ldi	r23, 0x04	; 4
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a1 df       	rcall	.-190    	; 0x13be <__portable_avr_delay_cycles>
    147c:	f7 01       	movw	r30, r14
    147e:	80 85       	ldd	r24, Z+8	; 0x08
    1480:	82 fd       	sbrc	r24, 2
		}
		// Check if SW2 is pressed (decrement)
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_2) == 0) {
    1482:	0d c0       	rjmp	.+26     	; 0x149e <main+0x82>
    1484:	dd 20       	and	r13, r13
			counter = (counter == 0) ? 7 : counter - 1;  // Decrement and wrap around at 0
    1486:	11 f0       	breq	.+4      	; 0x148c <main+0x70>
    1488:	da 94       	dec	r13
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <main+0x78>
    148c:	0f 2e       	mov	r0, r31
    148e:	f7 e0       	ldi	r31, 0x07	; 7
    1490:	df 2e       	mov	r13, r31
    1492:	f0 2d       	mov	r31, r0
			delay_ms(200);  // Debounce delay
    1494:	6b e6       	ldi	r22, 0x6B	; 107
    1496:	74 e0       	ldi	r23, 0x04	; 4
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	90 df       	rcall	.-224    	; 0x13be <__portable_avr_delay_cycles>
		}

		// Change LED brightness based on counter value
		update_led_brightness(counter);
    149e:	8d 2d       	mov	r24, r13
    14a0:	ad df       	rcall	.-166    	; 0x13fc <update_led_brightness>
    14a2:	1f 92       	push	r1

		// Display the counter value on the second line of the LCD
		snprintf(strbuf, sizeof(strbuf), "Counter: %d", counter);
    14a4:	df 92       	push	r13
    14a6:	1f 93       	push	r17
    14a8:	0f 93       	push	r16
    14aa:	1f 92       	push	r1
    14ac:	cf 92       	push	r12
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	5a d0       	rcall	.+180    	; 0x1568 <snprintf>
		gfx_mono_draw_string(strbuf, 0, 24, &sysfont);
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e2       	ldi	r19, 0x20	; 32
    14b8:	48 e1       	ldi	r20, 0x18	; 24
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	ce 01       	movw	r24, r28
    14be:	92 de       	rcall	.-732    	; 0x11e4 <gfx_mono_draw_string>

		// Small delay to avoid bouncing effects
		delay_ms(50);
    14c0:	6b e1       	ldi	r22, 0x1B	; 27
    14c2:	71 e4       	ldi	r23, 0x41	; 65
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	7a df       	rcall	.-268    	; 0x13be <__portable_avr_delay_cycles>
    14ca:	ed b7       	in	r30, 0x3d	; 61
	}
    14cc:	fe b7       	in	r31, 0x3e	; 62
    14ce:	38 96       	adiw	r30, 0x08	; 8
    14d0:	ed bf       	out	0x3d, r30	; 61
    14d2:	fe bf       	out	0x3e, r31	; 62
    14d4:	be cf       	rjmp	.-132    	; 0x1452 <main+0x36>

000014d6 <__divmodhi4>:
    14d6:	97 fb       	bst	r25, 7
    14d8:	07 2e       	mov	r0, r23
    14da:	16 f4       	brtc	.+4      	; 0x14e0 <__divmodhi4+0xa>
    14dc:	00 94       	com	r0
    14de:	06 d0       	rcall	.+12     	; 0x14ec <__divmodhi4_neg1>
    14e0:	77 fd       	sbrc	r23, 7
    14e2:	08 d0       	rcall	.+16     	; 0x14f4 <__divmodhi4_neg2>
    14e4:	2d d0       	rcall	.+90     	; 0x1540 <__udivmodhi4>
    14e6:	07 fc       	sbrc	r0, 7
    14e8:	05 d0       	rcall	.+10     	; 0x14f4 <__divmodhi4_neg2>
    14ea:	3e f4       	brtc	.+14     	; 0x14fa <__divmodhi4_exit>

000014ec <__divmodhi4_neg1>:
    14ec:	90 95       	com	r25
    14ee:	81 95       	neg	r24
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	08 95       	ret

000014f4 <__divmodhi4_neg2>:
    14f4:	70 95       	com	r23
    14f6:	61 95       	neg	r22
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255

000014fa <__divmodhi4_exit>:
    14fa:	08 95       	ret

000014fc <__udivmodsi4>:
    14fc:	a1 e2       	ldi	r26, 0x21	; 33
    14fe:	1a 2e       	mov	r1, r26
    1500:	aa 1b       	sub	r26, r26
    1502:	bb 1b       	sub	r27, r27
    1504:	fd 01       	movw	r30, r26
    1506:	0d c0       	rjmp	.+26     	; 0x1522 <__udivmodsi4_ep>

00001508 <__udivmodsi4_loop>:
    1508:	aa 1f       	adc	r26, r26
    150a:	bb 1f       	adc	r27, r27
    150c:	ee 1f       	adc	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	a2 17       	cp	r26, r18
    1512:	b3 07       	cpc	r27, r19
    1514:	e4 07       	cpc	r30, r20
    1516:	f5 07       	cpc	r31, r21
    1518:	20 f0       	brcs	.+8      	; 0x1522 <__udivmodsi4_ep>
    151a:	a2 1b       	sub	r26, r18
    151c:	b3 0b       	sbc	r27, r19
    151e:	e4 0b       	sbc	r30, r20
    1520:	f5 0b       	sbc	r31, r21

00001522 <__udivmodsi4_ep>:
    1522:	66 1f       	adc	r22, r22
    1524:	77 1f       	adc	r23, r23
    1526:	88 1f       	adc	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	1a 94       	dec	r1
    152c:	69 f7       	brne	.-38     	; 0x1508 <__udivmodsi4_loop>
    152e:	60 95       	com	r22
    1530:	70 95       	com	r23
    1532:	80 95       	com	r24
    1534:	90 95       	com	r25
    1536:	9b 01       	movw	r18, r22
    1538:	ac 01       	movw	r20, r24
    153a:	bd 01       	movw	r22, r26
    153c:	cf 01       	movw	r24, r30
    153e:	08 95       	ret

00001540 <__udivmodhi4>:
    1540:	aa 1b       	sub	r26, r26
    1542:	bb 1b       	sub	r27, r27
    1544:	51 e1       	ldi	r21, 0x11	; 17
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <__udivmodhi4_ep>

00001548 <__udivmodhi4_loop>:
    1548:	aa 1f       	adc	r26, r26
    154a:	bb 1f       	adc	r27, r27
    154c:	a6 17       	cp	r26, r22
    154e:	b7 07       	cpc	r27, r23
    1550:	10 f0       	brcs	.+4      	; 0x1556 <__udivmodhi4_ep>
    1552:	a6 1b       	sub	r26, r22
    1554:	b7 0b       	sbc	r27, r23

00001556 <__udivmodhi4_ep>:
    1556:	88 1f       	adc	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	5a 95       	dec	r21
    155c:	a9 f7       	brne	.-22     	; 0x1548 <__udivmodhi4_loop>
    155e:	80 95       	com	r24
    1560:	90 95       	com	r25
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	08 95       	ret

00001568 <snprintf>:
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	2e 97       	sbiw	r28, 0x0e	; 14
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0e 89       	ldd	r16, Y+22	; 0x16
    157c:	1f 89       	ldd	r17, Y+23	; 0x17
    157e:	88 8d       	ldd	r24, Y+24	; 0x18
    1580:	99 8d       	ldd	r25, Y+25	; 0x19
    1582:	26 e0       	ldi	r18, 0x06	; 6
    1584:	2c 83       	std	Y+4, r18	; 0x04
    1586:	09 83       	std	Y+1, r16	; 0x01
    1588:	1a 83       	std	Y+2, r17	; 0x02
    158a:	97 ff       	sbrs	r25, 7
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <snprintf+0x2a>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e8       	ldi	r25, 0x80	; 128
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	8d 83       	std	Y+5, r24	; 0x05
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	ae 01       	movw	r20, r28
    159a:	44 5e       	subi	r20, 0xE4	; 228
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    15a0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    15a2:	ce 01       	movw	r24, r28
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	16 d0       	rcall	.+44     	; 0x15d4 <vfprintf>
    15a8:	4d 81       	ldd	r20, Y+5	; 0x05
    15aa:	5e 81       	ldd	r21, Y+6	; 0x06
    15ac:	57 fd       	sbrc	r21, 7
    15ae:	0a c0       	rjmp	.+20     	; 0x15c4 <snprintf+0x5c>
    15b0:	2f 81       	ldd	r18, Y+7	; 0x07
    15b2:	38 85       	ldd	r19, Y+8	; 0x08
    15b4:	42 17       	cp	r20, r18
    15b6:	53 07       	cpc	r21, r19
    15b8:	0c f4       	brge	.+2      	; 0x15bc <snprintf+0x54>
    15ba:	9a 01       	movw	r18, r20
    15bc:	f8 01       	movw	r30, r16
    15be:	e2 0f       	add	r30, r18
    15c0:	f3 1f       	adc	r31, r19
    15c2:	10 82       	st	Z, r1
    15c4:	2e 96       	adiw	r28, 0x0e	; 14
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <vfprintf>:
    15d4:	2f 92       	push	r2
    15d6:	3f 92       	push	r3
    15d8:	4f 92       	push	r4
    15da:	5f 92       	push	r5
    15dc:	6f 92       	push	r6
    15de:	7f 92       	push	r7
    15e0:	8f 92       	push	r8
    15e2:	9f 92       	push	r9
    15e4:	af 92       	push	r10
    15e6:	bf 92       	push	r11
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	2b 97       	sbiw	r28, 0x0b	; 11
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	6c 01       	movw	r12, r24
    1604:	7b 01       	movw	r14, r22
    1606:	8a 01       	movw	r16, r20
    1608:	fc 01       	movw	r30, r24
    160a:	16 82       	std	Z+6, r1	; 0x06
    160c:	17 82       	std	Z+7, r1	; 0x07
    160e:	83 81       	ldd	r24, Z+3	; 0x03
    1610:	81 ff       	sbrs	r24, 1
    1612:	bf c1       	rjmp	.+894    	; 0x1992 <vfprintf+0x3be>
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	3c 01       	movw	r6, r24
    161a:	f6 01       	movw	r30, r12
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	f7 01       	movw	r30, r14
    1620:	93 fd       	sbrc	r25, 3
    1622:	85 91       	lpm	r24, Z+
    1624:	93 ff       	sbrs	r25, 3
    1626:	81 91       	ld	r24, Z+
    1628:	7f 01       	movw	r14, r30
    162a:	88 23       	and	r24, r24
    162c:	09 f4       	brne	.+2      	; 0x1630 <vfprintf+0x5c>
    162e:	ad c1       	rjmp	.+858    	; 0x198a <vfprintf+0x3b6>
    1630:	85 32       	cpi	r24, 0x25	; 37
    1632:	39 f4       	brne	.+14     	; 0x1642 <vfprintf+0x6e>
    1634:	93 fd       	sbrc	r25, 3
    1636:	85 91       	lpm	r24, Z+
    1638:	93 ff       	sbrs	r25, 3
    163a:	81 91       	ld	r24, Z+
    163c:	7f 01       	movw	r14, r30
    163e:	85 32       	cpi	r24, 0x25	; 37
    1640:	21 f4       	brne	.+8      	; 0x164a <vfprintf+0x76>
    1642:	b6 01       	movw	r22, r12
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	d3 d1       	rcall	.+934    	; 0x19ee <fputc>
    1648:	e8 cf       	rjmp	.-48     	; 0x161a <vfprintf+0x46>
    164a:	91 2c       	mov	r9, r1
    164c:	21 2c       	mov	r2, r1
    164e:	31 2c       	mov	r3, r1
    1650:	ff e1       	ldi	r31, 0x1F	; 31
    1652:	f3 15       	cp	r31, r3
    1654:	d8 f0       	brcs	.+54     	; 0x168c <vfprintf+0xb8>
    1656:	8b 32       	cpi	r24, 0x2B	; 43
    1658:	79 f0       	breq	.+30     	; 0x1678 <vfprintf+0xa4>
    165a:	38 f4       	brcc	.+14     	; 0x166a <vfprintf+0x96>
    165c:	80 32       	cpi	r24, 0x20	; 32
    165e:	79 f0       	breq	.+30     	; 0x167e <vfprintf+0xaa>
    1660:	83 32       	cpi	r24, 0x23	; 35
    1662:	a1 f4       	brne	.+40     	; 0x168c <vfprintf+0xb8>
    1664:	23 2d       	mov	r18, r3
    1666:	20 61       	ori	r18, 0x10	; 16
    1668:	1d c0       	rjmp	.+58     	; 0x16a4 <vfprintf+0xd0>
    166a:	8d 32       	cpi	r24, 0x2D	; 45
    166c:	61 f0       	breq	.+24     	; 0x1686 <vfprintf+0xb2>
    166e:	80 33       	cpi	r24, 0x30	; 48
    1670:	69 f4       	brne	.+26     	; 0x168c <vfprintf+0xb8>
    1672:	23 2d       	mov	r18, r3
    1674:	21 60       	ori	r18, 0x01	; 1
    1676:	16 c0       	rjmp	.+44     	; 0x16a4 <vfprintf+0xd0>
    1678:	83 2d       	mov	r24, r3
    167a:	82 60       	ori	r24, 0x02	; 2
    167c:	38 2e       	mov	r3, r24
    167e:	e3 2d       	mov	r30, r3
    1680:	e4 60       	ori	r30, 0x04	; 4
    1682:	3e 2e       	mov	r3, r30
    1684:	2a c0       	rjmp	.+84     	; 0x16da <vfprintf+0x106>
    1686:	f3 2d       	mov	r31, r3
    1688:	f8 60       	ori	r31, 0x08	; 8
    168a:	1d c0       	rjmp	.+58     	; 0x16c6 <vfprintf+0xf2>
    168c:	37 fc       	sbrc	r3, 7
    168e:	2d c0       	rjmp	.+90     	; 0x16ea <vfprintf+0x116>
    1690:	20 ed       	ldi	r18, 0xD0	; 208
    1692:	28 0f       	add	r18, r24
    1694:	2a 30       	cpi	r18, 0x0A	; 10
    1696:	40 f0       	brcs	.+16     	; 0x16a8 <vfprintf+0xd4>
    1698:	8e 32       	cpi	r24, 0x2E	; 46
    169a:	b9 f4       	brne	.+46     	; 0x16ca <vfprintf+0xf6>
    169c:	36 fc       	sbrc	r3, 6
    169e:	75 c1       	rjmp	.+746    	; 0x198a <vfprintf+0x3b6>
    16a0:	23 2d       	mov	r18, r3
    16a2:	20 64       	ori	r18, 0x40	; 64
    16a4:	32 2e       	mov	r3, r18
    16a6:	19 c0       	rjmp	.+50     	; 0x16da <vfprintf+0x106>
    16a8:	36 fe       	sbrs	r3, 6
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <vfprintf+0xe4>
    16ac:	8a e0       	ldi	r24, 0x0A	; 10
    16ae:	98 9e       	mul	r9, r24
    16b0:	20 0d       	add	r18, r0
    16b2:	11 24       	eor	r1, r1
    16b4:	92 2e       	mov	r9, r18
    16b6:	11 c0       	rjmp	.+34     	; 0x16da <vfprintf+0x106>
    16b8:	ea e0       	ldi	r30, 0x0A	; 10
    16ba:	2e 9e       	mul	r2, r30
    16bc:	20 0d       	add	r18, r0
    16be:	11 24       	eor	r1, r1
    16c0:	22 2e       	mov	r2, r18
    16c2:	f3 2d       	mov	r31, r3
    16c4:	f0 62       	ori	r31, 0x20	; 32
    16c6:	3f 2e       	mov	r3, r31
    16c8:	08 c0       	rjmp	.+16     	; 0x16da <vfprintf+0x106>
    16ca:	8c 36       	cpi	r24, 0x6C	; 108
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <vfprintf+0x102>
    16ce:	83 2d       	mov	r24, r3
    16d0:	80 68       	ori	r24, 0x80	; 128
    16d2:	38 2e       	mov	r3, r24
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <vfprintf+0x106>
    16d6:	88 36       	cpi	r24, 0x68	; 104
    16d8:	41 f4       	brne	.+16     	; 0x16ea <vfprintf+0x116>
    16da:	f7 01       	movw	r30, r14
    16dc:	93 fd       	sbrc	r25, 3
    16de:	85 91       	lpm	r24, Z+
    16e0:	93 ff       	sbrs	r25, 3
    16e2:	81 91       	ld	r24, Z+
    16e4:	7f 01       	movw	r14, r30
    16e6:	81 11       	cpse	r24, r1
    16e8:	b3 cf       	rjmp	.-154    	; 0x1650 <vfprintf+0x7c>
    16ea:	98 2f       	mov	r25, r24
    16ec:	9f 7d       	andi	r25, 0xDF	; 223
    16ee:	95 54       	subi	r25, 0x45	; 69
    16f0:	93 30       	cpi	r25, 0x03	; 3
    16f2:	28 f4       	brcc	.+10     	; 0x16fe <vfprintf+0x12a>
    16f4:	0c 5f       	subi	r16, 0xFC	; 252
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	9f e3       	ldi	r25, 0x3F	; 63
    16fa:	99 83       	std	Y+1, r25	; 0x01
    16fc:	0d c0       	rjmp	.+26     	; 0x1718 <vfprintf+0x144>
    16fe:	83 36       	cpi	r24, 0x63	; 99
    1700:	31 f0       	breq	.+12     	; 0x170e <vfprintf+0x13a>
    1702:	83 37       	cpi	r24, 0x73	; 115
    1704:	71 f0       	breq	.+28     	; 0x1722 <vfprintf+0x14e>
    1706:	83 35       	cpi	r24, 0x53	; 83
    1708:	09 f0       	breq	.+2      	; 0x170c <vfprintf+0x138>
    170a:	55 c0       	rjmp	.+170    	; 0x17b6 <vfprintf+0x1e2>
    170c:	20 c0       	rjmp	.+64     	; 0x174e <vfprintf+0x17a>
    170e:	f8 01       	movw	r30, r16
    1710:	80 81       	ld	r24, Z
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	0e 5f       	subi	r16, 0xFE	; 254
    1716:	1f 4f       	sbci	r17, 0xFF	; 255
    1718:	88 24       	eor	r8, r8
    171a:	83 94       	inc	r8
    171c:	91 2c       	mov	r9, r1
    171e:	53 01       	movw	r10, r6
    1720:	12 c0       	rjmp	.+36     	; 0x1746 <vfprintf+0x172>
    1722:	28 01       	movw	r4, r16
    1724:	f2 e0       	ldi	r31, 0x02	; 2
    1726:	4f 0e       	add	r4, r31
    1728:	51 1c       	adc	r5, r1
    172a:	f8 01       	movw	r30, r16
    172c:	a0 80       	ld	r10, Z
    172e:	b1 80       	ldd	r11, Z+1	; 0x01
    1730:	36 fe       	sbrs	r3, 6
    1732:	03 c0       	rjmp	.+6      	; 0x173a <vfprintf+0x166>
    1734:	69 2d       	mov	r22, r9
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	02 c0       	rjmp	.+4      	; 0x173e <vfprintf+0x16a>
    173a:	6f ef       	ldi	r22, 0xFF	; 255
    173c:	7f ef       	ldi	r23, 0xFF	; 255
    173e:	c5 01       	movw	r24, r10
    1740:	4b d1       	rcall	.+662    	; 0x19d8 <strnlen>
    1742:	4c 01       	movw	r8, r24
    1744:	82 01       	movw	r16, r4
    1746:	f3 2d       	mov	r31, r3
    1748:	ff 77       	andi	r31, 0x7F	; 127
    174a:	3f 2e       	mov	r3, r31
    174c:	15 c0       	rjmp	.+42     	; 0x1778 <vfprintf+0x1a4>
    174e:	28 01       	movw	r4, r16
    1750:	22 e0       	ldi	r18, 0x02	; 2
    1752:	42 0e       	add	r4, r18
    1754:	51 1c       	adc	r5, r1
    1756:	f8 01       	movw	r30, r16
    1758:	a0 80       	ld	r10, Z
    175a:	b1 80       	ldd	r11, Z+1	; 0x01
    175c:	36 fe       	sbrs	r3, 6
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <vfprintf+0x192>
    1760:	69 2d       	mov	r22, r9
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x196>
    1766:	6f ef       	ldi	r22, 0xFF	; 255
    1768:	7f ef       	ldi	r23, 0xFF	; 255
    176a:	c5 01       	movw	r24, r10
    176c:	2a d1       	rcall	.+596    	; 0x19c2 <strnlen_P>
    176e:	4c 01       	movw	r8, r24
    1770:	f3 2d       	mov	r31, r3
    1772:	f0 68       	ori	r31, 0x80	; 128
    1774:	3f 2e       	mov	r3, r31
    1776:	82 01       	movw	r16, r4
    1778:	33 fc       	sbrc	r3, 3
    177a:	19 c0       	rjmp	.+50     	; 0x17ae <vfprintf+0x1da>
    177c:	82 2d       	mov	r24, r2
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	88 16       	cp	r8, r24
    1782:	99 06       	cpc	r9, r25
    1784:	a0 f4       	brcc	.+40     	; 0x17ae <vfprintf+0x1da>
    1786:	b6 01       	movw	r22, r12
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	30 d1       	rcall	.+608    	; 0x19ee <fputc>
    178e:	2a 94       	dec	r2
    1790:	f5 cf       	rjmp	.-22     	; 0x177c <vfprintf+0x1a8>
    1792:	f5 01       	movw	r30, r10
    1794:	37 fc       	sbrc	r3, 7
    1796:	85 91       	lpm	r24, Z+
    1798:	37 fe       	sbrs	r3, 7
    179a:	81 91       	ld	r24, Z+
    179c:	5f 01       	movw	r10, r30
    179e:	b6 01       	movw	r22, r12
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	25 d1       	rcall	.+586    	; 0x19ee <fputc>
    17a4:	21 10       	cpse	r2, r1
    17a6:	2a 94       	dec	r2
    17a8:	21 e0       	ldi	r18, 0x01	; 1
    17aa:	82 1a       	sub	r8, r18
    17ac:	91 08       	sbc	r9, r1
    17ae:	81 14       	cp	r8, r1
    17b0:	91 04       	cpc	r9, r1
    17b2:	79 f7       	brne	.-34     	; 0x1792 <vfprintf+0x1be>
    17b4:	e1 c0       	rjmp	.+450    	; 0x1978 <vfprintf+0x3a4>
    17b6:	84 36       	cpi	r24, 0x64	; 100
    17b8:	11 f0       	breq	.+4      	; 0x17be <vfprintf+0x1ea>
    17ba:	89 36       	cpi	r24, 0x69	; 105
    17bc:	39 f5       	brne	.+78     	; 0x180c <vfprintf+0x238>
    17be:	f8 01       	movw	r30, r16
    17c0:	37 fe       	sbrs	r3, 7
    17c2:	07 c0       	rjmp	.+14     	; 0x17d2 <vfprintf+0x1fe>
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	0c 5f       	subi	r16, 0xFC	; 252
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	08 c0       	rjmp	.+16     	; 0x17e2 <vfprintf+0x20e>
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	07 2e       	mov	r0, r23
    17d8:	00 0c       	add	r0, r0
    17da:	88 0b       	sbc	r24, r24
    17dc:	99 0b       	sbc	r25, r25
    17de:	0e 5f       	subi	r16, 0xFE	; 254
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	f3 2d       	mov	r31, r3
    17e4:	ff 76       	andi	r31, 0x6F	; 111
    17e6:	3f 2e       	mov	r3, r31
    17e8:	97 ff       	sbrs	r25, 7
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <vfprintf+0x22a>
    17ec:	90 95       	com	r25
    17ee:	80 95       	com	r24
    17f0:	70 95       	com	r23
    17f2:	61 95       	neg	r22
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	8f 4f       	sbci	r24, 0xFF	; 255
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	f0 68       	ori	r31, 0x80	; 128
    17fc:	3f 2e       	mov	r3, r31
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	a3 01       	movw	r20, r6
    1804:	30 d1       	rcall	.+608    	; 0x1a66 <__ultoa_invert>
    1806:	88 2e       	mov	r8, r24
    1808:	86 18       	sub	r8, r6
    180a:	44 c0       	rjmp	.+136    	; 0x1894 <vfprintf+0x2c0>
    180c:	85 37       	cpi	r24, 0x75	; 117
    180e:	31 f4       	brne	.+12     	; 0x181c <vfprintf+0x248>
    1810:	23 2d       	mov	r18, r3
    1812:	2f 7e       	andi	r18, 0xEF	; 239
    1814:	b2 2e       	mov	r11, r18
    1816:	2a e0       	ldi	r18, 0x0A	; 10
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	25 c0       	rjmp	.+74     	; 0x1866 <vfprintf+0x292>
    181c:	93 2d       	mov	r25, r3
    181e:	99 7f       	andi	r25, 0xF9	; 249
    1820:	b9 2e       	mov	r11, r25
    1822:	8f 36       	cpi	r24, 0x6F	; 111
    1824:	c1 f0       	breq	.+48     	; 0x1856 <vfprintf+0x282>
    1826:	18 f4       	brcc	.+6      	; 0x182e <vfprintf+0x25a>
    1828:	88 35       	cpi	r24, 0x58	; 88
    182a:	79 f0       	breq	.+30     	; 0x184a <vfprintf+0x276>
    182c:	ae c0       	rjmp	.+348    	; 0x198a <vfprintf+0x3b6>
    182e:	80 37       	cpi	r24, 0x70	; 112
    1830:	19 f0       	breq	.+6      	; 0x1838 <vfprintf+0x264>
    1832:	88 37       	cpi	r24, 0x78	; 120
    1834:	21 f0       	breq	.+8      	; 0x183e <vfprintf+0x26a>
    1836:	a9 c0       	rjmp	.+338    	; 0x198a <vfprintf+0x3b6>
    1838:	e9 2f       	mov	r30, r25
    183a:	e0 61       	ori	r30, 0x10	; 16
    183c:	be 2e       	mov	r11, r30
    183e:	b4 fe       	sbrs	r11, 4
    1840:	0d c0       	rjmp	.+26     	; 0x185c <vfprintf+0x288>
    1842:	fb 2d       	mov	r31, r11
    1844:	f4 60       	ori	r31, 0x04	; 4
    1846:	bf 2e       	mov	r11, r31
    1848:	09 c0       	rjmp	.+18     	; 0x185c <vfprintf+0x288>
    184a:	34 fe       	sbrs	r3, 4
    184c:	0a c0       	rjmp	.+20     	; 0x1862 <vfprintf+0x28e>
    184e:	29 2f       	mov	r18, r25
    1850:	26 60       	ori	r18, 0x06	; 6
    1852:	b2 2e       	mov	r11, r18
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x28e>
    1856:	28 e0       	ldi	r18, 0x08	; 8
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <vfprintf+0x292>
    185c:	20 e1       	ldi	r18, 0x10	; 16
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x292>
    1862:	20 e1       	ldi	r18, 0x10	; 16
    1864:	32 e0       	ldi	r19, 0x02	; 2
    1866:	f8 01       	movw	r30, r16
    1868:	b7 fe       	sbrs	r11, 7
    186a:	07 c0       	rjmp	.+14     	; 0x187a <vfprintf+0x2a6>
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	0c 5f       	subi	r16, 0xFC	; 252
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <vfprintf+0x2b2>
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 5f       	subi	r16, 0xFE	; 254
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	a3 01       	movw	r20, r6
    1888:	ee d0       	rcall	.+476    	; 0x1a66 <__ultoa_invert>
    188a:	88 2e       	mov	r8, r24
    188c:	86 18       	sub	r8, r6
    188e:	fb 2d       	mov	r31, r11
    1890:	ff 77       	andi	r31, 0x7F	; 127
    1892:	3f 2e       	mov	r3, r31
    1894:	36 fe       	sbrs	r3, 6
    1896:	0d c0       	rjmp	.+26     	; 0x18b2 <vfprintf+0x2de>
    1898:	23 2d       	mov	r18, r3
    189a:	2e 7f       	andi	r18, 0xFE	; 254
    189c:	a2 2e       	mov	r10, r18
    189e:	89 14       	cp	r8, r9
    18a0:	58 f4       	brcc	.+22     	; 0x18b8 <vfprintf+0x2e4>
    18a2:	34 fe       	sbrs	r3, 4
    18a4:	0b c0       	rjmp	.+22     	; 0x18bc <vfprintf+0x2e8>
    18a6:	32 fc       	sbrc	r3, 2
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <vfprintf+0x2e8>
    18aa:	83 2d       	mov	r24, r3
    18ac:	8e 7e       	andi	r24, 0xEE	; 238
    18ae:	a8 2e       	mov	r10, r24
    18b0:	05 c0       	rjmp	.+10     	; 0x18bc <vfprintf+0x2e8>
    18b2:	b8 2c       	mov	r11, r8
    18b4:	a3 2c       	mov	r10, r3
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <vfprintf+0x2ea>
    18b8:	b8 2c       	mov	r11, r8
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <vfprintf+0x2ea>
    18bc:	b9 2c       	mov	r11, r9
    18be:	a4 fe       	sbrs	r10, 4
    18c0:	0f c0       	rjmp	.+30     	; 0x18e0 <vfprintf+0x30c>
    18c2:	fe 01       	movw	r30, r28
    18c4:	e8 0d       	add	r30, r8
    18c6:	f1 1d       	adc	r31, r1
    18c8:	80 81       	ld	r24, Z
    18ca:	80 33       	cpi	r24, 0x30	; 48
    18cc:	21 f4       	brne	.+8      	; 0x18d6 <vfprintf+0x302>
    18ce:	9a 2d       	mov	r25, r10
    18d0:	99 7e       	andi	r25, 0xE9	; 233
    18d2:	a9 2e       	mov	r10, r25
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <vfprintf+0x314>
    18d6:	a2 fe       	sbrs	r10, 2
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <vfprintf+0x312>
    18da:	b3 94       	inc	r11
    18dc:	b3 94       	inc	r11
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <vfprintf+0x314>
    18e0:	8a 2d       	mov	r24, r10
    18e2:	86 78       	andi	r24, 0x86	; 134
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <vfprintf+0x314>
    18e6:	b3 94       	inc	r11
    18e8:	a3 fc       	sbrc	r10, 3
    18ea:	10 c0       	rjmp	.+32     	; 0x190c <vfprintf+0x338>
    18ec:	a0 fe       	sbrs	r10, 0
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <vfprintf+0x328>
    18f0:	b2 14       	cp	r11, r2
    18f2:	80 f4       	brcc	.+32     	; 0x1914 <vfprintf+0x340>
    18f4:	28 0c       	add	r2, r8
    18f6:	92 2c       	mov	r9, r2
    18f8:	9b 18       	sub	r9, r11
    18fa:	0d c0       	rjmp	.+26     	; 0x1916 <vfprintf+0x342>
    18fc:	b2 14       	cp	r11, r2
    18fe:	58 f4       	brcc	.+22     	; 0x1916 <vfprintf+0x342>
    1900:	b6 01       	movw	r22, r12
    1902:	80 e2       	ldi	r24, 0x20	; 32
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	73 d0       	rcall	.+230    	; 0x19ee <fputc>
    1908:	b3 94       	inc	r11
    190a:	f8 cf       	rjmp	.-16     	; 0x18fc <vfprintf+0x328>
    190c:	b2 14       	cp	r11, r2
    190e:	18 f4       	brcc	.+6      	; 0x1916 <vfprintf+0x342>
    1910:	2b 18       	sub	r2, r11
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <vfprintf+0x344>
    1914:	98 2c       	mov	r9, r8
    1916:	21 2c       	mov	r2, r1
    1918:	a4 fe       	sbrs	r10, 4
    191a:	0f c0       	rjmp	.+30     	; 0x193a <vfprintf+0x366>
    191c:	b6 01       	movw	r22, r12
    191e:	80 e3       	ldi	r24, 0x30	; 48
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	65 d0       	rcall	.+202    	; 0x19ee <fputc>
    1924:	a2 fe       	sbrs	r10, 2
    1926:	16 c0       	rjmp	.+44     	; 0x1954 <vfprintf+0x380>
    1928:	a1 fc       	sbrc	r10, 1
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <vfprintf+0x35e>
    192c:	88 e7       	ldi	r24, 0x78	; 120
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <vfprintf+0x362>
    1932:	88 e5       	ldi	r24, 0x58	; 88
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	b6 01       	movw	r22, r12
    1938:	0c c0       	rjmp	.+24     	; 0x1952 <vfprintf+0x37e>
    193a:	8a 2d       	mov	r24, r10
    193c:	86 78       	andi	r24, 0x86	; 134
    193e:	51 f0       	breq	.+20     	; 0x1954 <vfprintf+0x380>
    1940:	a1 fe       	sbrs	r10, 1
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <vfprintf+0x374>
    1944:	8b e2       	ldi	r24, 0x2B	; 43
    1946:	01 c0       	rjmp	.+2      	; 0x194a <vfprintf+0x376>
    1948:	80 e2       	ldi	r24, 0x20	; 32
    194a:	a7 fc       	sbrc	r10, 7
    194c:	8d e2       	ldi	r24, 0x2D	; 45
    194e:	b6 01       	movw	r22, r12
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	4d d0       	rcall	.+154    	; 0x19ee <fputc>
    1954:	89 14       	cp	r8, r9
    1956:	30 f4       	brcc	.+12     	; 0x1964 <vfprintf+0x390>
    1958:	b6 01       	movw	r22, r12
    195a:	80 e3       	ldi	r24, 0x30	; 48
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	47 d0       	rcall	.+142    	; 0x19ee <fputc>
    1960:	9a 94       	dec	r9
    1962:	f8 cf       	rjmp	.-16     	; 0x1954 <vfprintf+0x380>
    1964:	8a 94       	dec	r8
    1966:	f3 01       	movw	r30, r6
    1968:	e8 0d       	add	r30, r8
    196a:	f1 1d       	adc	r31, r1
    196c:	80 81       	ld	r24, Z
    196e:	b6 01       	movw	r22, r12
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	3d d0       	rcall	.+122    	; 0x19ee <fputc>
    1974:	81 10       	cpse	r8, r1
    1976:	f6 cf       	rjmp	.-20     	; 0x1964 <vfprintf+0x390>
    1978:	22 20       	and	r2, r2
    197a:	09 f4       	brne	.+2      	; 0x197e <vfprintf+0x3aa>
    197c:	4e ce       	rjmp	.-868    	; 0x161a <vfprintf+0x46>
    197e:	b6 01       	movw	r22, r12
    1980:	80 e2       	ldi	r24, 0x20	; 32
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	34 d0       	rcall	.+104    	; 0x19ee <fputc>
    1986:	2a 94       	dec	r2
    1988:	f7 cf       	rjmp	.-18     	; 0x1978 <vfprintf+0x3a4>
    198a:	f6 01       	movw	r30, r12
    198c:	86 81       	ldd	r24, Z+6	; 0x06
    198e:	97 81       	ldd	r25, Z+7	; 0x07
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <vfprintf+0x3c2>
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	9f ef       	ldi	r25, 0xFF	; 255
    1996:	2b 96       	adiw	r28, 0x0b	; 11
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	bf 90       	pop	r11
    19ae:	af 90       	pop	r10
    19b0:	9f 90       	pop	r9
    19b2:	8f 90       	pop	r8
    19b4:	7f 90       	pop	r7
    19b6:	6f 90       	pop	r6
    19b8:	5f 90       	pop	r5
    19ba:	4f 90       	pop	r4
    19bc:	3f 90       	pop	r3
    19be:	2f 90       	pop	r2
    19c0:	08 95       	ret

000019c2 <strnlen_P>:
    19c2:	fc 01       	movw	r30, r24
    19c4:	05 90       	lpm	r0, Z+
    19c6:	61 50       	subi	r22, 0x01	; 1
    19c8:	70 40       	sbci	r23, 0x00	; 0
    19ca:	01 10       	cpse	r0, r1
    19cc:	d8 f7       	brcc	.-10     	; 0x19c4 <strnlen_P+0x2>
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	8e 0f       	add	r24, r30
    19d4:	9f 1f       	adc	r25, r31
    19d6:	08 95       	ret

000019d8 <strnlen>:
    19d8:	fc 01       	movw	r30, r24
    19da:	61 50       	subi	r22, 0x01	; 1
    19dc:	70 40       	sbci	r23, 0x00	; 0
    19de:	01 90       	ld	r0, Z+
    19e0:	01 10       	cpse	r0, r1
    19e2:	d8 f7       	brcc	.-10     	; 0x19da <strnlen+0x2>
    19e4:	80 95       	com	r24
    19e6:	90 95       	com	r25
    19e8:	8e 0f       	add	r24, r30
    19ea:	9f 1f       	adc	r25, r31
    19ec:	08 95       	ret

000019ee <fputc>:
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	fb 01       	movw	r30, r22
    19f8:	23 81       	ldd	r18, Z+3	; 0x03
    19fa:	21 fd       	sbrc	r18, 1
    19fc:	03 c0       	rjmp	.+6      	; 0x1a04 <fputc+0x16>
    19fe:	8f ef       	ldi	r24, 0xFF	; 255
    1a00:	9f ef       	ldi	r25, 0xFF	; 255
    1a02:	2c c0       	rjmp	.+88     	; 0x1a5c <fputc+0x6e>
    1a04:	22 ff       	sbrs	r18, 2
    1a06:	16 c0       	rjmp	.+44     	; 0x1a34 <fputc+0x46>
    1a08:	46 81       	ldd	r20, Z+6	; 0x06
    1a0a:	57 81       	ldd	r21, Z+7	; 0x07
    1a0c:	24 81       	ldd	r18, Z+4	; 0x04
    1a0e:	35 81       	ldd	r19, Z+5	; 0x05
    1a10:	42 17       	cp	r20, r18
    1a12:	53 07       	cpc	r21, r19
    1a14:	44 f4       	brge	.+16     	; 0x1a26 <fputc+0x38>
    1a16:	a0 81       	ld	r26, Z
    1a18:	b1 81       	ldd	r27, Z+1	; 0x01
    1a1a:	9d 01       	movw	r18, r26
    1a1c:	2f 5f       	subi	r18, 0xFF	; 255
    1a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a20:	20 83       	st	Z, r18
    1a22:	31 83       	std	Z+1, r19	; 0x01
    1a24:	8c 93       	st	X, r24
    1a26:	26 81       	ldd	r18, Z+6	; 0x06
    1a28:	37 81       	ldd	r19, Z+7	; 0x07
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	26 83       	std	Z+6, r18	; 0x06
    1a30:	37 83       	std	Z+7, r19	; 0x07
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <fputc+0x6e>
    1a34:	8b 01       	movw	r16, r22
    1a36:	ec 01       	movw	r28, r24
    1a38:	fb 01       	movw	r30, r22
    1a3a:	00 84       	ldd	r0, Z+8	; 0x08
    1a3c:	f1 85       	ldd	r31, Z+9	; 0x09
    1a3e:	e0 2d       	mov	r30, r0
    1a40:	19 95       	eicall
    1a42:	89 2b       	or	r24, r25
    1a44:	e1 f6       	brne	.-72     	; 0x19fe <fputc+0x10>
    1a46:	d8 01       	movw	r26, r16
    1a48:	16 96       	adiw	r26, 0x06	; 6
    1a4a:	8d 91       	ld	r24, X+
    1a4c:	9c 91       	ld	r25, X
    1a4e:	17 97       	sbiw	r26, 0x07	; 7
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	16 96       	adiw	r26, 0x06	; 6
    1a54:	8d 93       	st	X+, r24
    1a56:	9c 93       	st	X, r25
    1a58:	17 97       	sbiw	r26, 0x07	; 7
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	08 95       	ret

00001a66 <__ultoa_invert>:
    1a66:	fa 01       	movw	r30, r20
    1a68:	aa 27       	eor	r26, r26
    1a6a:	28 30       	cpi	r18, 0x08	; 8
    1a6c:	51 f1       	breq	.+84     	; 0x1ac2 <__ultoa_invert+0x5c>
    1a6e:	20 31       	cpi	r18, 0x10	; 16
    1a70:	81 f1       	breq	.+96     	; 0x1ad2 <__ultoa_invert+0x6c>
    1a72:	e8 94       	clt
    1a74:	6f 93       	push	r22
    1a76:	6e 7f       	andi	r22, 0xFE	; 254
    1a78:	6e 5f       	subi	r22, 0xFE	; 254
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	af 4f       	sbci	r26, 0xFF	; 255
    1a82:	b1 e0       	ldi	r27, 0x01	; 1
    1a84:	3e d0       	rcall	.+124    	; 0x1b02 <__ultoa_invert+0x9c>
    1a86:	b4 e0       	ldi	r27, 0x04	; 4
    1a88:	3c d0       	rcall	.+120    	; 0x1b02 <__ultoa_invert+0x9c>
    1a8a:	67 0f       	add	r22, r23
    1a8c:	78 1f       	adc	r23, r24
    1a8e:	89 1f       	adc	r24, r25
    1a90:	9a 1f       	adc	r25, r26
    1a92:	a1 1d       	adc	r26, r1
    1a94:	68 0f       	add	r22, r24
    1a96:	79 1f       	adc	r23, r25
    1a98:	8a 1f       	adc	r24, r26
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	6a 0f       	add	r22, r26
    1aa0:	71 1d       	adc	r23, r1
    1aa2:	81 1d       	adc	r24, r1
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	a1 1d       	adc	r26, r1
    1aa8:	20 d0       	rcall	.+64     	; 0x1aea <__ultoa_invert+0x84>
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <__ultoa_invert+0x48>
    1aac:	68 94       	set
    1aae:	3f 91       	pop	r19
    1ab0:	2a e0       	ldi	r18, 0x0A	; 10
    1ab2:	26 9f       	mul	r18, r22
    1ab4:	11 24       	eor	r1, r1
    1ab6:	30 19       	sub	r19, r0
    1ab8:	30 5d       	subi	r19, 0xD0	; 208
    1aba:	31 93       	st	Z+, r19
    1abc:	de f6       	brtc	.-74     	; 0x1a74 <__ultoa_invert+0xe>
    1abe:	cf 01       	movw	r24, r30
    1ac0:	08 95       	ret
    1ac2:	46 2f       	mov	r20, r22
    1ac4:	47 70       	andi	r20, 0x07	; 7
    1ac6:	40 5d       	subi	r20, 0xD0	; 208
    1ac8:	41 93       	st	Z+, r20
    1aca:	b3 e0       	ldi	r27, 0x03	; 3
    1acc:	0f d0       	rcall	.+30     	; 0x1aec <__ultoa_invert+0x86>
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__ultoa_invert+0x5c>
    1ad0:	f6 cf       	rjmp	.-20     	; 0x1abe <__ultoa_invert+0x58>
    1ad2:	46 2f       	mov	r20, r22
    1ad4:	4f 70       	andi	r20, 0x0F	; 15
    1ad6:	40 5d       	subi	r20, 0xD0	; 208
    1ad8:	4a 33       	cpi	r20, 0x3A	; 58
    1ada:	18 f0       	brcs	.+6      	; 0x1ae2 <__ultoa_invert+0x7c>
    1adc:	49 5d       	subi	r20, 0xD9	; 217
    1ade:	31 fd       	sbrc	r19, 1
    1ae0:	40 52       	subi	r20, 0x20	; 32
    1ae2:	41 93       	st	Z+, r20
    1ae4:	02 d0       	rcall	.+4      	; 0x1aea <__ultoa_invert+0x84>
    1ae6:	a9 f7       	brne	.-22     	; 0x1ad2 <__ultoa_invert+0x6c>
    1ae8:	ea cf       	rjmp	.-44     	; 0x1abe <__ultoa_invert+0x58>
    1aea:	b4 e0       	ldi	r27, 0x04	; 4
    1aec:	a6 95       	lsr	r26
    1aee:	97 95       	ror	r25
    1af0:	87 95       	ror	r24
    1af2:	77 95       	ror	r23
    1af4:	67 95       	ror	r22
    1af6:	ba 95       	dec	r27
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <__ultoa_invert+0x86>
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	61 05       	cpc	r22, r1
    1afe:	71 05       	cpc	r23, r1
    1b00:	08 95       	ret
    1b02:	9b 01       	movw	r18, r22
    1b04:	ac 01       	movw	r20, r24
    1b06:	0a 2e       	mov	r0, r26
    1b08:	06 94       	lsr	r0
    1b0a:	57 95       	ror	r21
    1b0c:	47 95       	ror	r20
    1b0e:	37 95       	ror	r19
    1b10:	27 95       	ror	r18
    1b12:	ba 95       	dec	r27
    1b14:	c9 f7       	brne	.-14     	; 0x1b08 <__ultoa_invert+0xa2>
    1b16:	62 0f       	add	r22, r18
    1b18:	73 1f       	adc	r23, r19
    1b1a:	84 1f       	adc	r24, r20
    1b1c:	95 1f       	adc	r25, r21
    1b1e:	a0 1d       	adc	r26, r0
    1b20:	08 95       	ret

00001b22 <_exit>:
    1b22:	f8 94       	cli

00001b24 <__stop_program>:
    1b24:	ff cf       	rjmp	.-2      	; 0x1b24 <__stop_program>
