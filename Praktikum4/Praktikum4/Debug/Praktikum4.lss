
Praktikum4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00802000  00001e60  00001ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000286  0080202e  0080202e  00001f22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f9e6  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000050dc  00000000  00000000  00011d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007f0d  00000000  00000000  00016e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e20  00000000  00000000  0001ed4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033e76  00000000  00000000  0001fb6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000069af  00000000  00000000  000539e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  0005a391  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c37a  00000000  00000000  0005a849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e7 c7       	rjmp	.+4046   	; 0x106c <__vector_39>
      9e:	00 00       	nop
      a0:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_40>
      a4:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__vector_41>
      a8:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_42>
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	df c6       	rjmp	.+3518   	; 0xedc <__vector_71>
     11e:	00 00       	nop
     120:	0f c7       	rjmp	.+3614   	; 0xf40 <__vector_72>
     122:	00 00       	nop
     124:	3f c7       	rjmp	.+3710   	; 0xfa4 <__vector_73>
     126:	00 00       	nop
     128:	6f c7       	rjmp	.+3806   	; 0x1008 <__vector_74>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1dec>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65d4>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x65ac>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55d4>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1dac>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e0 e6       	ldi	r30, 0x60	; 96
     4a6:	fe e1       	ldi	r31, 0x1E	; 30
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ae 32       	cpi	r26, 0x2E	; 46
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	ae e2       	ldi	r26, 0x2E	; 46
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a4 3b       	cpi	r26, 0xB4	; 180
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 a7 0b 	call	0x174e	; 0x174e <main>
     4cc:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	63 d6       	rcall	.+3270   	; 0x11fc <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     536:	c1 2c       	mov	r12, r1
     538:	d1 2c       	mov	r13, r1
     53a:	76 01       	movw	r14, r12
     53c:	00 e4       	ldi	r16, 0x40	; 64
     53e:	12 e4       	ldi	r17, 0x42	; 66
     540:	2f e0       	ldi	r18, 0x0F	; 15
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	43 e0       	ldi	r20, 0x03	; 3
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	80 ea       	ldi	r24, 0xA0	; 160
     54e:	99 e0       	ldi	r25, 0x09	; 9
     550:	84 d6       	rcall	.+3336   	; 0x125a <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     552:	00 e6       	ldi	r16, 0x60	; 96
     554:	16 e0       	ldi	r17, 0x06	; 6
     556:	ff 24       	eor	r15, r15
     558:	f3 94       	inc	r15
     55a:	f8 01       	movw	r30, r16
     55c:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55e:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     560:	be 01       	movw	r22, r28
     562:	6f 5f       	subi	r22, 0xFF	; 255
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	80 ea       	ldi	r24, 0xA0	; 160
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	91 d6       	rcall	.+3362   	; 0x128e <usart_spi_select_device>
     56c:	f8 01       	movw	r30, r16
     56e:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     570:	e0 ea       	ldi	r30, 0xA0	; 160
     572:	f9 e0       	ldi	r31, 0x09	; 9
     574:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     576:	85 ff       	sbrs	r24, 5
     578:	fd cf       	rjmp	.-6      	; 0x574 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     580:	e0 ea       	ldi	r30, 0xA0	; 160
     582:	f9 e0       	ldi	r31, 0x09	; 9
     584:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     586:	86 ff       	sbrs	r24, 6
     588:	fd cf       	rjmp	.-6      	; 0x584 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     592:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     594:	be 01       	movw	r22, r28
     596:	6f 5f       	subi	r22, 0xFF	; 255
     598:	7f 4f       	sbci	r23, 0xFF	; 255
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	99 e0       	ldi	r25, 0x09	; 9
     59e:	8d d6       	rcall	.+3354   	; 0x12ba <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	80 ea       	ldi	r24, 0xA0	; 160
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	6f d6       	rcall	.+3294   	; 0x128e <usart_spi_select_device>
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b6:	e0 ea       	ldi	r30, 0xA0	; 160
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5bc:	85 ff       	sbrs	r24, 5
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c0:	86 ea       	ldi	r24, 0xA6	; 166
     5c2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5cc:	86 ff       	sbrs	r24, 6
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d8:	80 81       	ld	r24, Z
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e4:	6a d6       	rcall	.+3284   	; 0x12ba <usart_spi_deselect_device>
     5e6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	be 01       	movw	r22, r28
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	99 e0       	ldi	r25, 0x09	; 9
     5f4:	4c d6       	rcall	.+3224   	; 0x128e <usart_spi_select_device>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fc:	e0 ea       	ldi	r30, 0xA0	; 160
     5fe:	f9 e0       	ldi	r31, 0x09	; 9
     600:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     602:	85 ff       	sbrs	r24, 5
     604:	fd cf       	rjmp	.-6      	; 0x600 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     606:	88 ec       	ldi	r24, 0xC8	; 200
     608:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60c:	e0 ea       	ldi	r30, 0xA0	; 160
     60e:	f9 e0       	ldi	r31, 0x09	; 9
     610:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     612:	86 ff       	sbrs	r24, 6
     614:	fd cf       	rjmp	.-6      	; 0x610 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     616:	e0 ea       	ldi	r30, 0xA0	; 160
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     61c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61e:	80 81       	ld	r24, Z
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	80 ea       	ldi	r24, 0xA0	; 160
     628:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     62a:	47 d6       	rcall	.+3214   	; 0x12ba <usart_spi_deselect_device>
     62c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	be 01       	movw	r22, r28
     632:	6f 5f       	subi	r22, 0xFF	; 255
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	80 ea       	ldi	r24, 0xA0	; 160
     638:	99 e0       	ldi	r25, 0x09	; 9
     63a:	29 d6       	rcall	.+3154   	; 0x128e <usart_spi_select_device>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     642:	e0 ea       	ldi	r30, 0xA0	; 160
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     648:	85 ff       	sbrs	r24, 5
     64a:	fd cf       	rjmp	.-6      	; 0x646 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64c:	82 ea       	ldi	r24, 0xA2	; 162
     64e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     652:	e0 ea       	ldi	r30, 0xA0	; 160
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     658:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     65a:	fd cf       	rjmp	.-6      	; 0x656 <st7565r_init+0x16e>
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f9 e0       	ldi	r31, 0x09	; 9
     660:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     662:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     664:	80 81       	ld	r24, Z
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	80 ea       	ldi	r24, 0xA0	; 160
     66e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     670:	24 d6       	rcall	.+3144   	; 0x12ba <usart_spi_deselect_device>
     672:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	80 ea       	ldi	r24, 0xA0	; 160
     67e:	99 e0       	ldi	r25, 0x09	; 9
     680:	06 d6       	rcall	.+3084   	; 0x128e <usart_spi_select_device>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     688:	e0 ea       	ldi	r30, 0xA0	; 160
     68a:	f9 e0       	ldi	r31, 0x09	; 9
     68c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68e:	85 ff       	sbrs	r24, 5
     690:	fd cf       	rjmp	.-6      	; 0x68c <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     692:	8f e2       	ldi	r24, 0x2F	; 47
     694:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     698:	e0 ea       	ldi	r30, 0xA0	; 160
     69a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <st7565r_init+0x1b4>
     6a2:	e0 ea       	ldi	r30, 0xA0	; 160
     6a4:	f9 e0       	ldi	r31, 0x09	; 9
     6a6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6aa:	80 81       	ld	r24, Z
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	80 ea       	ldi	r24, 0xA0	; 160
     6b4:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b6:	01 d6       	rcall	.+3074   	; 0x12ba <usart_spi_deselect_device>
     6b8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	80 ea       	ldi	r24, 0xA0	; 160
     6c4:	99 e0       	ldi	r25, 0x09	; 9
     6c6:	e3 d5       	rcall	.+3014   	; 0x128e <usart_spi_select_device>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6ce:	e0 ea       	ldi	r30, 0xA0	; 160
     6d0:	f9 e0       	ldi	r31, 0x09	; 9
     6d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d4:	85 ff       	sbrs	r24, 5
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d8:	88 ef       	ldi	r24, 0xF8	; 248
     6da:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6de:	e0 ea       	ldi	r30, 0xA0	; 160
     6e0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <st7565r_init+0x1fa>
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ec:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ee:	81 83       	std	Z+1, r24	; 0x01
     6f0:	80 81       	ld	r24, Z
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fc:	de d5       	rcall	.+3004   	; 0x12ba <usart_spi_deselect_device>
     6fe:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	80 ea       	ldi	r24, 0xA0	; 160
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	c0 d5       	rcall	.+2944   	; 0x128e <usart_spi_select_device>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     71a:	85 ff       	sbrs	r24, 5
     71c:	fd cf       	rjmp	.-6      	; 0x718 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     722:	e0 ea       	ldi	r30, 0xA0	; 160
     724:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     72a:	fd cf       	rjmp	.-6      	; 0x726 <st7565r_init+0x23e>
     72c:	e0 ea       	ldi	r30, 0xA0	; 160
     72e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     730:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     732:	81 83       	std	Z+1, r24	; 0x01
     734:	80 81       	ld	r24, Z
     736:	be 01       	movw	r22, r28
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	80 ea       	ldi	r24, 0xA0	; 160
     73e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     740:	bc d5       	rcall	.+2936   	; 0x12ba <usart_spi_deselect_device>
     742:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	80 ea       	ldi	r24, 0xA0	; 160
     74e:	99 e0       	ldi	r25, 0x09	; 9
     750:	9e d5       	rcall	.+2876   	; 0x128e <usart_spi_select_device>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     758:	e0 ea       	ldi	r30, 0xA0	; 160
     75a:	f9 e0       	ldi	r31, 0x09	; 9
     75c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     760:	fd cf       	rjmp	.-6      	; 0x75c <st7565r_init+0x274>
     762:	81 e2       	ldi	r24, 0x21	; 33
     764:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     768:	e0 ea       	ldi	r30, 0xA0	; 160
     76a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76e:	86 ff       	sbrs	r24, 6
     770:	fd cf       	rjmp	.-6      	; 0x76c <st7565r_init+0x284>
     772:	e0 ea       	ldi	r30, 0xA0	; 160
     774:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     776:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	80 81       	ld	r24, Z
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     786:	99 d5       	rcall	.+2866   	; 0x12ba <usart_spi_deselect_device>
     788:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	99 e0       	ldi	r25, 0x09	; 9
     796:	7b d5       	rcall	.+2806   	; 0x128e <usart_spi_select_device>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79e:	e0 ea       	ldi	r30, 0xA0	; 160
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
     7a4:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <st7565r_init+0x2ba>
     7a8:	81 e8       	ldi	r24, 0x81	; 129
     7aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ae:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b0:	f9 e0       	ldi	r31, 0x09	; 9
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b4:	86 ff       	sbrs	r24, 6
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <st7565r_init+0x2ca>
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7bc:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7be:	81 83       	std	Z+1, r24	; 0x01
     7c0:	80 81       	ld	r24, Z
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7cc:	76 d5       	rcall	.+2796   	; 0x12ba <usart_spi_deselect_device>
     7ce:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	be 01       	movw	r22, r28
     7d4:	6f 5f       	subi	r22, 0xFF	; 255
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	99 e0       	ldi	r25, 0x09	; 9
     7dc:	58 d5       	rcall	.+2736   	; 0x128e <usart_spi_select_device>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e4:	e0 ea       	ldi	r30, 0xA0	; 160
     7e6:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
     7ea:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <st7565r_init+0x300>
     7ee:	81 e2       	ldi	r24, 0x21	; 33
     7f0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7fa:	86 ff       	sbrs	r24, 6
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <st7565r_init+0x310>
     7fe:	e0 ea       	ldi	r30, 0xA0	; 160
     800:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     802:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     804:	81 83       	std	Z+1, r24	; 0x01
     806:	80 81       	ld	r24, Z
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	80 ea       	ldi	r24, 0xA0	; 160
     810:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     812:	53 d5       	rcall	.+2726   	; 0x12ba <usart_spi_deselect_device>
     814:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	be 01       	movw	r22, r28
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	80 ea       	ldi	r24, 0xA0	; 160
     820:	99 e0       	ldi	r25, 0x09	; 9
     822:	35 d5       	rcall	.+2666   	; 0x128e <usart_spi_select_device>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82e:	81 81       	ldd	r24, Z+1	; 0x01
     830:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     832:	fd cf       	rjmp	.-6      	; 0x82e <st7565r_init+0x346>
     834:	8f ea       	ldi	r24, 0xAF	; 175
     836:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     842:	fd cf       	rjmp	.-6      	; 0x83e <st7565r_init+0x356>
     844:	e0 ea       	ldi	r30, 0xA0	; 160
     846:	f9 e0       	ldi	r31, 0x09	; 9
     848:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     84a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84c:	80 81       	ld	r24, Z
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	80 ea       	ldi	r24, 0xA0	; 160
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	30 d5       	rcall	.+2656   	; 0x12ba <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     85a:	0f 90       	pop	r0
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	08 95       	ret

00000870 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	1f 92       	push	r1
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	08 2f       	mov	r16, r24
     882:	f6 2e       	mov	r15, r22
     884:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     886:	34 d5       	rcall	.+2664   	; 0x12f0 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     888:	0f 70       	andi	r16, 0x0F	; 15
     88a:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     88c:	8b e2       	ldi	r24, 0x2B	; 43
     88e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     890:	be 01       	movw	r22, r28
     892:	6f 5f       	subi	r22, 0xFF	; 255
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	80 ea       	ldi	r24, 0xA0	; 160
     898:	99 e0       	ldi	r25, 0x09	; 9
     89a:	f9 d4       	rcall	.+2546   	; 0x128e <usart_spi_select_device>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8a2:	e0 ea       	ldi	r30, 0xA0	; 160
     8a4:	f9 e0       	ldi	r31, 0x09	; 9
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8a8:	95 ff       	sbrs	r25, 5
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8ac:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8b0:	e0 ea       	ldi	r30, 0xA0	; 160
     8b2:	f9 e0       	ldi	r31, 0x09	; 9
     8b4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8b6:	86 ff       	sbrs	r24, 6
     8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ba:	e0 ea       	ldi	r30, 0xA0	; 160
     8bc:	f9 e0       	ldi	r31, 0x09	; 9
     8be:	80 e4       	ldi	r24, 0x40	; 64
     8c0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8c2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8c4:	be 01       	movw	r22, r28
     8c6:	6f 5f       	subi	r22, 0xFF	; 255
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	80 ea       	ldi	r24, 0xA0	; 160
     8cc:	99 e0       	ldi	r25, 0x09	; 9
     8ce:	f5 d4       	rcall	.+2538   	; 0x12ba <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8d0:	0f 2d       	mov	r16, r15
     8d2:	0f 77       	andi	r16, 0x7F	; 127
     8d4:	02 95       	swap	r16
     8d6:	0f 70       	andi	r16, 0x0F	; 15
     8d8:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8da:	8b e2       	ldi	r24, 0x2B	; 43
     8dc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8de:	be 01       	movw	r22, r28
     8e0:	6f 5f       	subi	r22, 0xFF	; 255
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	80 ea       	ldi	r24, 0xA0	; 160
     8e6:	99 e0       	ldi	r25, 0x09	; 9
     8e8:	d2 d4       	rcall	.+2468   	; 0x128e <usart_spi_select_device>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8f0:	e0 ea       	ldi	r30, 0xA0	; 160
     8f2:	f9 e0       	ldi	r31, 0x09	; 9
     8f4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8f6:	85 ff       	sbrs	r24, 5
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8fa:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8fe:	e0 ea       	ldi	r30, 0xA0	; 160
     900:	f9 e0       	ldi	r31, 0x09	; 9
     902:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     904:	86 ff       	sbrs	r24, 6
     906:	fd cf       	rjmp	.-6      	; 0x902 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     908:	e0 ea       	ldi	r30, 0xA0	; 160
     90a:	f9 e0       	ldi	r31, 0x09	; 9
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     910:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     912:	be 01       	movw	r22, r28
     914:	6f 5f       	subi	r22, 0xFF	; 255
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	80 ea       	ldi	r24, 0xA0	; 160
     91a:	99 e0       	ldi	r25, 0x09	; 9
     91c:	ce d4       	rcall	.+2460   	; 0x12ba <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     91e:	0f 2d       	mov	r16, r15
     920:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     922:	8b e2       	ldi	r24, 0x2B	; 43
     924:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     926:	be 01       	movw	r22, r28
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	80 ea       	ldi	r24, 0xA0	; 160
     92e:	99 e0       	ldi	r25, 0x09	; 9
     930:	ae d4       	rcall	.+2396   	; 0x128e <usart_spi_select_device>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f9 e0       	ldi	r31, 0x09	; 9
     93c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     93e:	85 ff       	sbrs	r24, 5
     940:	fd cf       	rjmp	.-6      	; 0x93c <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     942:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     946:	e0 ea       	ldi	r30, 0xA0	; 160
     948:	f9 e0       	ldi	r31, 0x09	; 9
     94a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     94c:	86 ff       	sbrs	r24, 6
     94e:	fd cf       	rjmp	.-6      	; 0x94a <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     950:	e0 ea       	ldi	r30, 0xA0	; 160
     952:	f9 e0       	ldi	r31, 0x09	; 9
     954:	80 e4       	ldi	r24, 0x40	; 64
     956:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     958:	80 81       	ld	r24, Z
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	80 ea       	ldi	r24, 0xA0	; 160
     962:	99 e0       	ldi	r25, 0x09	; 9
     964:	aa d4       	rcall	.+2388   	; 0x12ba <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     966:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	be 01       	movw	r22, r28
     96c:	6f 5f       	subi	r22, 0xFF	; 255
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	80 ea       	ldi	r24, 0xA0	; 160
     972:	99 e0       	ldi	r25, 0x09	; 9
     974:	8c d4       	rcall	.+2328   	; 0x128e <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     97c:	e0 ea       	ldi	r30, 0xA0	; 160
     97e:	f9 e0       	ldi	r31, 0x09	; 9
     980:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     982:	85 ff       	sbrs	r24, 5
     984:	fd cf       	rjmp	.-6      	; 0x980 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     986:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     98a:	e0 ea       	ldi	r30, 0xA0	; 160
     98c:	f9 e0       	ldi	r31, 0x09	; 9
     98e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     990:	86 ff       	sbrs	r24, 6
     992:	fd cf       	rjmp	.-6      	; 0x98e <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     994:	e0 ea       	ldi	r30, 0xA0	; 160
     996:	f9 e0       	ldi	r31, 0x09	; 9
     998:	80 e4       	ldi	r24, 0x40	; 64
     99a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     99c:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9a4:	be 01       	movw	r22, r28
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	80 ea       	ldi	r24, 0xA0	; 160
     9ac:	99 e0       	ldi	r25, 0x09	; 9
     9ae:	85 d4       	rcall	.+2314   	; 0x12ba <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9b0:	0f 90       	pop	r0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	08 95       	ret

000009be <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	1f 92       	push	r1
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9cc:	8e e2       	ldi	r24, 0x2E	; 46
     9ce:	90 e2       	ldi	r25, 0x20	; 32
     9d0:	8a d4       	rcall	.+2324   	; 0x12e6 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9d2:	8a dd       	rcall	.-1260   	; 0x4e8 <st7565r_init>
     9d4:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9da:	6f 5f       	subi	r22, 0xFF	; 255
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	80 ea       	ldi	r24, 0xA0	; 160
     9e0:	99 e0       	ldi	r25, 0x09	; 9
     9e2:	55 d4       	rcall	.+2218   	; 0x128e <usart_spi_select_device>
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     9ea:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9ec:	f9 e0       	ldi	r31, 0x09	; 9
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
     9f0:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <gfx_mono_st7565r_init+0x30>
     9f4:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9f6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     9fa:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9fc:	f9 e0       	ldi	r31, 0x09	; 9
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <gfx_mono_st7565r_init+0x40>
     a04:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a06:	f9 e0       	ldi	r31, 0x09	; 9
     a08:	80 e4       	ldi	r24, 0x40	; 64
     a0a:	81 83       	std	Z+1, r24	; 0x01
     a0c:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a0e:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	80 ea       	ldi	r24, 0xA0	; 160
     a16:	99 e0       	ldi	r25, 0x09	; 9
     a18:	50 d4       	rcall	.+2208   	; 0x12ba <usart_spi_deselect_device>
     a1a:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a1c:	0a c0       	rjmp	.+20     	; 0xa32 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	61 2f       	mov	r22, r17
     a22:	80 2f       	mov	r24, r16
     a24:	25 df       	rcall	.-438    	; 0x870 <gfx_mono_st7565r_put_byte>
     a26:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a28:	10 38       	cpi	r17, 0x80	; 128
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <gfx_mono_st7565r_init+0x60>
     a2c:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a2e:	04 30       	cpi	r16, 0x04	; 4
     a30:	11 f0       	breq	.+4      	; 0xa36 <gfx_mono_st7565r_init+0x78>
     a32:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a34:	f4 cf       	rjmp	.-24     	; 0xa1e <gfx_mono_st7565r_init+0x60>
     a36:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <gfx_mono_st7565r_draw_pixel>:
     a42:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a4c:	88 23       	and	r24, r24
     a4e:	4c f1       	brlt	.+82     	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x60>
     a50:	60 32       	cpi	r22, 0x20	; 32
     a52:	38 f5       	brcc	.+78     	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x60>
     a54:	d4 2f       	mov	r29, r20
     a56:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a58:	f6 2e       	mov	r15, r22
     a5a:	f6 94       	lsr	r15
     a5c:	f6 94       	lsr	r15
     a5e:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	88 e0       	ldi	r24, 0x08	; 8
     a64:	f8 9e       	mul	r15, r24
     a66:	60 19       	sub	r22, r0
     a68:	71 09       	sbc	r23, r1
     a6a:	11 24       	eor	r1, r1
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	8c 01       	movw	r16, r24
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <gfx_mono_st7565r_draw_pixel+0x36>
     a74:	00 0f       	add	r16, r16
     a76:	11 1f       	adc	r17, r17
     a78:	6a 95       	dec	r22
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a7c:	6c 2f       	mov	r22, r28
     a7e:	8f 2d       	mov	r24, r15
     a80:	45 d4       	rcall	.+2186   	; 0x130c <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a82:	d1 30       	cpi	r29, 0x01	; 1
     a84:	21 f0       	breq	.+8      	; 0xa8e <gfx_mono_st7565r_draw_pixel+0x4c>
     a86:	28 f0       	brcs	.+10     	; 0xa92 <gfx_mono_st7565r_draw_pixel+0x50>
     a88:	d2 30       	cpi	r29, 0x02	; 2
     a8a:	31 f0       	breq	.+12     	; 0xa98 <gfx_mono_st7565r_draw_pixel+0x56>
     a8c:	06 c0       	rjmp	.+12     	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     a8e:	80 2b       	or	r24, r16
		break;
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     a92:	00 95       	com	r16
     a94:	80 23       	and	r24, r16
		break;
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     a98:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     a9a:	48 2f       	mov	r20, r24
     a9c:	6c 2f       	mov	r22, r28
     a9e:	8f 2d       	mov	r24, r15
     aa0:	e7 de       	rcall	.-562    	; 0x870 <gfx_mono_st7565r_put_byte>
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	08 95       	ret

00000aae <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aae:	2e c4       	rjmp	.+2140   	; 0x130c <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     ab0:	08 95       	ret

00000ab2 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     ac4:	d9 01       	movw	r26, r18
     ac6:	c8 01       	movw	r24, r16
     ac8:	b6 95       	lsr	r27
     aca:	a7 95       	ror	r26
     acc:	97 95       	ror	r25
     ace:	87 95       	ror	r24
     ad0:	48 17       	cp	r20, r24
     ad2:	59 07       	cpc	r21, r25
     ad4:	6a 07       	cpc	r22, r26
     ad6:	7b 07       	cpc	r23, r27
     ad8:	70 f4       	brcc	.+28     	; 0xaf6 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     ada:	6a 01       	movw	r12, r20
     adc:	7b 01       	movw	r14, r22
     ade:	cc 0c       	add	r12, r12
     ae0:	dd 1c       	adc	r13, r13
     ae2:	ee 1c       	adc	r14, r14
     ae4:	ff 1c       	adc	r15, r15
     ae6:	c9 01       	movw	r24, r18
     ae8:	b8 01       	movw	r22, r16
     aea:	a7 01       	movw	r20, r14
     aec:	96 01       	movw	r18, r12
     aee:	b7 d6       	rcall	.+3438   	; 0x185e <__udivmodsi4>
     af0:	21 50       	subi	r18, 0x01	; 1
     af2:	31 09       	sbc	r19, r1
     af4:	02 c0       	rjmp	.+4      	; 0xafa <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     afa:	83 2f       	mov	r24, r19
     afc:	8f 70       	andi	r24, 0x0F	; 15
     afe:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     b00:	2e 83       	std	Y+6, r18	; 0x06
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	08 95       	ret

00000b14 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	1f 92       	push	r1
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	7c 01       	movw	r14, r24
     b2a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b2c:	00 97       	sbiw	r24, 0x00	; 0
     b2e:	09 f4       	brne	.+2      	; 0xb32 <usart_init_spi+0x1e>
     b30:	b2 c1       	rjmp	.+868    	; 0xe96 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b32:	80 3c       	cpi	r24, 0xC0	; 192
     b34:	91 05       	cpc	r25, r1
     b36:	21 f4       	brne	.+8      	; 0xb40 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b38:	60 e1       	ldi	r22, 0x10	; 16
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	71 d4       	rcall	.+2274   	; 0x1420 <sysclk_enable_module>
     b3e:	ab c1       	rjmp	.+854    	; 0xe96 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b40:	80 e8       	ldi	r24, 0x80	; 128
     b42:	e8 16       	cp	r14, r24
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	f8 06       	cpc	r15, r24
     b48:	21 f4       	brne	.+8      	; 0xb52 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b4a:	62 e0       	ldi	r22, 0x02	; 2
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	68 d4       	rcall	.+2256   	; 0x1420 <sysclk_enable_module>
     b50:	a2 c1       	rjmp	.+836    	; 0xe96 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b52:	e1 14       	cp	r14, r1
     b54:	e1 e0       	ldi	r30, 0x01	; 1
     b56:	fe 06       	cpc	r15, r30
     b58:	21 f4       	brne	.+8      	; 0xb62 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	60 d4       	rcall	.+2240   	; 0x1420 <sysclk_enable_module>
     b60:	9a c1       	rjmp	.+820    	; 0xe96 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b62:	f0 e8       	ldi	r31, 0x80	; 128
     b64:	ef 16       	cp	r14, r31
     b66:	f3 e0       	ldi	r31, 0x03	; 3
     b68:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b6a:	21 f4       	brne	.+8      	; 0xb74 <usart_init_spi+0x60>
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	57 d4       	rcall	.+2222   	; 0x1420 <sysclk_enable_module>
     b72:	91 c1       	rjmp	.+802    	; 0xe96 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b74:	30 e9       	ldi	r19, 0x90	; 144
     b76:	e3 16       	cp	r14, r19
     b78:	33 e0       	ldi	r19, 0x03	; 3
     b7a:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b7c:	21 f4       	brne	.+8      	; 0xb86 <usart_init_spi+0x72>
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	4e d4       	rcall	.+2204   	; 0x1420 <sysclk_enable_module>
     b84:	88 c1       	rjmp	.+784    	; 0xe96 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b86:	e1 14       	cp	r14, r1
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b8c:	21 f4       	brne	.+8      	; 0xb96 <usart_init_spi+0x82>
     b8e:	62 e0       	ldi	r22, 0x02	; 2
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	46 d4       	rcall	.+2188   	; 0x1420 <sysclk_enable_module>
     b94:	80 c1       	rjmp	.+768    	; 0xe96 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     b96:	e0 e4       	ldi	r30, 0x40	; 64
     b98:	ee 16       	cp	r14, r30
     b9a:	e2 e0       	ldi	r30, 0x02	; 2
     b9c:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     b9e:	21 f4       	brne	.+8      	; 0xba8 <usart_init_spi+0x94>
     ba0:	62 e0       	ldi	r22, 0x02	; 2
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	3d d4       	rcall	.+2170   	; 0x1420 <sysclk_enable_module>
     ba6:	77 c1       	rjmp	.+750    	; 0xe96 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     ba8:	f0 e2       	ldi	r31, 0x20	; 32
     baa:	ef 16       	cp	r14, r31
     bac:	f3 e0       	ldi	r31, 0x03	; 3
     bae:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     bb0:	21 f4       	brne	.+8      	; 0xbba <usart_init_spi+0xa6>
     bb2:	64 e0       	ldi	r22, 0x04	; 4
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	34 d4       	rcall	.+2152   	; 0x1420 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     bb8:	6e c1       	rjmp	.+732    	; 0xe96 <usart_init_spi+0x382>
     bba:	e1 14       	cp	r14, r1
     bbc:	38 e0       	ldi	r19, 0x08	; 8
     bbe:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     bc0:	21 f4       	brne	.+8      	; 0xbca <usart_init_spi+0xb6>
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	2c d4       	rcall	.+2136   	; 0x1420 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     bc8:	66 c1       	rjmp	.+716    	; 0xe96 <usart_init_spi+0x382>
     bca:	e1 14       	cp	r14, r1
     bcc:	89 e0       	ldi	r24, 0x09	; 9
     bce:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     bd0:	21 f4       	brne	.+8      	; 0xbda <usart_init_spi+0xc6>
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	84 e0       	ldi	r24, 0x04	; 4
     bd6:	24 d4       	rcall	.+2120   	; 0x1420 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     bd8:	5e c1       	rjmp	.+700    	; 0xe96 <usart_init_spi+0x382>
     bda:	e1 14       	cp	r14, r1
     bdc:	ea e0       	ldi	r30, 0x0A	; 10
     bde:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     be0:	21 f4       	brne	.+8      	; 0xbea <usart_init_spi+0xd6>
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	85 e0       	ldi	r24, 0x05	; 5
     be6:	1c d4       	rcall	.+2104   	; 0x1420 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     be8:	56 c1       	rjmp	.+684    	; 0xe96 <usart_init_spi+0x382>
     bea:	e1 14       	cp	r14, r1
     bec:	fb e0       	ldi	r31, 0x0B	; 11
     bee:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     bf0:	21 f4       	brne	.+8      	; 0xbfa <usart_init_spi+0xe6>
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	86 e0       	ldi	r24, 0x06	; 6
     bf6:	14 d4       	rcall	.+2088   	; 0x1420 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     bf8:	4e c1       	rjmp	.+668    	; 0xe96 <usart_init_spi+0x382>
     bfa:	30 e4       	ldi	r19, 0x40	; 64
     bfc:	e3 16       	cp	r14, r19
     bfe:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     c00:	f3 06       	cpc	r15, r19
     c02:	21 f4       	brne	.+8      	; 0xc0c <usart_init_spi+0xf8>
     c04:	62 e0       	ldi	r22, 0x02	; 2
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	0b d4       	rcall	.+2070   	; 0x1420 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     c0a:	45 c1       	rjmp	.+650    	; 0xe96 <usart_init_spi+0x382>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	e8 16       	cp	r14, r24
     c10:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     c12:	f8 06       	cpc	r15, r24
     c14:	21 f4       	brne	.+8      	; 0xc1e <usart_init_spi+0x10a>
     c16:	62 e0       	ldi	r22, 0x02	; 2
     c18:	84 e0       	ldi	r24, 0x04	; 4
     c1a:	02 d4       	rcall	.+2052   	; 0x1420 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     c1c:	3c c1       	rjmp	.+632    	; 0xe96 <usart_init_spi+0x382>
     c1e:	e0 e4       	ldi	r30, 0x40	; 64
     c20:	ee 16       	cp	r14, r30
     c22:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     c24:	fe 06       	cpc	r15, r30
     c26:	21 f4       	brne	.+8      	; 0xc30 <usart_init_spi+0x11c>
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	85 e0       	ldi	r24, 0x05	; 5
     c2c:	f9 d3       	rcall	.+2034   	; 0x1420 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c2e:	33 c1       	rjmp	.+614    	; 0xe96 <usart_init_spi+0x382>
     c30:	f0 e9       	ldi	r31, 0x90	; 144
     c32:	ef 16       	cp	r14, r31
     c34:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c36:	ff 06       	cpc	r15, r31
     c38:	21 f4       	brne	.+8      	; 0xc42 <usart_init_spi+0x12e>
     c3a:	64 e0       	ldi	r22, 0x04	; 4
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	f0 d3       	rcall	.+2016   	; 0x1420 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c40:	2a c1       	rjmp	.+596    	; 0xe96 <usart_init_spi+0x382>
     c42:	30 e9       	ldi	r19, 0x90	; 144
     c44:	e3 16       	cp	r14, r19
     c46:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c48:	f3 06       	cpc	r15, r19
     c4a:	21 f4       	brne	.+8      	; 0xc54 <usart_init_spi+0x140>
     c4c:	64 e0       	ldi	r22, 0x04	; 4
     c4e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c50:	e7 d3       	rcall	.+1998   	; 0x1420 <sysclk_enable_module>
     c52:	21 c1       	rjmp	.+578    	; 0xe96 <usart_init_spi+0x382>
     c54:	80 e9       	ldi	r24, 0x90	; 144
     c56:	e8 16       	cp	r14, r24
     c58:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c5a:	f8 06       	cpc	r15, r24
     c5c:	21 f4       	brne	.+8      	; 0xc66 <usart_init_spi+0x152>
     c5e:	64 e0       	ldi	r22, 0x04	; 4
     c60:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c62:	de d3       	rcall	.+1980   	; 0x1420 <sysclk_enable_module>
     c64:	18 c1       	rjmp	.+560    	; 0xe96 <usart_init_spi+0x382>
     c66:	e0 e9       	ldi	r30, 0x90	; 144
     c68:	ee 16       	cp	r14, r30
     c6a:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c6c:	fe 06       	cpc	r15, r30
     c6e:	21 f4       	brne	.+8      	; 0xc78 <usart_init_spi+0x164>
     c70:	64 e0       	ldi	r22, 0x04	; 4
     c72:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c74:	d5 d3       	rcall	.+1962   	; 0x1420 <sysclk_enable_module>
     c76:	0f c1       	rjmp	.+542    	; 0xe96 <usart_init_spi+0x382>
     c78:	f0 ec       	ldi	r31, 0xC0	; 192
     c7a:	ef 16       	cp	r14, r31
     c7c:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c7e:	ff 06       	cpc	r15, r31
     c80:	21 f4       	brne	.+8      	; 0xc8a <usart_init_spi+0x176>
     c82:	68 e0       	ldi	r22, 0x08	; 8
     c84:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c86:	cc d3       	rcall	.+1944   	; 0x1420 <sysclk_enable_module>
     c88:	06 c1       	rjmp	.+524    	; 0xe96 <usart_init_spi+0x382>
     c8a:	30 ec       	ldi	r19, 0xC0	; 192
     c8c:	e3 16       	cp	r14, r19
     c8e:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     c90:	f3 06       	cpc	r15, r19
     c92:	21 f4       	brne	.+8      	; 0xc9c <usart_init_spi+0x188>
     c94:	68 e0       	ldi	r22, 0x08	; 8
     c96:	84 e0       	ldi	r24, 0x04	; 4
     c98:	c3 d3       	rcall	.+1926   	; 0x1420 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     c9a:	fd c0       	rjmp	.+506    	; 0xe96 <usart_init_spi+0x382>
     c9c:	80 ea       	ldi	r24, 0xA0	; 160
     c9e:	e8 16       	cp	r14, r24
     ca0:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     ca2:	f8 06       	cpc	r15, r24
     ca4:	61 f4       	brne	.+24     	; 0xcbe <usart_init_spi+0x1aa>
     ca6:	60 e1       	ldi	r22, 0x10	; 16
     ca8:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     caa:	ba d3       	rcall	.+1908   	; 0x1420 <sysclk_enable_module>
     cac:	e0 ea       	ldi	r30, 0xA0	; 160
     cae:	f8 e0       	ldi	r31, 0x08	; 8
     cb0:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     cb2:	8f 7e       	andi	r24, 0xEF	; 239
     cb4:	84 83       	std	Z+4, r24	; 0x04
     cb6:	f8 01       	movw	r30, r16
     cb8:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     cba:	22 50       	subi	r18, 0x02	; 2
     cbc:	4c c0       	rjmp	.+152    	; 0xd56 <usart_init_spi+0x242>
     cbe:	f0 ea       	ldi	r31, 0xA0	; 160
     cc0:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     cc2:	f9 e0       	ldi	r31, 0x09	; 9
     cc4:	ff 06       	cpc	r15, r31
     cc6:	21 f4       	brne	.+8      	; 0xcd0 <usart_init_spi+0x1bc>
     cc8:	60 e1       	ldi	r22, 0x10	; 16
     cca:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     ccc:	a9 d3       	rcall	.+1874   	; 0x1420 <sysclk_enable_module>
     cce:	e3 c0       	rjmp	.+454    	; 0xe96 <usart_init_spi+0x382>
     cd0:	30 ea       	ldi	r19, 0xA0	; 160
     cd2:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     cd4:	3a e0       	ldi	r19, 0x0A	; 10
     cd6:	f3 06       	cpc	r15, r19
     cd8:	21 f4       	brne	.+8      	; 0xce2 <usart_init_spi+0x1ce>
     cda:	60 e1       	ldi	r22, 0x10	; 16
     cdc:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     cde:	a0 d3       	rcall	.+1856   	; 0x1420 <sysclk_enable_module>
     ce0:	da c0       	rjmp	.+436    	; 0xe96 <usart_init_spi+0x382>
     ce2:	80 ea       	ldi	r24, 0xA0	; 160
     ce4:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     ce6:	8b e0       	ldi	r24, 0x0B	; 11
     ce8:	f8 06       	cpc	r15, r24
     cea:	21 f4       	brne	.+8      	; 0xcf4 <usart_init_spi+0x1e0>
     cec:	60 e1       	ldi	r22, 0x10	; 16
     cee:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     cf0:	97 d3       	rcall	.+1838   	; 0x1420 <sysclk_enable_module>
     cf2:	d1 c0       	rjmp	.+418    	; 0xe96 <usart_init_spi+0x382>
     cf4:	e0 eb       	ldi	r30, 0xB0	; 176
     cf6:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     cf8:	e8 e0       	ldi	r30, 0x08	; 8
     cfa:	fe 06       	cpc	r15, r30
     cfc:	21 f4       	brne	.+8      	; 0xd06 <usart_init_spi+0x1f2>
     cfe:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	8e d3       	rcall	.+1820   	; 0x1420 <sysclk_enable_module>
     d04:	c8 c0       	rjmp	.+400    	; 0xe96 <usart_init_spi+0x382>
     d06:	f0 eb       	ldi	r31, 0xB0	; 176
     d08:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     d0a:	f9 e0       	ldi	r31, 0x09	; 9
     d0c:	ff 06       	cpc	r15, r31
     d0e:	21 f4       	brne	.+8      	; 0xd18 <usart_init_spi+0x204>
     d10:	60 e2       	ldi	r22, 0x20	; 32
     d12:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     d14:	85 d3       	rcall	.+1802   	; 0x1420 <sysclk_enable_module>
     d16:	bf c0       	rjmp	.+382    	; 0xe96 <usart_init_spi+0x382>
     d18:	30 e8       	ldi	r19, 0x80	; 128
     d1a:	e3 16       	cp	r14, r19
     d1c:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     d1e:	f3 06       	cpc	r15, r19
     d20:	21 f4       	brne	.+8      	; 0xd2a <usart_init_spi+0x216>
     d22:	60 e4       	ldi	r22, 0x40	; 64
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	7c d3       	rcall	.+1784   	; 0x1420 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     d28:	b6 c0       	rjmp	.+364    	; 0xe96 <usart_init_spi+0x382>
     d2a:	80 ea       	ldi	r24, 0xA0	; 160
     d2c:	e8 16       	cp	r14, r24
     d2e:	84 e0       	ldi	r24, 0x04	; 4
     d30:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     d32:	21 f4       	brne	.+8      	; 0xd3c <usart_init_spi+0x228>
     d34:	60 e4       	ldi	r22, 0x40	; 64
     d36:	85 e0       	ldi	r24, 0x05	; 5
     d38:	73 d3       	rcall	.+1766   	; 0x1420 <sysclk_enable_module>
     d3a:	ad c0       	rjmp	.+346    	; 0xe96 <usart_init_spi+0x382>
     d3c:	f7 01       	movw	r30, r14
     d3e:	84 81       	ldd	r24, Z+4	; 0x04
     d40:	8f 7e       	andi	r24, 0xEF	; 239
     d42:	84 83       	std	Z+4, r24	; 0x04
     d44:	fb 01       	movw	r30, r22
     d46:	24 81       	ldd	r18, Z+4	; 0x04
     d48:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     d4a:	c7 01       	movw	r24, r14
     d4c:	f0 ea       	ldi	r31, 0xA0	; 160
     d4e:	ef 16       	cp	r14, r31
     d50:	f8 e0       	ldi	r31, 0x08	; 8
     d52:	ff 06       	cpc	r15, r31
     d54:	49 f4       	brne	.+18     	; 0xd68 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     d56:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
     d5a:	84 fd       	sbrc	r24, 4
     d5c:	a5 c0       	rjmp	.+330    	; 0xea8 <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     d5e:	0f 2e       	mov	r0, r31
     d60:	f1 e1       	ldi	r31, 0x11	; 17
     d62:	df 2e       	mov	r13, r31
     d64:	f0 2d       	mov	r31, r0
     d66:	a4 c0       	rjmp	.+328    	; 0xeb0 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     d68:	80 3b       	cpi	r24, 0xB0	; 176
     d6a:	38 e0       	ldi	r19, 0x08	; 8
     d6c:	93 07       	cpc	r25, r19
     d6e:	91 f0       	breq	.+36     	; 0xd94 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     d70:	80 3a       	cpi	r24, 0xA0	; 160
     d72:	e9 e0       	ldi	r30, 0x09	; 9
     d74:	9e 07       	cpc	r25, r30
     d76:	49 f4       	brne	.+18     	; 0xd8a <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     d78:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
     d7c:	34 fd       	sbrc	r19, 4
     d7e:	9b c0       	rjmp	.+310    	; 0xeb6 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     d80:	0f 2e       	mov	r0, r31
     d82:	f9 e1       	ldi	r31, 0x19	; 25
     d84:	df 2e       	mov	r13, r31
     d86:	f0 2d       	mov	r31, r0
     d88:	16 c0       	rjmp	.+44     	; 0xdb6 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     d8a:	80 3b       	cpi	r24, 0xB0	; 176
     d8c:	f9 e0       	ldi	r31, 0x09	; 9
     d8e:	9f 07       	cpc	r25, r31
     d90:	f1 f0       	breq	.+60     	; 0xdce <usart_init_spi+0x2ba>
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     d94:	0f 2e       	mov	r0, r31
     d96:	f5 e1       	ldi	r31, 0x15	; 21
     d98:	df 2e       	mov	r13, r31
     d9a:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     d9c:	80 3a       	cpi	r24, 0xA0	; 160
     d9e:	3a e0       	ldi	r19, 0x0A	; 10
     da0:	93 07       	cpc	r25, r19
     da2:	49 f4       	brne	.+18     	; 0xdb6 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     da4:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
     da8:	84 fd       	sbrc	r24, 4
     daa:	8a c0       	rjmp	.+276    	; 0xec0 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     dac:	0f 2e       	mov	r0, r31
     dae:	f1 e2       	ldi	r31, 0x21	; 33
     db0:	df 2e       	mov	r13, r31
     db2:	f0 2d       	mov	r31, r0
     db4:	15 c0       	rjmp	.+42     	; 0xde0 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     db6:	80 3a       	cpi	r24, 0xA0	; 160
     db8:	9b 40       	sbci	r25, 0x0B	; 11
     dba:	91 f4       	brne	.+36     	; 0xde0 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     dbc:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
     dc0:	84 fd       	sbrc	r24, 4
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     dc4:	0f 2e       	mov	r0, r31
     dc6:	f9 e2       	ldi	r31, 0x29	; 41
     dc8:	df 2e       	mov	r13, r31
     dca:	f0 2d       	mov	r31, r0
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     dce:	0f 2e       	mov	r0, r31
     dd0:	fd e1       	ldi	r31, 0x1D	; 29
     dd2:	df 2e       	mov	r13, r31
     dd4:	f0 2d       	mov	r31, r0
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
     dd8:	0f 2e       	mov	r0, r31
     dda:	fd e2       	ldi	r31, 0x2D	; 45
     ddc:	df 2e       	mov	r13, r31
     dde:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     de0:	ed 2d       	mov	r30, r13
     de2:	e6 95       	lsr	r30
     de4:	e6 95       	lsr	r30
     de6:	e6 95       	lsr	r30
     de8:	30 e2       	ldi	r19, 0x20	; 32
     dea:	e3 9f       	mul	r30, r19
     dec:	f0 01       	movw	r30, r0
     dee:	11 24       	eor	r1, r1
     df0:	fa 5f       	subi	r31, 0xFA	; 250
     df2:	3d 2d       	mov	r19, r13
     df4:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	03 2e       	mov	r0, r19
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <usart_init_spi+0x2ee>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     e06:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
     e08:	22 30       	cpi	r18, 0x02	; 2
     e0a:	10 f0       	brcs	.+4      	; 0xe10 <usart_init_spi+0x2fc>
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <usart_init_spi+0x2fe>
     e10:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
     e12:	df 01       	movw	r26, r30
     e14:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
     e16:	a3 0f       	add	r26, r19
     e18:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e1a:	9f b7       	in	r25, 0x3f	; 63
     e1c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e1e:	f8 94       	cli
	return flags;
     e20:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
     e22:	2c 91       	ld	r18, X
     e24:	27 70       	andi	r18, 0x07	; 7
     e26:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
     e28:	9c 91       	ld	r25, X
     e2a:	94 2b       	or	r25, r20
     e2c:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e2e:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e30:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     e32:	f7 01       	movw	r30, r14
     e34:	85 81       	ldd	r24, Z+5	; 0x05
     e36:	80 6c       	ori	r24, 0xC0	; 192
     e38:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     e3a:	f8 01       	movw	r30, r16
     e3c:	84 81       	ldd	r24, Z+4	; 0x04
     e3e:	8d 7f       	andi	r24, 0xFD	; 253
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	29 f4       	brne	.+10     	; 0xe4e <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
     e44:	f7 01       	movw	r30, r14
     e46:	85 81       	ldd	r24, Z+5	; 0x05
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <usart_init_spi+0x342>
     e4e:	f7 01       	movw	r30, r14
     e50:	85 81       	ldd	r24, Z+5	; 0x05
     e52:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
     e54:	85 83       	std	Z+5, r24	; 0x05
     e56:	f8 01       	movw	r30, r16
     e58:	85 81       	ldd	r24, Z+5	; 0x05
     e5a:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
     e5c:	29 f0       	breq	.+10     	; 0xe68 <usart_init_spi+0x354>
     e5e:	f7 01       	movw	r30, r14
     e60:	85 81       	ldd	r24, Z+5	; 0x05
     e62:	84 60       	ori	r24, 0x04	; 4
     e64:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <usart_init_spi+0x35c>
     e68:	f7 01       	movw	r30, r14
     e6a:	85 81       	ldd	r24, Z+5	; 0x05
     e6c:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     e6e:	85 83       	std	Z+5, r24	; 0x05
     e70:	f8 01       	movw	r30, r16
     e72:	40 81       	ld	r20, Z
     e74:	51 81       	ldd	r21, Z+1	; 0x01
     e76:	62 81       	ldd	r22, Z+2	; 0x02
     e78:	73 81       	ldd	r23, Z+3	; 0x03
     e7a:	00 e8       	ldi	r16, 0x80	; 128
     e7c:	14 e8       	ldi	r17, 0x84	; 132
     e7e:	2e e1       	ldi	r18, 0x1E	; 30
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	c7 01       	movw	r24, r14
     e84:	16 de       	rcall	.-980    	; 0xab2 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     e86:	f7 01       	movw	r30, r14
     e88:	84 81       	ldd	r24, Z+4	; 0x04
     e8a:	88 60       	ori	r24, 0x08	; 8
     e8c:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     e8e:	84 81       	ldd	r24, Z+4	; 0x04
     e90:	80 61       	ori	r24, 0x10	; 16
     e92:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     e94:	1a c0       	rjmp	.+52     	; 0xeca <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     e96:	f7 01       	movw	r30, r14
     e98:	84 81       	ldd	r24, Z+4	; 0x04
     e9a:	8f 7e       	andi	r24, 0xEF	; 239
     e9c:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     e9e:	f8 01       	movw	r30, r16
     ea0:	24 81       	ldd	r18, Z+4	; 0x04
     ea2:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     ea4:	c7 01       	movw	r24, r14
     ea6:	60 cf       	rjmp	.-320    	; 0xd68 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     ea8:	0f 2e       	mov	r0, r31
     eaa:	f5 e1       	ldi	r31, 0x15	; 21
     eac:	df 2e       	mov	r13, r31
     eae:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     eb0:	80 ea       	ldi	r24, 0xA0	; 160
     eb2:	98 e0       	ldi	r25, 0x08	; 8
     eb4:	6a cf       	rjmp	.-300    	; 0xd8a <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     eb6:	0f 2e       	mov	r0, r31
     eb8:	fd e1       	ldi	r31, 0x1D	; 29
     eba:	df 2e       	mov	r13, r31
     ebc:	f0 2d       	mov	r31, r0
     ebe:	7b cf       	rjmp	.-266    	; 0xdb6 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
     ec0:	0f 2e       	mov	r0, r31
     ec2:	f5 e2       	ldi	r31, 0x25	; 37
     ec4:	df 2e       	mov	r13, r31
     ec6:	f0 2d       	mov	r31, r0
     ec8:	8b cf       	rjmp	.-234    	; 0xde0 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	08 95       	ret

00000edc <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	0b b6       	in	r0, 0x3b	; 59
     ee8:	0f 92       	push	r0
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     f02:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     f06:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     f0a:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <adca_callback>
     f0e:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <adca_callback+0x1>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	19 95       	eicall
}
     f1a:	ff 91       	pop	r31
     f1c:	ef 91       	pop	r30
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	0f 90       	pop	r0
     f34:	0b be       	out	0x3b, r0	; 59
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	0f 90       	pop	r0
     f3c:	1f 90       	pop	r1
     f3e:	18 95       	reti

00000f40 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	11 24       	eor	r1, r1
     f4a:	0b b6       	in	r0, 0x3b	; 59
     f4c:	0f 92       	push	r0
     f4e:	2f 93       	push	r18
     f50:	3f 93       	push	r19
     f52:	4f 93       	push	r20
     f54:	5f 93       	push	r21
     f56:	6f 93       	push	r22
     f58:	7f 93       	push	r23
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	af 93       	push	r26
     f60:	bf 93       	push	r27
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     f66:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     f6a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     f6e:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <adca_callback>
     f72:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <adca_callback+0x1>
     f76:	62 e0       	ldi	r22, 0x02	; 2
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	19 95       	eicall
}
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0b be       	out	0x3b, r0	; 59
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	0b b6       	in	r0, 0x3b	; 59
     fb0:	0f 92       	push	r0
     fb2:	2f 93       	push	r18
     fb4:	3f 93       	push	r19
     fb6:	4f 93       	push	r20
     fb8:	5f 93       	push	r21
     fba:	6f 93       	push	r22
     fbc:	7f 93       	push	r23
     fbe:	8f 93       	push	r24
     fc0:	9f 93       	push	r25
     fc2:	af 93       	push	r26
     fc4:	bf 93       	push	r27
     fc6:	ef 93       	push	r30
     fc8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     fca:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     fce:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     fd2:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <adca_callback>
     fd6:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <adca_callback+0x1>
     fda:	64 e0       	ldi	r22, 0x04	; 4
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	19 95       	eicall
}
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0b be       	out	0x3b, r0	; 59
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	0f 92       	push	r0
    1010:	11 24       	eor	r1, r1
    1012:	0b b6       	in	r0, 0x3b	; 59
    1014:	0f 92       	push	r0
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	5f 93       	push	r21
    101e:	6f 93       	push	r22
    1020:	7f 93       	push	r23
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
    1026:	af 93       	push	r26
    1028:	bf 93       	push	r27
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    102e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1032:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    1036:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <adca_callback>
    103a:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <adca_callback+0x1>
    103e:	68 e0       	ldi	r22, 0x08	; 8
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	19 95       	eicall
}
    1046:	ff 91       	pop	r31
    1048:	ef 91       	pop	r30
    104a:	bf 91       	pop	r27
    104c:	af 91       	pop	r26
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	7f 91       	pop	r23
    1054:	6f 91       	pop	r22
    1056:	5f 91       	pop	r21
    1058:	4f 91       	pop	r20
    105a:	3f 91       	pop	r19
    105c:	2f 91       	pop	r18
    105e:	0f 90       	pop	r0
    1060:	0b be       	out	0x3b, r0	; 59
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	0b b6       	in	r0, 0x3b	; 59
    1078:	0f 92       	push	r0
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1092:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    1096:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    109a:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <adcb_callback>
    109e:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <adcb_callback+0x1>
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	80 e4       	ldi	r24, 0x40	; 64
    10a6:	92 e0       	ldi	r25, 0x02	; 2
    10a8:	19 95       	eicall
}
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0b be       	out	0x3b, r0	; 59
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	0b b6       	in	r0, 0x3b	; 59
    10dc:	0f 92       	push	r0
    10de:	2f 93       	push	r18
    10e0:	3f 93       	push	r19
    10e2:	4f 93       	push	r20
    10e4:	5f 93       	push	r21
    10e6:	6f 93       	push	r22
    10e8:	7f 93       	push	r23
    10ea:	8f 93       	push	r24
    10ec:	9f 93       	push	r25
    10ee:	af 93       	push	r26
    10f0:	bf 93       	push	r27
    10f2:	ef 93       	push	r30
    10f4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    10f6:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    10fa:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    10fe:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <adcb_callback>
    1102:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <adcb_callback+0x1>
    1106:	62 e0       	ldi	r22, 0x02	; 2
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	92 e0       	ldi	r25, 0x02	; 2
    110c:	19 95       	eicall
}
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	7f 91       	pop	r23
    111c:	6f 91       	pop	r22
    111e:	5f 91       	pop	r21
    1120:	4f 91       	pop	r20
    1122:	3f 91       	pop	r19
    1124:	2f 91       	pop	r18
    1126:	0f 90       	pop	r0
    1128:	0b be       	out	0x3b, r0	; 59
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1134:	1f 92       	push	r1
    1136:	0f 92       	push	r0
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	0f 92       	push	r0
    113c:	11 24       	eor	r1, r1
    113e:	0b b6       	in	r0, 0x3b	; 59
    1140:	0f 92       	push	r0
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    115a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    115e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    1162:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <adcb_callback>
    1166:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <adcb_callback+0x1>
    116a:	64 e0       	ldi	r22, 0x04	; 4
    116c:	80 e4       	ldi	r24, 0x40	; 64
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	19 95       	eicall
}
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	bf 91       	pop	r27
    1178:	af 91       	pop	r26
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	7f 91       	pop	r23
    1180:	6f 91       	pop	r22
    1182:	5f 91       	pop	r21
    1184:	4f 91       	pop	r20
    1186:	3f 91       	pop	r19
    1188:	2f 91       	pop	r18
    118a:	0f 90       	pop	r0
    118c:	0b be       	out	0x3b, r0	; 59
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	0b b6       	in	r0, 0x3b	; 59
    11a4:	0f 92       	push	r0
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    11be:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    11c2:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    11c6:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <adcb_callback>
    11ca:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <adcb_callback+0x1>
    11ce:	68 e0       	ldi	r22, 0x08	; 8
    11d0:	80 e4       	ldi	r24, 0x40	; 64
    11d2:	92 e0       	ldi	r25, 0x02	; 2
    11d4:	19 95       	eicall
}
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0b be       	out	0x3b, r0	; 59
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	0f 90       	pop	r0
    11f8:	1f 90       	pop	r1
    11fa:	18 95       	reti

000011fc <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    11fc:	80 3a       	cpi	r24, 0xA0	; 160
    11fe:	28 e0       	ldi	r18, 0x08	; 8
    1200:	92 07       	cpc	r25, r18
    1202:	21 f4       	brne	.+8      	; 0x120c <usart_spi_init+0x10>
    1204:	60 e1       	ldi	r22, 0x10	; 16
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	0b c1       	rjmp	.+534    	; 0x1420 <sysclk_enable_module>
    120a:	08 95       	ret
    120c:	80 3b       	cpi	r24, 0xB0	; 176
    120e:	28 e0       	ldi	r18, 0x08	; 8
    1210:	92 07       	cpc	r25, r18
    1212:	21 f4       	brne	.+8      	; 0x121c <usart_spi_init+0x20>
    1214:	60 e2       	ldi	r22, 0x20	; 32
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	03 c1       	rjmp	.+518    	; 0x1420 <sysclk_enable_module>
    121a:	08 95       	ret
    121c:	80 3a       	cpi	r24, 0xA0	; 160
    121e:	29 e0       	ldi	r18, 0x09	; 9
    1220:	92 07       	cpc	r25, r18
    1222:	21 f4       	brne	.+8      	; 0x122c <usart_spi_init+0x30>
    1224:	60 e1       	ldi	r22, 0x10	; 16
    1226:	84 e0       	ldi	r24, 0x04	; 4
    1228:	fb c0       	rjmp	.+502    	; 0x1420 <sysclk_enable_module>
    122a:	08 95       	ret
    122c:	80 3b       	cpi	r24, 0xB0	; 176
    122e:	29 e0       	ldi	r18, 0x09	; 9
    1230:	92 07       	cpc	r25, r18
    1232:	21 f4       	brne	.+8      	; 0x123c <usart_spi_init+0x40>
    1234:	60 e2       	ldi	r22, 0x20	; 32
    1236:	84 e0       	ldi	r24, 0x04	; 4
    1238:	f3 c0       	rjmp	.+486    	; 0x1420 <sysclk_enable_module>
    123a:	08 95       	ret
    123c:	80 3a       	cpi	r24, 0xA0	; 160
    123e:	2a e0       	ldi	r18, 0x0A	; 10
    1240:	92 07       	cpc	r25, r18
    1242:	21 f4       	brne	.+8      	; 0x124c <usart_spi_init+0x50>
    1244:	60 e1       	ldi	r22, 0x10	; 16
    1246:	85 e0       	ldi	r24, 0x05	; 5
    1248:	eb c0       	rjmp	.+470    	; 0x1420 <sysclk_enable_module>
    124a:	08 95       	ret
    124c:	80 3a       	cpi	r24, 0xA0	; 160
    124e:	9b 40       	sbci	r25, 0x0B	; 11
    1250:	19 f4       	brne	.+6      	; 0x1258 <usart_spi_init+0x5c>
    1252:	60 e1       	ldi	r22, 0x10	; 16
    1254:	86 e0       	ldi	r24, 0x06	; 6
    1256:	e4 c0       	rjmp	.+456    	; 0x1420 <sysclk_enable_module>
    1258:	08 95       	ret

0000125a <usart_spi_setup_device>:
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	00 d0       	rcall	.+0      	; 0x1264 <usart_spi_setup_device+0xa>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <usart_spi_setup_device+0xc>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	09 83       	std	Y+1, r16	; 0x01
    126c:	1a 83       	std	Y+2, r17	; 0x02
    126e:	2b 83       	std	Y+3, r18	; 0x03
    1270:	3c 83       	std	Y+4, r19	; 0x04
    1272:	4d 83       	std	Y+5, r20	; 0x05
    1274:	1e 82       	std	Y+6, r1	; 0x06
    1276:	be 01       	movw	r22, r28
    1278:	6f 5f       	subi	r22, 0xFF	; 255
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	4b dc       	rcall	.-1898   	; 0xb14 <usart_init_spi>
    127e:	26 96       	adiw	r28, 0x06	; 6
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	08 95       	ret

0000128e <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    128e:	fb 01       	movw	r30, r22
    1290:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1292:	e8 2f       	mov	r30, r24
    1294:	e6 95       	lsr	r30
    1296:	e6 95       	lsr	r30
    1298:	e6 95       	lsr	r30
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	e4 9f       	mul	r30, r20
    129e:	f0 01       	movw	r30, r0
    12a0:	11 24       	eor	r1, r1
    12a2:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    12a4:	87 70       	andi	r24, 0x07	; 7
    12a6:	21 e0       	ldi	r18, 0x01	; 1
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	a9 01       	movw	r20, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <usart_spi_select_device+0x24>
    12ae:	44 0f       	add	r20, r20
    12b0:	55 1f       	adc	r21, r21
    12b2:	8a 95       	dec	r24
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    12b6:	46 83       	std	Z+6, r20	; 0x06
    12b8:	08 95       	ret

000012ba <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    12ba:	fb 01       	movw	r30, r22
    12bc:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    12be:	e8 2f       	mov	r30, r24
    12c0:	e6 95       	lsr	r30
    12c2:	e6 95       	lsr	r30
    12c4:	e6 95       	lsr	r30
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	e4 9f       	mul	r30, r20
    12ca:	f0 01       	movw	r30, r0
    12cc:	11 24       	eor	r1, r1
    12ce:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    12d0:	87 70       	andi	r24, 0x07	; 7
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <usart_spi_deselect_device+0x24>
    12da:	44 0f       	add	r20, r20
    12dc:	55 1f       	adc	r21, r21
    12de:	8a 95       	dec	r24
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    12e2:	45 83       	std	Z+5, r20	; 0x05
    12e4:	08 95       	ret

000012e6 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    12e6:	80 93 2e 22 	sts	0x222E, r24	; 0x80222e <fbpointer>
    12ea:	90 93 2f 22 	sts	0x222F, r25	; 0x80222f <fbpointer+0x1>
    12ee:	08 95       	ret

000012f0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    12f0:	20 91 2e 22 	lds	r18, 0x222E	; 0x80222e <fbpointer>
    12f4:	30 91 2f 22 	lds	r19, 0x222F	; 0x80222f <fbpointer+0x1>
    12f8:	90 e8       	ldi	r25, 0x80	; 128
    12fa:	89 9f       	mul	r24, r25
    12fc:	20 0d       	add	r18, r0
    12fe:	31 1d       	adc	r19, r1
    1300:	11 24       	eor	r1, r1
    1302:	f9 01       	movw	r30, r18
    1304:	e6 0f       	add	r30, r22
    1306:	f1 1d       	adc	r31, r1
    1308:	40 83       	st	Z, r20
    130a:	08 95       	ret

0000130c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    130c:	20 91 2e 22 	lds	r18, 0x222E	; 0x80222e <fbpointer>
    1310:	30 91 2f 22 	lds	r19, 0x222F	; 0x80222f <fbpointer+0x1>
    1314:	90 e8       	ldi	r25, 0x80	; 128
    1316:	89 9f       	mul	r24, r25
    1318:	20 0d       	add	r18, r0
    131a:	31 1d       	adc	r19, r1
    131c:	11 24       	eor	r1, r1
    131e:	f9 01       	movw	r30, r18
    1320:	e6 0f       	add	r30, r22
    1322:	f1 1d       	adc	r31, r1
}
    1324:	80 81       	ld	r24, Z
    1326:	08 95       	ret

00001328 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	e4 2f       	mov	r30, r20
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	e8 0f       	add	r30, r24
    1338:	f1 1d       	adc	r31, r1
    133a:	e1 38       	cpi	r30, 0x81	; 129
    133c:	f1 05       	cpc	r31, r1
    133e:	1c f0       	brlt	.+6      	; 0x1346 <gfx_mono_generic_draw_horizontal_line+0x1e>
    1340:	c0 e8       	ldi	r28, 0x80	; 128
    1342:	4c 2f       	mov	r20, r28
    1344:	48 1b       	sub	r20, r24
    1346:	44 23       	and	r20, r20
    1348:	09 f4       	brne	.+2      	; 0x134c <gfx_mono_generic_draw_horizontal_line+0x24>
    134a:	4a c0       	rjmp	.+148    	; 0x13e0 <gfx_mono_generic_draw_horizontal_line+0xb8>
    134c:	d6 2f       	mov	r29, r22
    134e:	d6 95       	lsr	r29
    1350:	d6 95       	lsr	r29
    1352:	d6 95       	lsr	r29
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	98 e0       	ldi	r25, 0x08	; 8
    1358:	d9 9f       	mul	r29, r25
    135a:	60 19       	sub	r22, r0
    135c:	71 09       	sbc	r23, r1
    135e:	11 24       	eor	r1, r1
    1360:	e1 e0       	ldi	r30, 0x01	; 1
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	df 01       	movw	r26, r30
    1366:	02 c0       	rjmp	.+4      	; 0x136c <gfx_mono_generic_draw_horizontal_line+0x44>
    1368:	aa 0f       	add	r26, r26
    136a:	bb 1f       	adc	r27, r27
    136c:	6a 95       	dec	r22
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <gfx_mono_generic_draw_horizontal_line+0x40>
    1370:	fa 2e       	mov	r15, r26
    1372:	21 30       	cpi	r18, 0x01	; 1
    1374:	21 f0       	breq	.+8      	; 0x137e <gfx_mono_generic_draw_horizontal_line+0x56>
    1376:	98 f0       	brcs	.+38     	; 0x139e <gfx_mono_generic_draw_horizontal_line+0x76>
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	19 f1       	breq	.+70     	; 0x13c2 <gfx_mono_generic_draw_horizontal_line+0x9a>
    137c:	31 c0       	rjmp	.+98     	; 0x13e0 <gfx_mono_generic_draw_horizontal_line+0xb8>
    137e:	c4 2f       	mov	r28, r20
    1380:	1f ef       	ldi	r17, 0xFF	; 255
    1382:	18 0f       	add	r17, r24
    1384:	01 2f       	mov	r16, r17
    1386:	0c 0f       	add	r16, r28
    1388:	60 2f       	mov	r22, r16
    138a:	8d 2f       	mov	r24, r29
    138c:	90 db       	rcall	.-2272   	; 0xaae <gfx_mono_st7565r_get_byte>
    138e:	4f 2d       	mov	r20, r15
    1390:	48 2b       	or	r20, r24
    1392:	60 2f       	mov	r22, r16
    1394:	8d 2f       	mov	r24, r29
    1396:	6c da       	rcall	.-2856   	; 0x870 <gfx_mono_st7565r_put_byte>
    1398:	c1 50       	subi	r28, 0x01	; 1
    139a:	a1 f7       	brne	.-24     	; 0x1384 <gfx_mono_generic_draw_horizontal_line+0x5c>
    139c:	21 c0       	rjmp	.+66     	; 0x13e0 <gfx_mono_generic_draw_horizontal_line+0xb8>
    139e:	c4 2f       	mov	r28, r20
    13a0:	1f ef       	ldi	r17, 0xFF	; 255
    13a2:	18 0f       	add	r17, r24
    13a4:	fa 2e       	mov	r15, r26
    13a6:	f0 94       	com	r15
    13a8:	01 2f       	mov	r16, r17
    13aa:	0c 0f       	add	r16, r28
    13ac:	60 2f       	mov	r22, r16
    13ae:	8d 2f       	mov	r24, r29
    13b0:	7e db       	rcall	.-2308   	; 0xaae <gfx_mono_st7565r_get_byte>
    13b2:	4f 2d       	mov	r20, r15
    13b4:	48 23       	and	r20, r24
    13b6:	60 2f       	mov	r22, r16
    13b8:	8d 2f       	mov	r24, r29
    13ba:	5a da       	rcall	.-2892   	; 0x870 <gfx_mono_st7565r_put_byte>
    13bc:	c1 50       	subi	r28, 0x01	; 1
    13be:	a1 f7       	brne	.-24     	; 0x13a8 <gfx_mono_generic_draw_horizontal_line+0x80>
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <gfx_mono_generic_draw_horizontal_line+0xb8>
    13c2:	c4 2f       	mov	r28, r20
    13c4:	1f ef       	ldi	r17, 0xFF	; 255
    13c6:	18 0f       	add	r17, r24
    13c8:	01 2f       	mov	r16, r17
    13ca:	0c 0f       	add	r16, r28
    13cc:	60 2f       	mov	r22, r16
    13ce:	8d 2f       	mov	r24, r29
    13d0:	6e db       	rcall	.-2340   	; 0xaae <gfx_mono_st7565r_get_byte>
    13d2:	4f 2d       	mov	r20, r15
    13d4:	48 27       	eor	r20, r24
    13d6:	60 2f       	mov	r22, r16
    13d8:	8d 2f       	mov	r24, r29
    13da:	4a da       	rcall	.-2924   	; 0x870 <gfx_mono_st7565r_put_byte>
    13dc:	c1 50       	subi	r28, 0x01	; 1
    13de:	a1 f7       	brne	.-24     	; 0x13c8 <gfx_mono_generic_draw_horizontal_line+0xa0>
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	08 95       	ret

000013ec <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
	if (height == 0) {
    13f6:	22 23       	and	r18, r18
    13f8:	69 f0       	breq	.+26     	; 0x1414 <gfx_mono_generic_draw_filled_rect+0x28>
    13fa:	f4 2e       	mov	r15, r20
    13fc:	18 2f       	mov	r17, r24
    13fe:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    1400:	df ef       	ldi	r29, 0xFF	; 255
    1402:	d6 0f       	add	r29, r22
    1404:	6d 2f       	mov	r22, r29
    1406:	6c 0f       	add	r22, r28
    1408:	20 2f       	mov	r18, r16
    140a:	4f 2d       	mov	r20, r15
    140c:	81 2f       	mov	r24, r17
    140e:	8c df       	rcall	.-232    	; 0x1328 <gfx_mono_generic_draw_horizontal_line>
    1410:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    1412:	c1 f7       	brne	.-16     	; 0x1404 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	08 95       	ret

00001420 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	1f 92       	push	r1
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    142a:	9f b7       	in	r25, 0x3f	; 63
    142c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    142e:	f8 94       	cli
	return flags;
    1430:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1432:	e8 2f       	mov	r30, r24
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	e0 59       	subi	r30, 0x90	; 144
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	60 95       	com	r22
    143c:	80 81       	ld	r24, Z
    143e:	68 23       	and	r22, r24
    1440:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1442:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1444:	0f 90       	pop	r0
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    144c:	af 92       	push	r10
    144e:	bf 92       	push	r11
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	c8 2f       	mov	r28, r24
    1462:	e6 2e       	mov	r14, r22
    1464:	b4 2e       	mov	r11, r20
    1466:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1468:	00 e0       	ldi	r16, 0x00	; 0
    146a:	f9 01       	movw	r30, r18
    146c:	24 81       	ldd	r18, Z+4	; 0x04
    146e:	43 81       	ldd	r20, Z+3	; 0x03
    1470:	6b 2d       	mov	r22, r11
    1472:	8e 2d       	mov	r24, r14
    1474:	bb df       	rcall	.-138    	; 0x13ec <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1476:	f6 01       	movw	r30, r12
    1478:	80 81       	ld	r24, Z
    147a:	81 11       	cpse	r24, r1
    147c:	39 c0       	rjmp	.+114    	; 0x14f0 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    147e:	83 81       	ldd	r24, Z+3	; 0x03
    1480:	28 2f       	mov	r18, r24
    1482:	26 95       	lsr	r18
    1484:	26 95       	lsr	r18
    1486:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1488:	87 70       	andi	r24, 0x07	; 7
    148a:	09 f0       	breq	.+2      	; 0x148e <gfx_mono_draw_char+0x42>
		char_row_size++;
    148c:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    148e:	f6 01       	movw	r30, r12
    1490:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1492:	8c 2f       	mov	r24, r28
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	35 81       	ldd	r19, Z+5	; 0x05
    1498:	83 1b       	sub	r24, r19
    149a:	91 09       	sbc	r25, r1
    149c:	2a 9d       	mul	r18, r10
    149e:	90 01       	movw	r18, r0
    14a0:	11 24       	eor	r1, r1
    14a2:	82 9f       	mul	r24, r18
    14a4:	a0 01       	movw	r20, r0
    14a6:	83 9f       	mul	r24, r19
    14a8:	50 0d       	add	r21, r0
    14aa:	92 9f       	mul	r25, r18
    14ac:	50 0d       	add	r21, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	01 81       	ldd	r16, Z+1	; 0x01
    14b2:	12 81       	ldd	r17, Z+2	; 0x02
    14b4:	04 0f       	add	r16, r20
    14b6:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    14b8:	f6 01       	movw	r30, r12
    14ba:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    14bc:	ff 20       	and	r15, r15
    14be:	a1 f0       	breq	.+40     	; 0x14e8 <gfx_mono_draw_char+0x9c>
    14c0:	d0 e0       	ldi	r29, 0x00	; 0
    14c2:	c0 e0       	ldi	r28, 0x00	; 0
    14c4:	8e 2d       	mov	r24, r14
    14c6:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    14c8:	9c 2f       	mov	r25, r28
    14ca:	97 70       	andi	r25, 0x07	; 7
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    14ce:	f8 01       	movw	r30, r16
    14d0:	d4 91       	lpm	r29, Z
				glyph_data++;
    14d2:	0f 5f       	subi	r16, 0xFF	; 255
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    14d6:	dd 23       	and	r29, r29
    14d8:	1c f4       	brge	.+6      	; 0x14e0 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	6b 2d       	mov	r22, r11
    14de:	b1 da       	rcall	.-2718   	; 0xa42 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    14e0:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    14e2:	cf 5f       	subi	r28, 0xFF	; 255
    14e4:	fc 12       	cpse	r15, r28
    14e6:	ee cf       	rjmp	.-36     	; 0x14c4 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    14e8:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    14ea:	aa 94       	dec	r10
	} while (rows_left > 0);
    14ec:	a1 10       	cpse	r10, r1
    14ee:	e4 cf       	rjmp	.-56     	; 0x14b8 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	bf 90       	pop	r11
    1502:	af 90       	pop	r10
    1504:	08 95       	ret

00001506 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1506:	df 92       	push	r13
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	d6 2e       	mov	r13, r22
    1516:	04 2f       	mov	r16, r20
    1518:	79 01       	movw	r14, r18
    151a:	ec 01       	movw	r28, r24
    151c:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    151e:	89 91       	ld	r24, Y+
    1520:	8a 30       	cpi	r24, 0x0A	; 10
    1522:	31 f4       	brne	.+12     	; 0x1530 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    1524:	f7 01       	movw	r30, r14
    1526:	84 81       	ldd	r24, Z+4	; 0x04
    1528:	8f 5f       	subi	r24, 0xFF	; 255
    152a:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    152c:	1d 2d       	mov	r17, r13
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    1530:	8d 30       	cpi	r24, 0x0D	; 13
    1532:	39 f0       	breq	.+14     	; 0x1542 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1534:	97 01       	movw	r18, r14
    1536:	40 2f       	mov	r20, r16
    1538:	61 2f       	mov	r22, r17
    153a:	88 df       	rcall	.-240    	; 0x144c <gfx_mono_draw_char>
			x += font->width;
    153c:	f7 01       	movw	r30, r14
    153e:	83 81       	ldd	r24, Z+3	; 0x03
    1540:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1542:	88 81       	ld	r24, Y
    1544:	81 11       	cpse	r24, r1
    1546:	eb cf       	rjmp	.-42     	; 0x151e <gfx_mono_draw_string+0x18>
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	08 95       	ret

00001558 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1562:	c6 2f       	mov	r28, r22
    1564:	d0 e0       	ldi	r29, 0x00	; 0
    1566:	de 01       	movw	r26, r28
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <ioport_configure_port_pin+0x18>
    156c:	b5 95       	asr	r27
    156e:	a7 95       	ror	r26
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <ioport_configure_port_pin+0x14>
    1574:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1576:	50 8b       	std	Z+16, r21	; 0x10
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    157e:	28 30       	cpi	r18, 0x08	; 8
    1580:	31 05       	cpc	r19, r1
    1582:	89 f7       	brne	.-30     	; 0x1566 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1584:	40 ff       	sbrs	r20, 0
    1586:	0a c0       	rjmp	.+20     	; 0x159c <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1588:	41 ff       	sbrs	r20, 1
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    158c:	fc 01       	movw	r30, r24
    158e:	65 83       	std	Z+5, r22	; 0x05
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1592:	fc 01       	movw	r30, r24
    1594:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1596:	fc 01       	movw	r30, r24
    1598:	61 83       	std	Z+1, r22	; 0x01
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    159c:	fc 01       	movw	r30, r24
    159e:	62 83       	std	Z+2, r22	; 0x02
	}
}
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    15a6:	43 e0       	ldi	r20, 0x03	; 3
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	80 ee       	ldi	r24, 0xE0	; 224
    15ae:	97 e0       	ldi	r25, 0x07	; 7
    15b0:	d3 df       	rcall	.-90     	; 0x1558 <ioport_configure_port_pin>
    15b2:	43 e0       	ldi	r20, 0x03	; 3
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	62 e0       	ldi	r22, 0x02	; 2
    15b8:	80 ee       	ldi	r24, 0xE0	; 224
    15ba:	97 e0       	ldi	r25, 0x07	; 7
    15bc:	cd df       	rcall	.-102    	; 0x1558 <ioport_configure_port_pin>
    15be:	43 e0       	ldi	r20, 0x03	; 3
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	60 e1       	ldi	r22, 0x10	; 16
    15c4:	80 e6       	ldi	r24, 0x60	; 96
    15c6:	96 e0       	ldi	r25, 0x06	; 6
    15c8:	c7 df       	rcall	.-114    	; 0x1558 <ioport_configure_port_pin>
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	50 e4       	ldi	r21, 0x40	; 64
    15ce:	60 e2       	ldi	r22, 0x20	; 32
    15d0:	80 e6       	ldi	r24, 0x60	; 96
    15d2:	96 e0       	ldi	r25, 0x06	; 6
    15d4:	c1 df       	rcall	.-126    	; 0x1558 <ioport_configure_port_pin>
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	5b e1       	ldi	r21, 0x1B	; 27
    15da:	60 e2       	ldi	r22, 0x20	; 32
    15dc:	80 e8       	ldi	r24, 0x80	; 128
    15de:	96 e0       	ldi	r25, 0x06	; 6
    15e0:	bb df       	rcall	.-138    	; 0x1558 <ioport_configure_port_pin>
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	5b e1       	ldi	r21, 0x1B	; 27
    15e6:	62 e0       	ldi	r22, 0x02	; 2
    15e8:	80 ea       	ldi	r24, 0xA0	; 160
    15ea:	96 e0       	ldi	r25, 0x06	; 6
    15ec:	b5 df       	rcall	.-150    	; 0x1558 <ioport_configure_port_pin>
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	5b e1       	ldi	r21, 0x1B	; 27
    15f2:	64 e0       	ldi	r22, 0x04	; 4
    15f4:	80 ea       	ldi	r24, 0xA0	; 160
    15f6:	96 e0       	ldi	r25, 0x06	; 6
    15f8:	af df       	rcall	.-162    	; 0x1558 <ioport_configure_port_pin>
    15fa:	43 e0       	ldi	r20, 0x03	; 3
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	62 e0       	ldi	r22, 0x02	; 2
    1600:	80 e6       	ldi	r24, 0x60	; 96
    1602:	96 e0       	ldi	r25, 0x06	; 6
    1604:	a9 df       	rcall	.-174    	; 0x1558 <ioport_configure_port_pin>
    1606:	43 e0       	ldi	r20, 0x03	; 3
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	68 e0       	ldi	r22, 0x08	; 8
    160c:	80 e6       	ldi	r24, 0x60	; 96
    160e:	96 e0       	ldi	r25, 0x06	; 6
    1610:	a3 df       	rcall	.-186    	; 0x1558 <ioport_configure_port_pin>
    1612:	43 e0       	ldi	r20, 0x03	; 3
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	68 e0       	ldi	r22, 0x08	; 8
    1618:	80 ea       	ldi	r24, 0xA0	; 160
    161a:	96 e0       	ldi	r25, 0x06	; 6
    161c:	9d df       	rcall	.-198    	; 0x1558 <ioport_configure_port_pin>
    161e:	43 e0       	ldi	r20, 0x03	; 3
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	80 e6       	ldi	r24, 0x60	; 96
    1626:	96 e0       	ldi	r25, 0x06	; 6
    1628:	97 df       	rcall	.-210    	; 0x1558 <ioport_configure_port_pin>
    162a:	43 e0       	ldi	r20, 0x03	; 3
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	68 e0       	ldi	r22, 0x08	; 8
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	96 e0       	ldi	r25, 0x06	; 6
    1634:	91 df       	rcall	.-222    	; 0x1558 <ioport_configure_port_pin>
    1636:	41 e0       	ldi	r20, 0x01	; 1
    1638:	50 e0       	ldi	r21, 0x00	; 0
    163a:	60 e1       	ldi	r22, 0x10	; 16
    163c:	80 e8       	ldi	r24, 0x80	; 128
    163e:	96 e0       	ldi	r25, 0x06	; 6
    1640:	8b df       	rcall	.-234    	; 0x1558 <ioport_configure_port_pin>
    1642:	43 e0       	ldi	r20, 0x03	; 3
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	62 e0       	ldi	r22, 0x02	; 2
    1648:	80 e6       	ldi	r24, 0x60	; 96
    164a:	96 e0       	ldi	r25, 0x06	; 6
    164c:	85 df       	rcall	.-246    	; 0x1558 <ioport_configure_port_pin>
    164e:	43 e0       	ldi	r20, 0x03	; 3
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	68 e0       	ldi	r22, 0x08	; 8
    1654:	80 e6       	ldi	r24, 0x60	; 96
    1656:	96 e0       	ldi	r25, 0x06	; 6
    1658:	7f df       	rcall	.-258    	; 0x1558 <ioport_configure_port_pin>
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	64 e0       	ldi	r22, 0x04	; 4
    1660:	80 e6       	ldi	r24, 0x60	; 96
    1662:	96 e0       	ldi	r25, 0x06	; 6
    1664:	79 df       	rcall	.-270    	; 0x1558 <ioport_configure_port_pin>
    1666:	43 e0       	ldi	r20, 0x03	; 3
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	60 e1       	ldi	r22, 0x10	; 16
    166c:	80 ea       	ldi	r24, 0xA0	; 160
    166e:	96 e0       	ldi	r25, 0x06	; 6
    1670:	73 df       	rcall	.-282    	; 0x1558 <ioport_configure_port_pin>
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	96 e0       	ldi	r25, 0x06	; 6
    167c:	6d df       	rcall	.-294    	; 0x1558 <ioport_configure_port_pin>
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	64 e0       	ldi	r22, 0x04	; 4
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	96 e0       	ldi	r25, 0x06	; 6
    1688:	67 df       	rcall	.-306    	; 0x1558 <ioport_configure_port_pin>
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	62 e0       	ldi	r22, 0x02	; 2
    1690:	80 e2       	ldi	r24, 0x20	; 32
    1692:	96 e0       	ldi	r25, 0x06	; 6
    1694:	61 df       	rcall	.-318    	; 0x1558 <ioport_configure_port_pin>
    1696:	43 e0       	ldi	r20, 0x03	; 3
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	68 e0       	ldi	r22, 0x08	; 8
    169c:	80 e4       	ldi	r24, 0x40	; 64
    169e:	96 e0       	ldi	r25, 0x06	; 6
    16a0:	5b df       	rcall	.-330    	; 0x1558 <ioport_configure_port_pin>
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	64 e0       	ldi	r22, 0x04	; 4
    16a8:	80 e4       	ldi	r24, 0x40	; 64
    16aa:	96 e0       	ldi	r25, 0x06	; 6
    16ac:	55 df       	rcall	.-342    	; 0x1558 <ioport_configure_port_pin>
    16ae:	43 e0       	ldi	r20, 0x03	; 3
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	68 e0       	ldi	r22, 0x08	; 8
    16b4:	80 e6       	ldi	r24, 0x60	; 96
    16b6:	96 e0       	ldi	r25, 0x06	; 6
    16b8:	4f df       	rcall	.-354    	; 0x1558 <ioport_configure_port_pin>
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	64 e0       	ldi	r22, 0x04	; 4
    16c0:	80 e6       	ldi	r24, 0x60	; 96
    16c2:	96 e0       	ldi	r25, 0x06	; 6
    16c4:	49 df       	rcall	.-366    	; 0x1558 <ioport_configure_port_pin>
    16c6:	43 e0       	ldi	r20, 0x03	; 3
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	68 e0       	ldi	r22, 0x08	; 8
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	96 e0       	ldi	r25, 0x06	; 6
    16d0:	43 df       	rcall	.-378    	; 0x1558 <ioport_configure_port_pin>
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	64 e0       	ldi	r22, 0x04	; 4
    16d8:	80 e8       	ldi	r24, 0x80	; 128
    16da:	96 e0       	ldi	r25, 0x06	; 6
    16dc:	3d cf       	rjmp	.-390    	; 0x1558 <ioport_configure_port_pin>
    16de:	08 95       	ret

000016e0 <__portable_avr_delay_cycles>:

static char strbuf[128];

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
	return ((uint32_t)(x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;
}
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <__portable_avr_delay_cycles+0xa>
    16e2:	61 50       	subi	r22, 0x01	; 1
    16e4:	71 09       	sbc	r23, r1
    16e6:	81 09       	sbc	r24, r1
    16e8:	91 09       	sbc	r25, r1
    16ea:	61 15       	cp	r22, r1
    16ec:	71 05       	cpc	r23, r1
    16ee:	81 05       	cpc	r24, r1
    16f0:	91 05       	cpc	r25, r1
    16f2:	b9 f7       	brne	.-18     	; 0x16e2 <__portable_avr_delay_cycles+0x2>
    16f4:	08 95       	ret

000016f6 <adc_init>:


// Function to initialize ADC for potentiometer reading
void adc_init() {
	ADCB.CTRLA = 0x01;
    16f6:	e0 e4       	ldi	r30, 0x40	; 64
    16f8:	f2 e0       	ldi	r31, 0x02	; 2
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	80 83       	st	Z, r24
	ADCB.CTRLB = 0x00;
    16fe:	11 82       	std	Z+1, r1	; 0x01
	ADCB.REFCTRL = 0x02;
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	82 83       	std	Z+2, r24	; 0x02
	ADCB.PRESCALER = 0b0000111;
    1704:	87 e0       	ldi	r24, 0x07	; 7
    1706:	84 83       	std	Z+4, r24	; 0x04
    1708:	08 95       	ret

0000170a <read_adc_ch0>:
}

// Read value from ADC
uint16_t read_adc_ch0() {
	// Start a conversion on ADC channel 0
	ADCB.CH0.MUXCTRL = 0x00; // Select ADC pin 0
    170a:	e0 e4       	ldi	r30, 0x40	; 64
    170c:	f2 e0       	ldi	r31, 0x02	; 2
    170e:	11 a2       	std	Z+33, r1	; 0x21
	ADCB.CH0.CTRL |= 0x81;
    1710:	80 a1       	ldd	r24, Z+32	; 0x20
    1712:	81 68       	ori	r24, 0x81	; 129
    1714:	80 a3       	std	Z+32, r24	; 0x20

	// Wait for conversion to complete
	while (!(ADCB.INTFLAGS & 0x01)); // Wait for interrupt flag
    1716:	86 81       	ldd	r24, Z+6	; 0x06
    1718:	80 ff       	sbrs	r24, 0
    171a:	fd cf       	rjmp	.-6      	; 0x1716 <read_adc_ch0+0xc>

	// Read the conversion result
	uint16_t result = ADCB.CH0RES;
    171c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__TEXT_REGION_LENGTH__+0x700250>
    1720:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__TEXT_REGION_LENGTH__+0x700251>
	
	return result;
}
    1724:	08 95       	ret

00001726 <PWM_Init>:

void PWM_Init(void)
{
	/* Set output */
	PORTC.DIR |= PIN0_bm;
    1726:	e0 e4       	ldi	r30, 0x40	; 64
    1728:	f6 e0       	ldi	r31, 0x06	; 6
    172a:	80 81       	ld	r24, Z
    172c:	81 60       	ori	r24, 0x01	; 1
    172e:	80 83       	st	Z, r24

	/* Set Register */
	TCC0.CTRLA = PIN1_bm;;
    1730:	e0 e0       	ldi	r30, 0x00	; 0
    1732:	f8 e0       	ldi	r31, 0x08	; 8
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	80 83       	st	Z, r24
	TCC0.CTRLB = (PIN4_bm) | (PIN2_bm) | (PIN1_bm);
    1738:	86 e1       	ldi	r24, 0x16	; 22
    173a:	81 83       	std	Z+1, r24	; 0x01
	
	/* Set Period */
	TCC0.PER = 1000;
    173c:	88 ee       	ldi	r24, 0xE8	; 232
    173e:	93 e0       	ldi	r25, 0x03	; 3
    1740:	86 a3       	std	Z+38, r24	; 0x26
    1742:	97 a3       	std	Z+39, r25	; 0x27

	/* Set Compare Register value for initial position (0 degrees) */
	TCC0.CCA = 50;
    1744:	82 e3       	ldi	r24, 0x32	; 50
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	80 a7       	std	Z+40, r24	; 0x28
    174a:	91 a7       	std	Z+41, r25	; 0x29
    174c:	08 95       	ret

0000174e <main>:
}

int main(void) {
	/* Insert system clock initialization code here */
	board_init();
    174e:	2b df       	rcall	.-426    	; 0x15a6 <board_init>
	gfx_mono_init();
    1750:	36 d9       	rcall	.-3476   	; 0x9be <gfx_mono_st7565r_init>
    1752:	20 e0       	ldi	r18, 0x00	; 0
	
	gfx_mono_draw_string("RaihanRadityaRafinal ",0, 0, &sysfont);
    1754:	30 e2       	ldi	r19, 0x20	; 32
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	87 e0       	ldi	r24, 0x07	; 7
    175c:	90 e2       	ldi	r25, 0x20	; 32
    175e:	d3 de       	rcall	.-602    	; 0x1506 <gfx_mono_draw_string>
	
	/* Initialize PWM for servo control */
	PWM_Init();
    1760:	e2 df       	rcall	.-60     	; 0x1726 <PWM_Init>
    1762:	c9 df       	rcall	.-110    	; 0x16f6 <adc_init>
	
	/* Initialize ADC for potentiometer */
	adc_init();
    1764:	80 e1       	ldi	r24, 0x10	; 16
    1766:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    176a:	0f 2e       	mov	r0, r31
    176c:	22 24       	eor	r2, r2
#include <board.h>

static char strbuf[128];

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
	return ((uint32_t)(x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;
    176e:	2a 94       	dec	r2
    1770:	ff e0       	ldi	r31, 0x0F	; 15
    1772:	3f 2e       	mov	r3, r31
    1774:	41 2c       	mov	r4, r1
    1776:	51 2c       	mov	r5, r1
    1778:	f0 2d       	mov	r31, r0
    177a:	81 2c       	mov	r8, r1
    177c:	68 94       	set
		
		// Map ADC value (0-4095) to PWM duty cycle (50 to 84)
		duty_cycle = map(adc_result, 0, 4095, 50, 84);
		
		// Update PWM duty cycle to control servo position
		TCC0.CCA = duty_cycle * 10;
    177e:	99 24       	eor	r9, r9
    1780:	93 f8       	bld	r9, 3
    1782:	0f 2e       	mov	r0, r31
    1784:	fd e1       	ldi	r31, 0x1D	; 29
		
		// Display the ADC and Duty Cycle value on LCD
		snprintf(strbuf, sizeof(strbuf), "ADC: %d", adc_result);
    1786:	af 2e       	mov	r10, r31
    1788:	f0 e2       	ldi	r31, 0x20	; 32
    178a:	bf 2e       	mov	r11, r31
    178c:	f0 2d       	mov	r31, r0
    178e:	68 94       	set
    1790:	77 24       	eor	r7, r7
    1792:	77 f8       	bld	r7, 7
    1794:	00 e3       	ldi	r16, 0x30	; 48
    1796:	12 e2       	ldi	r17, 0x22	; 34
    1798:	0f 2e       	mov	r0, r31
    179a:	f5 e2       	ldi	r31, 0x25	; 37
		gfx_mono_draw_string(strbuf, 0, 8, &sysfont);
		
		snprintf(strbuf, sizeof(strbuf), "Duty: %d", duty_cycle);
    179c:	cf 2e       	mov	r12, r31
    179e:	f0 e2       	ldi	r31, 0x20	; 32
    17a0:	df 2e       	mov	r13, r31
    17a2:	f0 2d       	mov	r31, r0
    17a4:	b2 df       	rcall	.-156    	; 0x170a <read_adc_ch0>
	
	uint16_t duty_cycle = 1; // Start at 0 degrees (1ms pulse)
	
	while (1) {
		// Read ADC value from potentiometer
		uint16_t adc_result = read_adc_ch0();
    17a6:	7c 01       	movw	r14, r24
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
#include <board.h>

static char strbuf[128];

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
	return ((uint32_t)(x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;
    17ac:	ac 01       	movw	r20, r24
    17ae:	bd 01       	movw	r22, r26
    17b0:	44 0f       	add	r20, r20
    17b2:	55 1f       	adc	r21, r21
    17b4:	66 1f       	adc	r22, r22
    17b6:	77 1f       	adc	r23, r23
    17b8:	44 0f       	add	r20, r20
    17ba:	55 1f       	adc	r21, r21
    17bc:	66 1f       	adc	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	44 0f       	add	r20, r20
    17c2:	55 1f       	adc	r21, r21
    17c4:	66 1f       	adc	r22, r22
    17c6:	77 1f       	adc	r23, r23
    17c8:	44 0f       	add	r20, r20
    17ca:	55 1f       	adc	r21, r21
    17cc:	66 1f       	adc	r22, r22
    17ce:	77 1f       	adc	r23, r23
    17d0:	84 0f       	add	r24, r20
    17d2:	95 1f       	adc	r25, r21
    17d4:	a6 1f       	adc	r26, r22
    17d6:	b7 1f       	adc	r27, r23
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	66 0f       	add	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	88 1f       	adc	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	a2 01       	movw	r20, r4
    17e6:	91 01       	movw	r18, r2
    17e8:	3a d0       	rcall	.+116    	; 0x185e <__udivmodsi4>
    17ea:	e9 01       	movw	r28, r18
    17ec:	e2 96       	adiw	r28, 0x32	; 50
    17ee:	9e 01       	movw	r18, r28
    17f0:	22 0f       	add	r18, r18
		
		// Map ADC value (0-4095) to PWM duty cycle (50 to 84)
		duty_cycle = map(adc_result, 0, 4095, 50, 84);
		
		// Update PWM duty cycle to control servo position
		TCC0.CCA = duty_cycle * 10;
    17f2:	33 1f       	adc	r19, r19
    17f4:	ce 01       	movw	r24, r28
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	82 0f       	add	r24, r18
    1804:	93 1f       	adc	r25, r19
    1806:	f4 01       	movw	r30, r8
    1808:	80 a7       	std	Z+40, r24	; 0x28
    180a:	91 a7       	std	Z+41, r25	; 0x29
    180c:	ff 92       	push	r15
    180e:	ef 92       	push	r14
		
		// Display the ADC and Duty Cycle value on LCD
		snprintf(strbuf, sizeof(strbuf), "ADC: %d", adc_result);
    1810:	bf 92       	push	r11
    1812:	af 92       	push	r10
    1814:	1f 92       	push	r1
    1816:	7f 92       	push	r7
    1818:	1f 93       	push	r17
    181a:	0f 93       	push	r16
    181c:	42 d0       	rcall	.+132    	; 0x18a2 <snprintf>
    181e:	20 e0       	ldi	r18, 0x00	; 0
		gfx_mono_draw_string(strbuf, 0, 8, &sysfont);
    1820:	30 e2       	ldi	r19, 0x20	; 32
    1822:	48 e0       	ldi	r20, 0x08	; 8
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	c8 01       	movw	r24, r16
    1828:	6e de       	rcall	.-804    	; 0x1506 <gfx_mono_draw_string>
    182a:	df 93       	push	r29
		
		snprintf(strbuf, sizeof(strbuf), "Duty: %d", duty_cycle);
    182c:	cf 93       	push	r28
    182e:	df 92       	push	r13
    1830:	cf 92       	push	r12
    1832:	1f 92       	push	r1
    1834:	7f 92       	push	r7
    1836:	1f 93       	push	r17
    1838:	0f 93       	push	r16
    183a:	33 d0       	rcall	.+102    	; 0x18a2 <snprintf>
    183c:	20 e0       	ldi	r18, 0x00	; 0
		gfx_mono_draw_string(strbuf, 0, 16, &sysfont);
    183e:	30 e2       	ldi	r19, 0x20	; 32
    1840:	40 e1       	ldi	r20, 0x10	; 16
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	c8 01       	movw	r24, r16
    1846:	5f de       	rcall	.-834    	; 0x1506 <gfx_mono_draw_string>
    1848:	6b e0       	ldi	r22, 0x0B	; 11
		
		// Delay for servo movement stabilization
		delay_ms(20);
    184a:	7a e1       	ldi	r23, 0x1A	; 26
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	47 df       	rcall	.-370    	; 0x16e0 <__portable_avr_delay_cycles>
    1852:	ed b7       	in	r30, 0x3d	; 61
    1854:	fe b7       	in	r31, 0x3e	; 62
    1856:	70 96       	adiw	r30, 0x10	; 16
    1858:	ed bf       	out	0x3d, r30	; 61
    185a:	fe bf       	out	0x3e, r31	; 62
    185c:	a3 cf       	rjmp	.-186    	; 0x17a4 <main+0x56>

0000185e <__udivmodsi4>:
    185e:	a1 e2       	ldi	r26, 0x21	; 33
    1860:	1a 2e       	mov	r1, r26
    1862:	aa 1b       	sub	r26, r26
    1864:	bb 1b       	sub	r27, r27
    1866:	fd 01       	movw	r30, r26
    1868:	0d c0       	rjmp	.+26     	; 0x1884 <__udivmodsi4_ep>

0000186a <__udivmodsi4_loop>:
    186a:	aa 1f       	adc	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	ee 1f       	adc	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	a2 17       	cp	r26, r18
    1874:	b3 07       	cpc	r27, r19
    1876:	e4 07       	cpc	r30, r20
    1878:	f5 07       	cpc	r31, r21
    187a:	20 f0       	brcs	.+8      	; 0x1884 <__udivmodsi4_ep>
    187c:	a2 1b       	sub	r26, r18
    187e:	b3 0b       	sbc	r27, r19
    1880:	e4 0b       	sbc	r30, r20
    1882:	f5 0b       	sbc	r31, r21

00001884 <__udivmodsi4_ep>:
    1884:	66 1f       	adc	r22, r22
    1886:	77 1f       	adc	r23, r23
    1888:	88 1f       	adc	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	1a 94       	dec	r1
    188e:	69 f7       	brne	.-38     	; 0x186a <__udivmodsi4_loop>
    1890:	60 95       	com	r22
    1892:	70 95       	com	r23
    1894:	80 95       	com	r24
    1896:	90 95       	com	r25
    1898:	9b 01       	movw	r18, r22
    189a:	ac 01       	movw	r20, r24
    189c:	bd 01       	movw	r22, r26
    189e:	cf 01       	movw	r24, r30
    18a0:	08 95       	ret

000018a2 <snprintf>:
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	2e 97       	sbiw	r28, 0x0e	; 14
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0e 89       	ldd	r16, Y+22	; 0x16
    18b6:	1f 89       	ldd	r17, Y+23	; 0x17
    18b8:	88 8d       	ldd	r24, Y+24	; 0x18
    18ba:	99 8d       	ldd	r25, Y+25	; 0x19
    18bc:	26 e0       	ldi	r18, 0x06	; 6
    18be:	2c 83       	std	Y+4, r18	; 0x04
    18c0:	09 83       	std	Y+1, r16	; 0x01
    18c2:	1a 83       	std	Y+2, r17	; 0x02
    18c4:	97 ff       	sbrs	r25, 7
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <snprintf+0x2a>
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e8       	ldi	r25, 0x80	; 128
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	8d 83       	std	Y+5, r24	; 0x05
    18d0:	9e 83       	std	Y+6, r25	; 0x06
    18d2:	ae 01       	movw	r20, r28
    18d4:	44 5e       	subi	r20, 0xE4	; 228
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255
    18d8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18da:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18dc:	ce 01       	movw	r24, r28
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	16 d0       	rcall	.+44     	; 0x190e <vfprintf>
    18e2:	4d 81       	ldd	r20, Y+5	; 0x05
    18e4:	5e 81       	ldd	r21, Y+6	; 0x06
    18e6:	57 fd       	sbrc	r21, 7
    18e8:	0a c0       	rjmp	.+20     	; 0x18fe <snprintf+0x5c>
    18ea:	2f 81       	ldd	r18, Y+7	; 0x07
    18ec:	38 85       	ldd	r19, Y+8	; 0x08
    18ee:	42 17       	cp	r20, r18
    18f0:	53 07       	cpc	r21, r19
    18f2:	0c f4       	brge	.+2      	; 0x18f6 <snprintf+0x54>
    18f4:	9a 01       	movw	r18, r20
    18f6:	f8 01       	movw	r30, r16
    18f8:	e2 0f       	add	r30, r18
    18fa:	f3 1f       	adc	r31, r19
    18fc:	10 82       	st	Z, r1
    18fe:	2e 96       	adiw	r28, 0x0e	; 14
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	08 95       	ret

0000190e <vfprintf>:
    190e:	2f 92       	push	r2
    1910:	3f 92       	push	r3
    1912:	4f 92       	push	r4
    1914:	5f 92       	push	r5
    1916:	6f 92       	push	r6
    1918:	7f 92       	push	r7
    191a:	8f 92       	push	r8
    191c:	9f 92       	push	r9
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	2b 97       	sbiw	r28, 0x0b	; 11
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	6c 01       	movw	r12, r24
    193e:	7b 01       	movw	r14, r22
    1940:	8a 01       	movw	r16, r20
    1942:	fc 01       	movw	r30, r24
    1944:	16 82       	std	Z+6, r1	; 0x06
    1946:	17 82       	std	Z+7, r1	; 0x07
    1948:	83 81       	ldd	r24, Z+3	; 0x03
    194a:	81 ff       	sbrs	r24, 1
    194c:	bf c1       	rjmp	.+894    	; 0x1ccc <vfprintf+0x3be>
    194e:	ce 01       	movw	r24, r28
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	3c 01       	movw	r6, r24
    1954:	f6 01       	movw	r30, r12
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	f7 01       	movw	r30, r14
    195a:	93 fd       	sbrc	r25, 3
    195c:	85 91       	lpm	r24, Z+
    195e:	93 ff       	sbrs	r25, 3
    1960:	81 91       	ld	r24, Z+
    1962:	7f 01       	movw	r14, r30
    1964:	88 23       	and	r24, r24
    1966:	09 f4       	brne	.+2      	; 0x196a <vfprintf+0x5c>
    1968:	ad c1       	rjmp	.+858    	; 0x1cc4 <vfprintf+0x3b6>
    196a:	85 32       	cpi	r24, 0x25	; 37
    196c:	39 f4       	brne	.+14     	; 0x197c <vfprintf+0x6e>
    196e:	93 fd       	sbrc	r25, 3
    1970:	85 91       	lpm	r24, Z+
    1972:	93 ff       	sbrs	r25, 3
    1974:	81 91       	ld	r24, Z+
    1976:	7f 01       	movw	r14, r30
    1978:	85 32       	cpi	r24, 0x25	; 37
    197a:	21 f4       	brne	.+8      	; 0x1984 <vfprintf+0x76>
    197c:	b6 01       	movw	r22, r12
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	d3 d1       	rcall	.+934    	; 0x1d28 <fputc>
    1982:	e8 cf       	rjmp	.-48     	; 0x1954 <vfprintf+0x46>
    1984:	91 2c       	mov	r9, r1
    1986:	21 2c       	mov	r2, r1
    1988:	31 2c       	mov	r3, r1
    198a:	ff e1       	ldi	r31, 0x1F	; 31
    198c:	f3 15       	cp	r31, r3
    198e:	d8 f0       	brcs	.+54     	; 0x19c6 <vfprintf+0xb8>
    1990:	8b 32       	cpi	r24, 0x2B	; 43
    1992:	79 f0       	breq	.+30     	; 0x19b2 <vfprintf+0xa4>
    1994:	38 f4       	brcc	.+14     	; 0x19a4 <vfprintf+0x96>
    1996:	80 32       	cpi	r24, 0x20	; 32
    1998:	79 f0       	breq	.+30     	; 0x19b8 <vfprintf+0xaa>
    199a:	83 32       	cpi	r24, 0x23	; 35
    199c:	a1 f4       	brne	.+40     	; 0x19c6 <vfprintf+0xb8>
    199e:	23 2d       	mov	r18, r3
    19a0:	20 61       	ori	r18, 0x10	; 16
    19a2:	1d c0       	rjmp	.+58     	; 0x19de <vfprintf+0xd0>
    19a4:	8d 32       	cpi	r24, 0x2D	; 45
    19a6:	61 f0       	breq	.+24     	; 0x19c0 <vfprintf+0xb2>
    19a8:	80 33       	cpi	r24, 0x30	; 48
    19aa:	69 f4       	brne	.+26     	; 0x19c6 <vfprintf+0xb8>
    19ac:	23 2d       	mov	r18, r3
    19ae:	21 60       	ori	r18, 0x01	; 1
    19b0:	16 c0       	rjmp	.+44     	; 0x19de <vfprintf+0xd0>
    19b2:	83 2d       	mov	r24, r3
    19b4:	82 60       	ori	r24, 0x02	; 2
    19b6:	38 2e       	mov	r3, r24
    19b8:	e3 2d       	mov	r30, r3
    19ba:	e4 60       	ori	r30, 0x04	; 4
    19bc:	3e 2e       	mov	r3, r30
    19be:	2a c0       	rjmp	.+84     	; 0x1a14 <vfprintf+0x106>
    19c0:	f3 2d       	mov	r31, r3
    19c2:	f8 60       	ori	r31, 0x08	; 8
    19c4:	1d c0       	rjmp	.+58     	; 0x1a00 <vfprintf+0xf2>
    19c6:	37 fc       	sbrc	r3, 7
    19c8:	2d c0       	rjmp	.+90     	; 0x1a24 <vfprintf+0x116>
    19ca:	20 ed       	ldi	r18, 0xD0	; 208
    19cc:	28 0f       	add	r18, r24
    19ce:	2a 30       	cpi	r18, 0x0A	; 10
    19d0:	40 f0       	brcs	.+16     	; 0x19e2 <vfprintf+0xd4>
    19d2:	8e 32       	cpi	r24, 0x2E	; 46
    19d4:	b9 f4       	brne	.+46     	; 0x1a04 <vfprintf+0xf6>
    19d6:	36 fc       	sbrc	r3, 6
    19d8:	75 c1       	rjmp	.+746    	; 0x1cc4 <vfprintf+0x3b6>
    19da:	23 2d       	mov	r18, r3
    19dc:	20 64       	ori	r18, 0x40	; 64
    19de:	32 2e       	mov	r3, r18
    19e0:	19 c0       	rjmp	.+50     	; 0x1a14 <vfprintf+0x106>
    19e2:	36 fe       	sbrs	r3, 6
    19e4:	06 c0       	rjmp	.+12     	; 0x19f2 <vfprintf+0xe4>
    19e6:	8a e0       	ldi	r24, 0x0A	; 10
    19e8:	98 9e       	mul	r9, r24
    19ea:	20 0d       	add	r18, r0
    19ec:	11 24       	eor	r1, r1
    19ee:	92 2e       	mov	r9, r18
    19f0:	11 c0       	rjmp	.+34     	; 0x1a14 <vfprintf+0x106>
    19f2:	ea e0       	ldi	r30, 0x0A	; 10
    19f4:	2e 9e       	mul	r2, r30
    19f6:	20 0d       	add	r18, r0
    19f8:	11 24       	eor	r1, r1
    19fa:	22 2e       	mov	r2, r18
    19fc:	f3 2d       	mov	r31, r3
    19fe:	f0 62       	ori	r31, 0x20	; 32
    1a00:	3f 2e       	mov	r3, r31
    1a02:	08 c0       	rjmp	.+16     	; 0x1a14 <vfprintf+0x106>
    1a04:	8c 36       	cpi	r24, 0x6C	; 108
    1a06:	21 f4       	brne	.+8      	; 0x1a10 <vfprintf+0x102>
    1a08:	83 2d       	mov	r24, r3
    1a0a:	80 68       	ori	r24, 0x80	; 128
    1a0c:	38 2e       	mov	r3, r24
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <vfprintf+0x106>
    1a10:	88 36       	cpi	r24, 0x68	; 104
    1a12:	41 f4       	brne	.+16     	; 0x1a24 <vfprintf+0x116>
    1a14:	f7 01       	movw	r30, r14
    1a16:	93 fd       	sbrc	r25, 3
    1a18:	85 91       	lpm	r24, Z+
    1a1a:	93 ff       	sbrs	r25, 3
    1a1c:	81 91       	ld	r24, Z+
    1a1e:	7f 01       	movw	r14, r30
    1a20:	81 11       	cpse	r24, r1
    1a22:	b3 cf       	rjmp	.-154    	; 0x198a <vfprintf+0x7c>
    1a24:	98 2f       	mov	r25, r24
    1a26:	9f 7d       	andi	r25, 0xDF	; 223
    1a28:	95 54       	subi	r25, 0x45	; 69
    1a2a:	93 30       	cpi	r25, 0x03	; 3
    1a2c:	28 f4       	brcc	.+10     	; 0x1a38 <vfprintf+0x12a>
    1a2e:	0c 5f       	subi	r16, 0xFC	; 252
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	9f e3       	ldi	r25, 0x3F	; 63
    1a34:	99 83       	std	Y+1, r25	; 0x01
    1a36:	0d c0       	rjmp	.+26     	; 0x1a52 <vfprintf+0x144>
    1a38:	83 36       	cpi	r24, 0x63	; 99
    1a3a:	31 f0       	breq	.+12     	; 0x1a48 <vfprintf+0x13a>
    1a3c:	83 37       	cpi	r24, 0x73	; 115
    1a3e:	71 f0       	breq	.+28     	; 0x1a5c <vfprintf+0x14e>
    1a40:	83 35       	cpi	r24, 0x53	; 83
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <vfprintf+0x138>
    1a44:	55 c0       	rjmp	.+170    	; 0x1af0 <vfprintf+0x1e2>
    1a46:	20 c0       	rjmp	.+64     	; 0x1a88 <vfprintf+0x17a>
    1a48:	f8 01       	movw	r30, r16
    1a4a:	80 81       	ld	r24, Z
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	0e 5f       	subi	r16, 0xFE	; 254
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	88 24       	eor	r8, r8
    1a54:	83 94       	inc	r8
    1a56:	91 2c       	mov	r9, r1
    1a58:	53 01       	movw	r10, r6
    1a5a:	12 c0       	rjmp	.+36     	; 0x1a80 <vfprintf+0x172>
    1a5c:	28 01       	movw	r4, r16
    1a5e:	f2 e0       	ldi	r31, 0x02	; 2
    1a60:	4f 0e       	add	r4, r31
    1a62:	51 1c       	adc	r5, r1
    1a64:	f8 01       	movw	r30, r16
    1a66:	a0 80       	ld	r10, Z
    1a68:	b1 80       	ldd	r11, Z+1	; 0x01
    1a6a:	36 fe       	sbrs	r3, 6
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <vfprintf+0x166>
    1a6e:	69 2d       	mov	r22, r9
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <vfprintf+0x16a>
    1a74:	6f ef       	ldi	r22, 0xFF	; 255
    1a76:	7f ef       	ldi	r23, 0xFF	; 255
    1a78:	c5 01       	movw	r24, r10
    1a7a:	4b d1       	rcall	.+662    	; 0x1d12 <strnlen>
    1a7c:	4c 01       	movw	r8, r24
    1a7e:	82 01       	movw	r16, r4
    1a80:	f3 2d       	mov	r31, r3
    1a82:	ff 77       	andi	r31, 0x7F	; 127
    1a84:	3f 2e       	mov	r3, r31
    1a86:	15 c0       	rjmp	.+42     	; 0x1ab2 <vfprintf+0x1a4>
    1a88:	28 01       	movw	r4, r16
    1a8a:	22 e0       	ldi	r18, 0x02	; 2
    1a8c:	42 0e       	add	r4, r18
    1a8e:	51 1c       	adc	r5, r1
    1a90:	f8 01       	movw	r30, r16
    1a92:	a0 80       	ld	r10, Z
    1a94:	b1 80       	ldd	r11, Z+1	; 0x01
    1a96:	36 fe       	sbrs	r3, 6
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <vfprintf+0x192>
    1a9a:	69 2d       	mov	r22, r9
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <vfprintf+0x196>
    1aa0:	6f ef       	ldi	r22, 0xFF	; 255
    1aa2:	7f ef       	ldi	r23, 0xFF	; 255
    1aa4:	c5 01       	movw	r24, r10
    1aa6:	2a d1       	rcall	.+596    	; 0x1cfc <strnlen_P>
    1aa8:	4c 01       	movw	r8, r24
    1aaa:	f3 2d       	mov	r31, r3
    1aac:	f0 68       	ori	r31, 0x80	; 128
    1aae:	3f 2e       	mov	r3, r31
    1ab0:	82 01       	movw	r16, r4
    1ab2:	33 fc       	sbrc	r3, 3
    1ab4:	19 c0       	rjmp	.+50     	; 0x1ae8 <vfprintf+0x1da>
    1ab6:	82 2d       	mov	r24, r2
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	88 16       	cp	r8, r24
    1abc:	99 06       	cpc	r9, r25
    1abe:	a0 f4       	brcc	.+40     	; 0x1ae8 <vfprintf+0x1da>
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	80 e2       	ldi	r24, 0x20	; 32
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	30 d1       	rcall	.+608    	; 0x1d28 <fputc>
    1ac8:	2a 94       	dec	r2
    1aca:	f5 cf       	rjmp	.-22     	; 0x1ab6 <vfprintf+0x1a8>
    1acc:	f5 01       	movw	r30, r10
    1ace:	37 fc       	sbrc	r3, 7
    1ad0:	85 91       	lpm	r24, Z+
    1ad2:	37 fe       	sbrs	r3, 7
    1ad4:	81 91       	ld	r24, Z+
    1ad6:	5f 01       	movw	r10, r30
    1ad8:	b6 01       	movw	r22, r12
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	25 d1       	rcall	.+586    	; 0x1d28 <fputc>
    1ade:	21 10       	cpse	r2, r1
    1ae0:	2a 94       	dec	r2
    1ae2:	21 e0       	ldi	r18, 0x01	; 1
    1ae4:	82 1a       	sub	r8, r18
    1ae6:	91 08       	sbc	r9, r1
    1ae8:	81 14       	cp	r8, r1
    1aea:	91 04       	cpc	r9, r1
    1aec:	79 f7       	brne	.-34     	; 0x1acc <vfprintf+0x1be>
    1aee:	e1 c0       	rjmp	.+450    	; 0x1cb2 <vfprintf+0x3a4>
    1af0:	84 36       	cpi	r24, 0x64	; 100
    1af2:	11 f0       	breq	.+4      	; 0x1af8 <vfprintf+0x1ea>
    1af4:	89 36       	cpi	r24, 0x69	; 105
    1af6:	39 f5       	brne	.+78     	; 0x1b46 <vfprintf+0x238>
    1af8:	f8 01       	movw	r30, r16
    1afa:	37 fe       	sbrs	r3, 7
    1afc:	07 c0       	rjmp	.+14     	; 0x1b0c <vfprintf+0x1fe>
    1afe:	60 81       	ld	r22, Z
    1b00:	71 81       	ldd	r23, Z+1	; 0x01
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	0c 5f       	subi	r16, 0xFC	; 252
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <vfprintf+0x20e>
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	07 2e       	mov	r0, r23
    1b12:	00 0c       	add	r0, r0
    1b14:	88 0b       	sbc	r24, r24
    1b16:	99 0b       	sbc	r25, r25
    1b18:	0e 5f       	subi	r16, 0xFE	; 254
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	f3 2d       	mov	r31, r3
    1b1e:	ff 76       	andi	r31, 0x6F	; 111
    1b20:	3f 2e       	mov	r3, r31
    1b22:	97 ff       	sbrs	r25, 7
    1b24:	09 c0       	rjmp	.+18     	; 0x1b38 <vfprintf+0x22a>
    1b26:	90 95       	com	r25
    1b28:	80 95       	com	r24
    1b2a:	70 95       	com	r23
    1b2c:	61 95       	neg	r22
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	8f 4f       	sbci	r24, 0xFF	; 255
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	f0 68       	ori	r31, 0x80	; 128
    1b36:	3f 2e       	mov	r3, r31
    1b38:	2a e0       	ldi	r18, 0x0A	; 10
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	a3 01       	movw	r20, r6
    1b3e:	30 d1       	rcall	.+608    	; 0x1da0 <__ultoa_invert>
    1b40:	88 2e       	mov	r8, r24
    1b42:	86 18       	sub	r8, r6
    1b44:	44 c0       	rjmp	.+136    	; 0x1bce <vfprintf+0x2c0>
    1b46:	85 37       	cpi	r24, 0x75	; 117
    1b48:	31 f4       	brne	.+12     	; 0x1b56 <vfprintf+0x248>
    1b4a:	23 2d       	mov	r18, r3
    1b4c:	2f 7e       	andi	r18, 0xEF	; 239
    1b4e:	b2 2e       	mov	r11, r18
    1b50:	2a e0       	ldi	r18, 0x0A	; 10
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	25 c0       	rjmp	.+74     	; 0x1ba0 <vfprintf+0x292>
    1b56:	93 2d       	mov	r25, r3
    1b58:	99 7f       	andi	r25, 0xF9	; 249
    1b5a:	b9 2e       	mov	r11, r25
    1b5c:	8f 36       	cpi	r24, 0x6F	; 111
    1b5e:	c1 f0       	breq	.+48     	; 0x1b90 <vfprintf+0x282>
    1b60:	18 f4       	brcc	.+6      	; 0x1b68 <vfprintf+0x25a>
    1b62:	88 35       	cpi	r24, 0x58	; 88
    1b64:	79 f0       	breq	.+30     	; 0x1b84 <vfprintf+0x276>
    1b66:	ae c0       	rjmp	.+348    	; 0x1cc4 <vfprintf+0x3b6>
    1b68:	80 37       	cpi	r24, 0x70	; 112
    1b6a:	19 f0       	breq	.+6      	; 0x1b72 <vfprintf+0x264>
    1b6c:	88 37       	cpi	r24, 0x78	; 120
    1b6e:	21 f0       	breq	.+8      	; 0x1b78 <vfprintf+0x26a>
    1b70:	a9 c0       	rjmp	.+338    	; 0x1cc4 <vfprintf+0x3b6>
    1b72:	e9 2f       	mov	r30, r25
    1b74:	e0 61       	ori	r30, 0x10	; 16
    1b76:	be 2e       	mov	r11, r30
    1b78:	b4 fe       	sbrs	r11, 4
    1b7a:	0d c0       	rjmp	.+26     	; 0x1b96 <vfprintf+0x288>
    1b7c:	fb 2d       	mov	r31, r11
    1b7e:	f4 60       	ori	r31, 0x04	; 4
    1b80:	bf 2e       	mov	r11, r31
    1b82:	09 c0       	rjmp	.+18     	; 0x1b96 <vfprintf+0x288>
    1b84:	34 fe       	sbrs	r3, 4
    1b86:	0a c0       	rjmp	.+20     	; 0x1b9c <vfprintf+0x28e>
    1b88:	29 2f       	mov	r18, r25
    1b8a:	26 60       	ori	r18, 0x06	; 6
    1b8c:	b2 2e       	mov	r11, r18
    1b8e:	06 c0       	rjmp	.+12     	; 0x1b9c <vfprintf+0x28e>
    1b90:	28 e0       	ldi	r18, 0x08	; 8
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <vfprintf+0x292>
    1b96:	20 e1       	ldi	r18, 0x10	; 16
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <vfprintf+0x292>
    1b9c:	20 e1       	ldi	r18, 0x10	; 16
    1b9e:	32 e0       	ldi	r19, 0x02	; 2
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	b7 fe       	sbrs	r11, 7
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <vfprintf+0x2a6>
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	0c 5f       	subi	r16, 0xFC	; 252
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb2:	06 c0       	rjmp	.+12     	; 0x1bc0 <vfprintf+0x2b2>
    1bb4:	60 81       	ld	r22, Z
    1bb6:	71 81       	ldd	r23, Z+1	; 0x01
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 5f       	subi	r16, 0xFE	; 254
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	a3 01       	movw	r20, r6
    1bc2:	ee d0       	rcall	.+476    	; 0x1da0 <__ultoa_invert>
    1bc4:	88 2e       	mov	r8, r24
    1bc6:	86 18       	sub	r8, r6
    1bc8:	fb 2d       	mov	r31, r11
    1bca:	ff 77       	andi	r31, 0x7F	; 127
    1bcc:	3f 2e       	mov	r3, r31
    1bce:	36 fe       	sbrs	r3, 6
    1bd0:	0d c0       	rjmp	.+26     	; 0x1bec <vfprintf+0x2de>
    1bd2:	23 2d       	mov	r18, r3
    1bd4:	2e 7f       	andi	r18, 0xFE	; 254
    1bd6:	a2 2e       	mov	r10, r18
    1bd8:	89 14       	cp	r8, r9
    1bda:	58 f4       	brcc	.+22     	; 0x1bf2 <vfprintf+0x2e4>
    1bdc:	34 fe       	sbrs	r3, 4
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <vfprintf+0x2e8>
    1be0:	32 fc       	sbrc	r3, 2
    1be2:	09 c0       	rjmp	.+18     	; 0x1bf6 <vfprintf+0x2e8>
    1be4:	83 2d       	mov	r24, r3
    1be6:	8e 7e       	andi	r24, 0xEE	; 238
    1be8:	a8 2e       	mov	r10, r24
    1bea:	05 c0       	rjmp	.+10     	; 0x1bf6 <vfprintf+0x2e8>
    1bec:	b8 2c       	mov	r11, r8
    1bee:	a3 2c       	mov	r10, r3
    1bf0:	03 c0       	rjmp	.+6      	; 0x1bf8 <vfprintf+0x2ea>
    1bf2:	b8 2c       	mov	r11, r8
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <vfprintf+0x2ea>
    1bf6:	b9 2c       	mov	r11, r9
    1bf8:	a4 fe       	sbrs	r10, 4
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <vfprintf+0x30c>
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e8 0d       	add	r30, r8
    1c00:	f1 1d       	adc	r31, r1
    1c02:	80 81       	ld	r24, Z
    1c04:	80 33       	cpi	r24, 0x30	; 48
    1c06:	21 f4       	brne	.+8      	; 0x1c10 <vfprintf+0x302>
    1c08:	9a 2d       	mov	r25, r10
    1c0a:	99 7e       	andi	r25, 0xE9	; 233
    1c0c:	a9 2e       	mov	r10, r25
    1c0e:	09 c0       	rjmp	.+18     	; 0x1c22 <vfprintf+0x314>
    1c10:	a2 fe       	sbrs	r10, 2
    1c12:	06 c0       	rjmp	.+12     	; 0x1c20 <vfprintf+0x312>
    1c14:	b3 94       	inc	r11
    1c16:	b3 94       	inc	r11
    1c18:	04 c0       	rjmp	.+8      	; 0x1c22 <vfprintf+0x314>
    1c1a:	8a 2d       	mov	r24, r10
    1c1c:	86 78       	andi	r24, 0x86	; 134
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <vfprintf+0x314>
    1c20:	b3 94       	inc	r11
    1c22:	a3 fc       	sbrc	r10, 3
    1c24:	10 c0       	rjmp	.+32     	; 0x1c46 <vfprintf+0x338>
    1c26:	a0 fe       	sbrs	r10, 0
    1c28:	06 c0       	rjmp	.+12     	; 0x1c36 <vfprintf+0x328>
    1c2a:	b2 14       	cp	r11, r2
    1c2c:	80 f4       	brcc	.+32     	; 0x1c4e <vfprintf+0x340>
    1c2e:	28 0c       	add	r2, r8
    1c30:	92 2c       	mov	r9, r2
    1c32:	9b 18       	sub	r9, r11
    1c34:	0d c0       	rjmp	.+26     	; 0x1c50 <vfprintf+0x342>
    1c36:	b2 14       	cp	r11, r2
    1c38:	58 f4       	brcc	.+22     	; 0x1c50 <vfprintf+0x342>
    1c3a:	b6 01       	movw	r22, r12
    1c3c:	80 e2       	ldi	r24, 0x20	; 32
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	73 d0       	rcall	.+230    	; 0x1d28 <fputc>
    1c42:	b3 94       	inc	r11
    1c44:	f8 cf       	rjmp	.-16     	; 0x1c36 <vfprintf+0x328>
    1c46:	b2 14       	cp	r11, r2
    1c48:	18 f4       	brcc	.+6      	; 0x1c50 <vfprintf+0x342>
    1c4a:	2b 18       	sub	r2, r11
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <vfprintf+0x344>
    1c4e:	98 2c       	mov	r9, r8
    1c50:	21 2c       	mov	r2, r1
    1c52:	a4 fe       	sbrs	r10, 4
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <vfprintf+0x366>
    1c56:	b6 01       	movw	r22, r12
    1c58:	80 e3       	ldi	r24, 0x30	; 48
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	65 d0       	rcall	.+202    	; 0x1d28 <fputc>
    1c5e:	a2 fe       	sbrs	r10, 2
    1c60:	16 c0       	rjmp	.+44     	; 0x1c8e <vfprintf+0x380>
    1c62:	a1 fc       	sbrc	r10, 1
    1c64:	03 c0       	rjmp	.+6      	; 0x1c6c <vfprintf+0x35e>
    1c66:	88 e7       	ldi	r24, 0x78	; 120
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <vfprintf+0x362>
    1c6c:	88 e5       	ldi	r24, 0x58	; 88
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	b6 01       	movw	r22, r12
    1c72:	0c c0       	rjmp	.+24     	; 0x1c8c <vfprintf+0x37e>
    1c74:	8a 2d       	mov	r24, r10
    1c76:	86 78       	andi	r24, 0x86	; 134
    1c78:	51 f0       	breq	.+20     	; 0x1c8e <vfprintf+0x380>
    1c7a:	a1 fe       	sbrs	r10, 1
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <vfprintf+0x374>
    1c7e:	8b e2       	ldi	r24, 0x2B	; 43
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <vfprintf+0x376>
    1c82:	80 e2       	ldi	r24, 0x20	; 32
    1c84:	a7 fc       	sbrc	r10, 7
    1c86:	8d e2       	ldi	r24, 0x2D	; 45
    1c88:	b6 01       	movw	r22, r12
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	4d d0       	rcall	.+154    	; 0x1d28 <fputc>
    1c8e:	89 14       	cp	r8, r9
    1c90:	30 f4       	brcc	.+12     	; 0x1c9e <vfprintf+0x390>
    1c92:	b6 01       	movw	r22, r12
    1c94:	80 e3       	ldi	r24, 0x30	; 48
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	47 d0       	rcall	.+142    	; 0x1d28 <fputc>
    1c9a:	9a 94       	dec	r9
    1c9c:	f8 cf       	rjmp	.-16     	; 0x1c8e <vfprintf+0x380>
    1c9e:	8a 94       	dec	r8
    1ca0:	f3 01       	movw	r30, r6
    1ca2:	e8 0d       	add	r30, r8
    1ca4:	f1 1d       	adc	r31, r1
    1ca6:	80 81       	ld	r24, Z
    1ca8:	b6 01       	movw	r22, r12
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	3d d0       	rcall	.+122    	; 0x1d28 <fputc>
    1cae:	81 10       	cpse	r8, r1
    1cb0:	f6 cf       	rjmp	.-20     	; 0x1c9e <vfprintf+0x390>
    1cb2:	22 20       	and	r2, r2
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <vfprintf+0x3aa>
    1cb6:	4e ce       	rjmp	.-868    	; 0x1954 <vfprintf+0x46>
    1cb8:	b6 01       	movw	r22, r12
    1cba:	80 e2       	ldi	r24, 0x20	; 32
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	34 d0       	rcall	.+104    	; 0x1d28 <fputc>
    1cc0:	2a 94       	dec	r2
    1cc2:	f7 cf       	rjmp	.-18     	; 0x1cb2 <vfprintf+0x3a4>
    1cc4:	f6 01       	movw	r30, r12
    1cc6:	86 81       	ldd	r24, Z+6	; 0x06
    1cc8:	97 81       	ldd	r25, Z+7	; 0x07
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <vfprintf+0x3c2>
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	9f ef       	ldi	r25, 0xFF	; 255
    1cd0:	2b 96       	adiw	r28, 0x0b	; 11
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	ff 90       	pop	r15
    1ce0:	ef 90       	pop	r14
    1ce2:	df 90       	pop	r13
    1ce4:	cf 90       	pop	r12
    1ce6:	bf 90       	pop	r11
    1ce8:	af 90       	pop	r10
    1cea:	9f 90       	pop	r9
    1cec:	8f 90       	pop	r8
    1cee:	7f 90       	pop	r7
    1cf0:	6f 90       	pop	r6
    1cf2:	5f 90       	pop	r5
    1cf4:	4f 90       	pop	r4
    1cf6:	3f 90       	pop	r3
    1cf8:	2f 90       	pop	r2
    1cfa:	08 95       	ret

00001cfc <strnlen_P>:
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	05 90       	lpm	r0, Z+
    1d00:	61 50       	subi	r22, 0x01	; 1
    1d02:	70 40       	sbci	r23, 0x00	; 0
    1d04:	01 10       	cpse	r0, r1
    1d06:	d8 f7       	brcc	.-10     	; 0x1cfe <strnlen_P+0x2>
    1d08:	80 95       	com	r24
    1d0a:	90 95       	com	r25
    1d0c:	8e 0f       	add	r24, r30
    1d0e:	9f 1f       	adc	r25, r31
    1d10:	08 95       	ret

00001d12 <strnlen>:
    1d12:	fc 01       	movw	r30, r24
    1d14:	61 50       	subi	r22, 0x01	; 1
    1d16:	70 40       	sbci	r23, 0x00	; 0
    1d18:	01 90       	ld	r0, Z+
    1d1a:	01 10       	cpse	r0, r1
    1d1c:	d8 f7       	brcc	.-10     	; 0x1d14 <strnlen+0x2>
    1d1e:	80 95       	com	r24
    1d20:	90 95       	com	r25
    1d22:	8e 0f       	add	r24, r30
    1d24:	9f 1f       	adc	r25, r31
    1d26:	08 95       	ret

00001d28 <fputc>:
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	fb 01       	movw	r30, r22
    1d32:	23 81       	ldd	r18, Z+3	; 0x03
    1d34:	21 fd       	sbrc	r18, 1
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <fputc+0x16>
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	9f ef       	ldi	r25, 0xFF	; 255
    1d3c:	2c c0       	rjmp	.+88     	; 0x1d96 <fputc+0x6e>
    1d3e:	22 ff       	sbrs	r18, 2
    1d40:	16 c0       	rjmp	.+44     	; 0x1d6e <fputc+0x46>
    1d42:	46 81       	ldd	r20, Z+6	; 0x06
    1d44:	57 81       	ldd	r21, Z+7	; 0x07
    1d46:	24 81       	ldd	r18, Z+4	; 0x04
    1d48:	35 81       	ldd	r19, Z+5	; 0x05
    1d4a:	42 17       	cp	r20, r18
    1d4c:	53 07       	cpc	r21, r19
    1d4e:	44 f4       	brge	.+16     	; 0x1d60 <fputc+0x38>
    1d50:	a0 81       	ld	r26, Z
    1d52:	b1 81       	ldd	r27, Z+1	; 0x01
    1d54:	9d 01       	movw	r18, r26
    1d56:	2f 5f       	subi	r18, 0xFF	; 255
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	20 83       	st	Z, r18
    1d5c:	31 83       	std	Z+1, r19	; 0x01
    1d5e:	8c 93       	st	X, r24
    1d60:	26 81       	ldd	r18, Z+6	; 0x06
    1d62:	37 81       	ldd	r19, Z+7	; 0x07
    1d64:	2f 5f       	subi	r18, 0xFF	; 255
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	26 83       	std	Z+6, r18	; 0x06
    1d6a:	37 83       	std	Z+7, r19	; 0x07
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <fputc+0x6e>
    1d6e:	8b 01       	movw	r16, r22
    1d70:	ec 01       	movw	r28, r24
    1d72:	fb 01       	movw	r30, r22
    1d74:	00 84       	ldd	r0, Z+8	; 0x08
    1d76:	f1 85       	ldd	r31, Z+9	; 0x09
    1d78:	e0 2d       	mov	r30, r0
    1d7a:	19 95       	eicall
    1d7c:	89 2b       	or	r24, r25
    1d7e:	e1 f6       	brne	.-72     	; 0x1d38 <fputc+0x10>
    1d80:	d8 01       	movw	r26, r16
    1d82:	16 96       	adiw	r26, 0x06	; 6
    1d84:	8d 91       	ld	r24, X+
    1d86:	9c 91       	ld	r25, X
    1d88:	17 97       	sbiw	r26, 0x07	; 7
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	16 96       	adiw	r26, 0x06	; 6
    1d8e:	8d 93       	st	X+, r24
    1d90:	9c 93       	st	X, r25
    1d92:	17 97       	sbiw	r26, 0x07	; 7
    1d94:	ce 01       	movw	r24, r28
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	08 95       	ret

00001da0 <__ultoa_invert>:
    1da0:	fa 01       	movw	r30, r20
    1da2:	aa 27       	eor	r26, r26
    1da4:	28 30       	cpi	r18, 0x08	; 8
    1da6:	51 f1       	breq	.+84     	; 0x1dfc <__ultoa_invert+0x5c>
    1da8:	20 31       	cpi	r18, 0x10	; 16
    1daa:	81 f1       	breq	.+96     	; 0x1e0c <__ultoa_invert+0x6c>
    1dac:	e8 94       	clt
    1dae:	6f 93       	push	r22
    1db0:	6e 7f       	andi	r22, 0xFE	; 254
    1db2:	6e 5f       	subi	r22, 0xFE	; 254
    1db4:	7f 4f       	sbci	r23, 0xFF	; 255
    1db6:	8f 4f       	sbci	r24, 0xFF	; 255
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	af 4f       	sbci	r26, 0xFF	; 255
    1dbc:	b1 e0       	ldi	r27, 0x01	; 1
    1dbe:	3e d0       	rcall	.+124    	; 0x1e3c <__ultoa_invert+0x9c>
    1dc0:	b4 e0       	ldi	r27, 0x04	; 4
    1dc2:	3c d0       	rcall	.+120    	; 0x1e3c <__ultoa_invert+0x9c>
    1dc4:	67 0f       	add	r22, r23
    1dc6:	78 1f       	adc	r23, r24
    1dc8:	89 1f       	adc	r24, r25
    1dca:	9a 1f       	adc	r25, r26
    1dcc:	a1 1d       	adc	r26, r1
    1dce:	68 0f       	add	r22, r24
    1dd0:	79 1f       	adc	r23, r25
    1dd2:	8a 1f       	adc	r24, r26
    1dd4:	91 1d       	adc	r25, r1
    1dd6:	a1 1d       	adc	r26, r1
    1dd8:	6a 0f       	add	r22, r26
    1dda:	71 1d       	adc	r23, r1
    1ddc:	81 1d       	adc	r24, r1
    1dde:	91 1d       	adc	r25, r1
    1de0:	a1 1d       	adc	r26, r1
    1de2:	20 d0       	rcall	.+64     	; 0x1e24 <__ultoa_invert+0x84>
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <__ultoa_invert+0x48>
    1de6:	68 94       	set
    1de8:	3f 91       	pop	r19
    1dea:	2a e0       	ldi	r18, 0x0A	; 10
    1dec:	26 9f       	mul	r18, r22
    1dee:	11 24       	eor	r1, r1
    1df0:	30 19       	sub	r19, r0
    1df2:	30 5d       	subi	r19, 0xD0	; 208
    1df4:	31 93       	st	Z+, r19
    1df6:	de f6       	brtc	.-74     	; 0x1dae <__ultoa_invert+0xe>
    1df8:	cf 01       	movw	r24, r30
    1dfa:	08 95       	ret
    1dfc:	46 2f       	mov	r20, r22
    1dfe:	47 70       	andi	r20, 0x07	; 7
    1e00:	40 5d       	subi	r20, 0xD0	; 208
    1e02:	41 93       	st	Z+, r20
    1e04:	b3 e0       	ldi	r27, 0x03	; 3
    1e06:	0f d0       	rcall	.+30     	; 0x1e26 <__ultoa_invert+0x86>
    1e08:	c9 f7       	brne	.-14     	; 0x1dfc <__ultoa_invert+0x5c>
    1e0a:	f6 cf       	rjmp	.-20     	; 0x1df8 <__ultoa_invert+0x58>
    1e0c:	46 2f       	mov	r20, r22
    1e0e:	4f 70       	andi	r20, 0x0F	; 15
    1e10:	40 5d       	subi	r20, 0xD0	; 208
    1e12:	4a 33       	cpi	r20, 0x3A	; 58
    1e14:	18 f0       	brcs	.+6      	; 0x1e1c <__ultoa_invert+0x7c>
    1e16:	49 5d       	subi	r20, 0xD9	; 217
    1e18:	31 fd       	sbrc	r19, 1
    1e1a:	40 52       	subi	r20, 0x20	; 32
    1e1c:	41 93       	st	Z+, r20
    1e1e:	02 d0       	rcall	.+4      	; 0x1e24 <__ultoa_invert+0x84>
    1e20:	a9 f7       	brne	.-22     	; 0x1e0c <__ultoa_invert+0x6c>
    1e22:	ea cf       	rjmp	.-44     	; 0x1df8 <__ultoa_invert+0x58>
    1e24:	b4 e0       	ldi	r27, 0x04	; 4
    1e26:	a6 95       	lsr	r26
    1e28:	97 95       	ror	r25
    1e2a:	87 95       	ror	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	ba 95       	dec	r27
    1e32:	c9 f7       	brne	.-14     	; 0x1e26 <__ultoa_invert+0x86>
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	61 05       	cpc	r22, r1
    1e38:	71 05       	cpc	r23, r1
    1e3a:	08 95       	ret
    1e3c:	9b 01       	movw	r18, r22
    1e3e:	ac 01       	movw	r20, r24
    1e40:	0a 2e       	mov	r0, r26
    1e42:	06 94       	lsr	r0
    1e44:	57 95       	ror	r21
    1e46:	47 95       	ror	r20
    1e48:	37 95       	ror	r19
    1e4a:	27 95       	ror	r18
    1e4c:	ba 95       	dec	r27
    1e4e:	c9 f7       	brne	.-14     	; 0x1e42 <__ultoa_invert+0xa2>
    1e50:	62 0f       	add	r22, r18
    1e52:	73 1f       	adc	r23, r19
    1e54:	84 1f       	adc	r24, r20
    1e56:	95 1f       	adc	r25, r21
    1e58:	a0 1d       	adc	r26, r0
    1e5a:	08 95       	ret

00001e5c <_exit>:
    1e5c:	f8 94       	cli

00001e5e <__stop_program>:
    1e5e:	ff cf       	rjmp	.-2      	; 0x1e5e <__stop_program>
