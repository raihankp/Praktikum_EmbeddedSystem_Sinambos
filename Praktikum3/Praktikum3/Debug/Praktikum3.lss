
Praktikum3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00802000  00001ab0  00001b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000282  00802028  00802028  00001b6c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db83  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a6d  00000000  00000000  0000fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cd5  00000000  00000000  000144dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000924  00000000  00000000  0001b1b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032a4b  00000000  00000000  0001bad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005831  00000000  00000000  0004e523  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  00053d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bcff  00000000  00000000  0005413c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	64 c2       	rjmp	.+1224   	; 0x4ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c2       	rjmp	.+1220   	; 0x4ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c2       	rjmp	.+1216   	; 0x4ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c2       	rjmp	.+1212   	; 0x4ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c2       	rjmp	.+1208   	; 0x4ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c2       	rjmp	.+1204   	; 0x4ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c2       	rjmp	.+1200   	; 0x4ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c2       	rjmp	.+1196   	; 0x4ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c2       	rjmp	.+1192   	; 0x4ce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c2       	rjmp	.+1188   	; 0x4ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c2       	rjmp	.+1184   	; 0x4ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c2       	rjmp	.+1180   	; 0x4ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c2       	rjmp	.+1176   	; 0x4ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c2       	rjmp	.+1172   	; 0x4ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c2       	rjmp	.+1168   	; 0x4ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c2       	rjmp	.+1164   	; 0x4ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c2       	rjmp	.+1160   	; 0x4ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c2       	rjmp	.+1156   	; 0x4ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c2       	rjmp	.+1152   	; 0x4ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c2       	rjmp	.+1148   	; 0x4ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c2       	rjmp	.+1144   	; 0x4ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c2       	rjmp	.+1140   	; 0x4ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c2       	rjmp	.+1136   	; 0x4ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c2       	rjmp	.+1132   	; 0x4ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c2       	rjmp	.+1128   	; 0x4ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c2       	rjmp	.+1124   	; 0x4ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c2       	rjmp	.+1120   	; 0x4ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c2       	rjmp	.+1116   	; 0x4ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c2       	rjmp	.+1112   	; 0x4ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c2       	rjmp	.+1108   	; 0x4ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c2       	rjmp	.+1104   	; 0x4ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c2       	rjmp	.+1100   	; 0x4ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c2       	rjmp	.+1096   	; 0x4ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c2       	rjmp	.+1092   	; 0x4ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c2       	rjmp	.+1088   	; 0x4ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c2       	rjmp	.+1084   	; 0x4ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c2       	rjmp	.+1080   	; 0x4ce <__bad_interrupt>
      96:	00 00       	nop
      98:	1a c2       	rjmp	.+1076   	; 0x4ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	18 c2       	rjmp	.+1072   	; 0x4ce <__bad_interrupt>
      9e:	00 00       	nop
      a0:	16 c2       	rjmp	.+1068   	; 0x4ce <__bad_interrupt>
      a2:	00 00       	nop
      a4:	14 c2       	rjmp	.+1064   	; 0x4ce <__bad_interrupt>
      a6:	00 00       	nop
      a8:	12 c2       	rjmp	.+1060   	; 0x4ce <__bad_interrupt>
      aa:	00 00       	nop
      ac:	10 c2       	rjmp	.+1056   	; 0x4ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0e c2       	rjmp	.+1052   	; 0x4ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c c2       	rjmp	.+1048   	; 0x4ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0a c2       	rjmp	.+1044   	; 0x4ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	08 c2       	rjmp	.+1040   	; 0x4ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	06 c2       	rjmp	.+1036   	; 0x4ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	04 c2       	rjmp	.+1032   	; 0x4ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	02 c2       	rjmp	.+1028   	; 0x4ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	00 c2       	rjmp	.+1024   	; 0x4ce <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fe c1       	rjmp	.+1020   	; 0x4ce <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fc c1       	rjmp	.+1016   	; 0x4ce <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fa c1       	rjmp	.+1012   	; 0x4ce <__bad_interrupt>
      da:	00 00       	nop
      dc:	f8 c1       	rjmp	.+1008   	; 0x4ce <__bad_interrupt>
      de:	00 00       	nop
      e0:	f6 c1       	rjmp	.+1004   	; 0x4ce <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f4 c1       	rjmp	.+1000   	; 0x4ce <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f2 c1       	rjmp	.+996    	; 0x4ce <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f0 c1       	rjmp	.+992    	; 0x4ce <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ee c1       	rjmp	.+988    	; 0x4ce <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ec c1       	rjmp	.+984    	; 0x4ce <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ea c1       	rjmp	.+980    	; 0x4ce <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e8 c1       	rjmp	.+976    	; 0x4ce <__bad_interrupt>
      fe:	00 00       	nop
     100:	e6 c1       	rjmp	.+972    	; 0x4ce <__bad_interrupt>
     102:	00 00       	nop
     104:	e4 c1       	rjmp	.+968    	; 0x4ce <__bad_interrupt>
     106:	00 00       	nop
     108:	e2 c1       	rjmp	.+964    	; 0x4ce <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e0 c1       	rjmp	.+960    	; 0x4ce <__bad_interrupt>
     10e:	00 00       	nop
     110:	de c1       	rjmp	.+956    	; 0x4ce <__bad_interrupt>
     112:	00 00       	nop
     114:	dc c1       	rjmp	.+952    	; 0x4ce <__bad_interrupt>
     116:	00 00       	nop
     118:	da c1       	rjmp	.+948    	; 0x4ce <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d8 c1       	rjmp	.+944    	; 0x4ce <__bad_interrupt>
     11e:	00 00       	nop
     120:	d6 c1       	rjmp	.+940    	; 0x4ce <__bad_interrupt>
     122:	00 00       	nop
     124:	d4 c1       	rjmp	.+936    	; 0x4ce <__bad_interrupt>
     126:	00 00       	nop
     128:	d2 c1       	rjmp	.+932    	; 0x4ce <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d0 c1       	rjmp	.+928    	; 0x4ce <__bad_interrupt>
     12e:	00 00       	nop
     130:	ce c1       	rjmp	.+924    	; 0x4ce <__bad_interrupt>
     132:	00 00       	nop
     134:	cc c1       	rjmp	.+920    	; 0x4ce <__bad_interrupt>
     136:	00 00       	nop
     138:	ca c1       	rjmp	.+916    	; 0x4ce <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c8 c1       	rjmp	.+912    	; 0x4ce <__bad_interrupt>
     13e:	00 00       	nop
     140:	c6 c1       	rjmp	.+908    	; 0x4ce <__bad_interrupt>
     142:	00 00       	nop
     144:	c4 c1       	rjmp	.+904    	; 0x4ce <__bad_interrupt>
     146:	00 00       	nop
     148:	c2 c1       	rjmp	.+900    	; 0x4ce <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c0 c1       	rjmp	.+896    	; 0x4ce <__bad_interrupt>
     14e:	00 00       	nop
     150:	be c1       	rjmp	.+892    	; 0x4ce <__bad_interrupt>
     152:	00 00       	nop
     154:	bc c1       	rjmp	.+888    	; 0x4ce <__bad_interrupt>
     156:	00 00       	nop
     158:	ba c1       	rjmp	.+884    	; 0x4ce <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b8 c1       	rjmp	.+880    	; 0x4ce <__bad_interrupt>
     15e:	00 00       	nop
     160:	b6 c1       	rjmp	.+876    	; 0x4ce <__bad_interrupt>
     162:	00 00       	nop
     164:	b4 c1       	rjmp	.+872    	; 0x4ce <__bad_interrupt>
     166:	00 00       	nop
     168:	b2 c1       	rjmp	.+868    	; 0x4ce <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b0 c1       	rjmp	.+864    	; 0x4ce <__bad_interrupt>
     16e:	00 00       	nop
     170:	ae c1       	rjmp	.+860    	; 0x4ce <__bad_interrupt>
     172:	00 00       	nop
     174:	ac c1       	rjmp	.+856    	; 0x4ce <__bad_interrupt>
     176:	00 00       	nop
     178:	aa c1       	rjmp	.+852    	; 0x4ce <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a8 c1       	rjmp	.+848    	; 0x4ce <__bad_interrupt>
     17e:	00 00       	nop
     180:	a6 c1       	rjmp	.+844    	; 0x4ce <__bad_interrupt>
     182:	00 00       	nop
     184:	a4 c1       	rjmp	.+840    	; 0x4ce <__bad_interrupt>
     186:	00 00       	nop
     188:	a2 c1       	rjmp	.+836    	; 0x4ce <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a0 c1       	rjmp	.+832    	; 0x4ce <__bad_interrupt>
     18e:	00 00       	nop
     190:	9e c1       	rjmp	.+828    	; 0x4ce <__bad_interrupt>
     192:	00 00       	nop
     194:	9c c1       	rjmp	.+824    	; 0x4ce <__bad_interrupt>
     196:	00 00       	nop
     198:	9a c1       	rjmp	.+820    	; 0x4ce <__bad_interrupt>
     19a:	00 00       	nop
     19c:	98 c1       	rjmp	.+816    	; 0x4ce <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	96 c1       	rjmp	.+812    	; 0x4ce <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	94 c1       	rjmp	.+808    	; 0x4ce <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	92 c1       	rjmp	.+804    	; 0x4ce <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	90 c1       	rjmp	.+800    	; 0x4ce <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8e c1       	rjmp	.+796    	; 0x4ce <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8c c1       	rjmp	.+792    	; 0x4ce <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8a c1       	rjmp	.+788    	; 0x4ce <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	88 c1       	rjmp	.+784    	; 0x4ce <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	86 c1       	rjmp	.+780    	; 0x4ce <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	84 c1       	rjmp	.+776    	; 0x4ce <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	82 c1       	rjmp	.+772    	; 0x4ce <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	80 c1       	rjmp	.+768    	; 0x4ce <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7e c1       	rjmp	.+764    	; 0x4ce <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7c c1       	rjmp	.+760    	; 0x4ce <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7a c1       	rjmp	.+756    	; 0x4ce <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	78 c1       	rjmp	.+752    	; 0x4ce <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	76 c1       	rjmp	.+748    	; 0x4ce <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	74 c1       	rjmp	.+744    	; 0x4ce <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	72 c1       	rjmp	.+740    	; 0x4ce <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	70 c1       	rjmp	.+736    	; 0x4ce <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6e c1       	rjmp	.+732    	; 0x4ce <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6c c1       	rjmp	.+728    	; 0x4ce <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6a c1       	rjmp	.+724    	; 0x4ce <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1df6>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65de>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x65b6>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55de>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1db6>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e0 eb       	ldi	r30, 0xB0	; 176
     4a6:	fa e1       	ldi	r31, 0x1A	; 26
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a8 32       	cpi	r26, 0x28	; 40
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a8 e2       	ldi	r26, 0x28	; 40
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	aa 3a       	cpi	r26, 0xAA	; 170
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	99 d7       	rcall	.+3890   	; 0x13fc <main>
     4ca:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <_exit>

000004ce <__bad_interrupt>:
     4ce:	98 cd       	rjmp	.-1232   	; 0x0 <__vectors>

000004d0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d2:	61 50       	subi	r22, 0x01	; 1
     4d4:	71 09       	sbc	r23, r1
     4d6:	81 09       	sbc	r24, r1
     4d8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4da:	61 15       	cp	r22, r1
     4dc:	71 05       	cpc	r23, r1
     4de:	81 05       	cpc	r24, r1
     4e0:	91 05       	cpc	r25, r1
     4e2:	b9 f7       	brne	.-18     	; 0x4d2 <__portable_avr_delay_cycles+0x2>
     4e4:	08 95       	ret

000004e6 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4fe:	00 e0       	ldi	r16, 0x00	; 0
     500:	16 e0       	ldi	r17, 0x06	; 6
     502:	68 94       	set
     504:	ff 24       	eor	r15, r15
     506:	f3 f8       	bld	r15, 3
     508:	f8 01       	movw	r30, r16
     50a:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50c:	64 e0       	ldi	r22, 0x04	; 4
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	dd df       	rcall	.-70     	; 0x4d0 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     516:	f8 01       	movw	r30, r16
     518:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51a:	64 e0       	ldi	r22, 0x04	; 4
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	d6 df       	rcall	.-84     	; 0x4d0 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     524:	0f 2e       	mov	r0, r31
     526:	fb e2       	ldi	r31, 0x2B	; 43
     528:	bf 2e       	mov	r11, r31
     52a:	f0 2d       	mov	r31, r0
     52c:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     52e:	80 ea       	ldi	r24, 0xA0	; 160
     530:	99 e0       	ldi	r25, 0x09	; 9
     532:	1e d4       	rcall	.+2108   	; 0xd70 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     534:	c1 2c       	mov	r12, r1
     536:	d1 2c       	mov	r13, r1
     538:	76 01       	movw	r14, r12
     53a:	00 e4       	ldi	r16, 0x40	; 64
     53c:	12 e4       	ldi	r17, 0x42	; 66
     53e:	2f e0       	ldi	r18, 0x0F	; 15
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	43 e0       	ldi	r20, 0x03	; 3
     544:	be 01       	movw	r22, r28
     546:	6f 5f       	subi	r22, 0xFF	; 255
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	80 ea       	ldi	r24, 0xA0	; 160
     54c:	99 e0       	ldi	r25, 0x09	; 9
     54e:	3f d4       	rcall	.+2174   	; 0xdce <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     550:	00 e6       	ldi	r16, 0x60	; 96
     552:	16 e0       	ldi	r17, 0x06	; 6
     554:	ff 24       	eor	r15, r15
     556:	f3 94       	inc	r15
     558:	f8 01       	movw	r30, r16
     55a:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55c:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     55e:	be 01       	movw	r22, r28
     560:	6f 5f       	subi	r22, 0xFF	; 255
     562:	7f 4f       	sbci	r23, 0xFF	; 255
     564:	80 ea       	ldi	r24, 0xA0	; 160
     566:	99 e0       	ldi	r25, 0x09	; 9
     568:	4c d4       	rcall	.+2200   	; 0xe02 <usart_spi_select_device>
     56a:	f8 01       	movw	r30, r16
     56c:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     56e:	e0 ea       	ldi	r30, 0xA0	; 160
     570:	f9 e0       	ldi	r31, 0x09	; 9
     572:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     574:	85 ff       	sbrs	r24, 5
     576:	fd cf       	rjmp	.-6      	; 0x572 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     578:	80 ea       	ldi	r24, 0xA0	; 160
     57a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     57e:	e0 ea       	ldi	r30, 0xA0	; 160
     580:	f9 e0       	ldi	r31, 0x09	; 9
     582:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     584:	86 ff       	sbrs	r24, 6
     586:	fd cf       	rjmp	.-6      	; 0x582 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     588:	e0 ea       	ldi	r30, 0xA0	; 160
     58a:	f9 e0       	ldi	r31, 0x09	; 9
     58c:	80 e4       	ldi	r24, 0x40	; 64
     58e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     590:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     592:	be 01       	movw	r22, r28
     594:	6f 5f       	subi	r22, 0xFF	; 255
     596:	7f 4f       	sbci	r23, 0xFF	; 255
     598:	80 ea       	ldi	r24, 0xA0	; 160
     59a:	99 e0       	ldi	r25, 0x09	; 9
     59c:	48 d4       	rcall	.+2192   	; 0xe2e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     59e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	be 01       	movw	r22, r28
     5a4:	6f 5f       	subi	r22, 0xFF	; 255
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	80 ea       	ldi	r24, 0xA0	; 160
     5aa:	99 e0       	ldi	r25, 0x09	; 9
     5ac:	2a d4       	rcall	.+2132   	; 0xe02 <usart_spi_select_device>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b4:	e0 ea       	ldi	r30, 0xA0	; 160
     5b6:	f9 e0       	ldi	r31, 0x09	; 9
     5b8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5ba:	85 ff       	sbrs	r24, 5
     5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5be:	86 ea       	ldi	r24, 0xA6	; 166
     5c0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c4:	e0 ea       	ldi	r30, 0xA0	; 160
     5c6:	f9 e0       	ldi	r31, 0x09	; 9
     5c8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5ca:	86 ff       	sbrs	r24, 6
     5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5ce:	e0 ea       	ldi	r30, 0xA0	; 160
     5d0:	f9 e0       	ldi	r31, 0x09	; 9
     5d2:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d4:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d6:	80 81       	ld	r24, Z
     5d8:	be 01       	movw	r22, r28
     5da:	6f 5f       	subi	r22, 0xFF	; 255
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	80 ea       	ldi	r24, 0xA0	; 160
     5e0:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e2:	25 d4       	rcall	.+2122   	; 0xe2e <usart_spi_deselect_device>
     5e4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	be 01       	movw	r22, r28
     5ea:	6f 5f       	subi	r22, 0xFF	; 255
     5ec:	7f 4f       	sbci	r23, 0xFF	; 255
     5ee:	80 ea       	ldi	r24, 0xA0	; 160
     5f0:	99 e0       	ldi	r25, 0x09	; 9
     5f2:	07 d4       	rcall	.+2062   	; 0xe02 <usart_spi_select_device>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fa:	e0 ea       	ldi	r30, 0xA0	; 160
     5fc:	f9 e0       	ldi	r31, 0x09	; 9
     5fe:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     600:	85 ff       	sbrs	r24, 5
     602:	fd cf       	rjmp	.-6      	; 0x5fe <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     604:	88 ec       	ldi	r24, 0xC8	; 200
     606:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60a:	e0 ea       	ldi	r30, 0xA0	; 160
     60c:	f9 e0       	ldi	r31, 0x09	; 9
     60e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     610:	86 ff       	sbrs	r24, 6
     612:	fd cf       	rjmp	.-6      	; 0x60e <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     614:	e0 ea       	ldi	r30, 0xA0	; 160
     616:	f9 e0       	ldi	r31, 0x09	; 9
     618:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     61a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61c:	80 81       	ld	r24, Z
     61e:	be 01       	movw	r22, r28
     620:	6f 5f       	subi	r22, 0xFF	; 255
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	80 ea       	ldi	r24, 0xA0	; 160
     626:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     628:	02 d4       	rcall	.+2052   	; 0xe2e <usart_spi_deselect_device>
     62a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	be 01       	movw	r22, r28
     630:	6f 5f       	subi	r22, 0xFF	; 255
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	80 ea       	ldi	r24, 0xA0	; 160
     636:	99 e0       	ldi	r25, 0x09	; 9
     638:	e4 d3       	rcall	.+1992   	; 0xe02 <usart_spi_select_device>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     640:	e0 ea       	ldi	r30, 0xA0	; 160
     642:	f9 e0       	ldi	r31, 0x09	; 9
     644:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     646:	85 ff       	sbrs	r24, 5
     648:	fd cf       	rjmp	.-6      	; 0x644 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64a:	82 ea       	ldi	r24, 0xA2	; 162
     64c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     650:	e0 ea       	ldi	r30, 0xA0	; 160
     652:	f9 e0       	ldi	r31, 0x09	; 9
     654:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     656:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     658:	fd cf       	rjmp	.-6      	; 0x654 <st7565r_init+0x16e>
     65a:	e0 ea       	ldi	r30, 0xA0	; 160
     65c:	f9 e0       	ldi	r31, 0x09	; 9
     65e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     660:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     662:	80 81       	ld	r24, Z
     664:	be 01       	movw	r22, r28
     666:	6f 5f       	subi	r22, 0xFF	; 255
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	80 ea       	ldi	r24, 0xA0	; 160
     66c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     66e:	df d3       	rcall	.+1982   	; 0xe2e <usart_spi_deselect_device>
     670:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	be 01       	movw	r22, r28
     676:	6f 5f       	subi	r22, 0xFF	; 255
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	80 ea       	ldi	r24, 0xA0	; 160
     67c:	99 e0       	ldi	r25, 0x09	; 9
     67e:	c1 d3       	rcall	.+1922   	; 0xe02 <usart_spi_select_device>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     686:	e0 ea       	ldi	r30, 0xA0	; 160
     688:	f9 e0       	ldi	r31, 0x09	; 9
     68a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68c:	85 ff       	sbrs	r24, 5
     68e:	fd cf       	rjmp	.-6      	; 0x68a <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     690:	8f e2       	ldi	r24, 0x2F	; 47
     692:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     696:	e0 ea       	ldi	r30, 0xA0	; 160
     698:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69a:	81 81       	ldd	r24, Z+1	; 0x01
     69c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     69e:	fd cf       	rjmp	.-6      	; 0x69a <st7565r_init+0x1b4>
     6a0:	e0 ea       	ldi	r30, 0xA0	; 160
     6a2:	f9 e0       	ldi	r31, 0x09	; 9
     6a4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6a8:	80 81       	ld	r24, Z
     6aa:	be 01       	movw	r22, r28
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	80 ea       	ldi	r24, 0xA0	; 160
     6b2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b4:	bc d3       	rcall	.+1912   	; 0xe2e <usart_spi_deselect_device>
     6b6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	be 01       	movw	r22, r28
     6bc:	6f 5f       	subi	r22, 0xFF	; 255
     6be:	7f 4f       	sbci	r23, 0xFF	; 255
     6c0:	80 ea       	ldi	r24, 0xA0	; 160
     6c2:	99 e0       	ldi	r25, 0x09	; 9
     6c4:	9e d3       	rcall	.+1852   	; 0xe02 <usart_spi_select_device>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6cc:	e0 ea       	ldi	r30, 0xA0	; 160
     6ce:	f9 e0       	ldi	r31, 0x09	; 9
     6d0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d2:	85 ff       	sbrs	r24, 5
     6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d6:	88 ef       	ldi	r24, 0xF8	; 248
     6d8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6dc:	e0 ea       	ldi	r30, 0xA0	; 160
     6de:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e0:	81 81       	ldd	r24, Z+1	; 0x01
     6e2:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <st7565r_init+0x1fa>
     6e6:	e0 ea       	ldi	r30, 0xA0	; 160
     6e8:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ea:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ec:	81 83       	std	Z+1, r24	; 0x01
     6ee:	80 81       	ld	r24, Z
     6f0:	be 01       	movw	r22, r28
     6f2:	6f 5f       	subi	r22, 0xFF	; 255
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	80 ea       	ldi	r24, 0xA0	; 160
     6f8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fa:	99 d3       	rcall	.+1842   	; 0xe2e <usart_spi_deselect_device>
     6fc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	be 01       	movw	r22, r28
     702:	6f 5f       	subi	r22, 0xFF	; 255
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	80 ea       	ldi	r24, 0xA0	; 160
     708:	99 e0       	ldi	r25, 0x09	; 9
     70a:	7b d3       	rcall	.+1782   	; 0xe02 <usart_spi_select_device>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     712:	e0 ea       	ldi	r30, 0xA0	; 160
     714:	f9 e0       	ldi	r31, 0x09	; 9
     716:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     718:	85 ff       	sbrs	r24, 5
     71a:	fd cf       	rjmp	.-6      	; 0x716 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71c:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     720:	e0 ea       	ldi	r30, 0xA0	; 160
     722:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     724:	81 81       	ldd	r24, Z+1	; 0x01
     726:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     728:	fd cf       	rjmp	.-6      	; 0x724 <st7565r_init+0x23e>
     72a:	e0 ea       	ldi	r30, 0xA0	; 160
     72c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     72e:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     730:	81 83       	std	Z+1, r24	; 0x01
     732:	80 81       	ld	r24, Z
     734:	be 01       	movw	r22, r28
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	80 ea       	ldi	r24, 0xA0	; 160
     73c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     73e:	77 d3       	rcall	.+1774   	; 0xe2e <usart_spi_deselect_device>
     740:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	be 01       	movw	r22, r28
     746:	6f 5f       	subi	r22, 0xFF	; 255
     748:	7f 4f       	sbci	r23, 0xFF	; 255
     74a:	80 ea       	ldi	r24, 0xA0	; 160
     74c:	99 e0       	ldi	r25, 0x09	; 9
     74e:	59 d3       	rcall	.+1714   	; 0xe02 <usart_spi_select_device>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     756:	e0 ea       	ldi	r30, 0xA0	; 160
     758:	f9 e0       	ldi	r31, 0x09	; 9
     75a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75c:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     75e:	fd cf       	rjmp	.-6      	; 0x75a <st7565r_init+0x274>
     760:	81 e2       	ldi	r24, 0x21	; 33
     762:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     766:	e0 ea       	ldi	r30, 0xA0	; 160
     768:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76c:	86 ff       	sbrs	r24, 6
     76e:	fd cf       	rjmp	.-6      	; 0x76a <st7565r_init+0x284>
     770:	e0 ea       	ldi	r30, 0xA0	; 160
     772:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     774:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     776:	81 83       	std	Z+1, r24	; 0x01
     778:	80 81       	ld	r24, Z
     77a:	be 01       	movw	r22, r28
     77c:	6f 5f       	subi	r22, 0xFF	; 255
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	80 ea       	ldi	r24, 0xA0	; 160
     782:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     784:	54 d3       	rcall	.+1704   	; 0xe2e <usart_spi_deselect_device>
     786:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     788:	89 83       	std	Y+1, r24	; 0x01
     78a:	be 01       	movw	r22, r28
     78c:	6f 5f       	subi	r22, 0xFF	; 255
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	80 ea       	ldi	r24, 0xA0	; 160
     792:	99 e0       	ldi	r25, 0x09	; 9
     794:	36 d3       	rcall	.+1644   	; 0xe02 <usart_spi_select_device>
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79c:	e0 ea       	ldi	r30, 0xA0	; 160
     79e:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a0:	81 81       	ldd	r24, Z+1	; 0x01
     7a2:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a4:	fd cf       	rjmp	.-6      	; 0x7a0 <st7565r_init+0x2ba>
     7a6:	81 e8       	ldi	r24, 0x81	; 129
     7a8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ac:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7ae:	f9 e0       	ldi	r31, 0x09	; 9
     7b0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b2:	86 ff       	sbrs	r24, 6
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <st7565r_init+0x2ca>
     7b6:	e0 ea       	ldi	r30, 0xA0	; 160
     7b8:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ba:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7bc:	81 83       	std	Z+1, r24	; 0x01
     7be:	80 81       	ld	r24, Z
     7c0:	be 01       	movw	r22, r28
     7c2:	6f 5f       	subi	r22, 0xFF	; 255
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
     7c6:	80 ea       	ldi	r24, 0xA0	; 160
     7c8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7ca:	31 d3       	rcall	.+1634   	; 0xe2e <usart_spi_deselect_device>
     7cc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	be 01       	movw	r22, r28
     7d2:	6f 5f       	subi	r22, 0xFF	; 255
     7d4:	7f 4f       	sbci	r23, 0xFF	; 255
     7d6:	80 ea       	ldi	r24, 0xA0	; 160
     7d8:	99 e0       	ldi	r25, 0x09	; 9
     7da:	13 d3       	rcall	.+1574   	; 0xe02 <usart_spi_select_device>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e2:	e0 ea       	ldi	r30, 0xA0	; 160
     7e4:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e6:	81 81       	ldd	r24, Z+1	; 0x01
     7e8:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <st7565r_init+0x300>
     7ec:	81 e2       	ldi	r24, 0x21	; 33
     7ee:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f2:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f4:	f9 e0       	ldi	r31, 0x09	; 9
     7f6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7f8:	86 ff       	sbrs	r24, 6
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <st7565r_init+0x310>
     7fc:	e0 ea       	ldi	r30, 0xA0	; 160
     7fe:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     800:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     802:	81 83       	std	Z+1, r24	; 0x01
     804:	80 81       	ld	r24, Z
     806:	be 01       	movw	r22, r28
     808:	6f 5f       	subi	r22, 0xFF	; 255
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	80 ea       	ldi	r24, 0xA0	; 160
     80e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     810:	0e d3       	rcall	.+1564   	; 0xe2e <usart_spi_deselect_device>
     812:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	be 01       	movw	r22, r28
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	80 ea       	ldi	r24, 0xA0	; 160
     81e:	99 e0       	ldi	r25, 0x09	; 9
     820:	f0 d2       	rcall	.+1504   	; 0xe02 <usart_spi_select_device>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     828:	e0 ea       	ldi	r30, 0xA0	; 160
     82a:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82c:	81 81       	ldd	r24, Z+1	; 0x01
     82e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     830:	fd cf       	rjmp	.-6      	; 0x82c <st7565r_init+0x346>
     832:	8f ea       	ldi	r24, 0xAF	; 175
     834:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     838:	e0 ea       	ldi	r30, 0xA0	; 160
     83a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83c:	81 81       	ldd	r24, Z+1	; 0x01
     83e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     840:	fd cf       	rjmp	.-6      	; 0x83c <st7565r_init+0x356>
     842:	e0 ea       	ldi	r30, 0xA0	; 160
     844:	f9 e0       	ldi	r31, 0x09	; 9
     846:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     848:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84a:	80 81       	ld	r24, Z
     84c:	be 01       	movw	r22, r28
     84e:	6f 5f       	subi	r22, 0xFF	; 255
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	80 ea       	ldi	r24, 0xA0	; 160
     854:	99 e0       	ldi	r25, 0x09	; 9
     856:	eb d2       	rcall	.+1494   	; 0xe2e <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	08 95       	ret

0000086e <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     878:	9f b7       	in	r25, 0x3f	; 63
     87a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     87c:	f8 94       	cli
	return flags;
     87e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     880:	e8 2f       	mov	r30, r24
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	e0 59       	subi	r30, 0x90	; 144
     886:	ff 4f       	sbci	r31, 0xFF	; 255
     888:	60 95       	com	r22
     88a:	80 81       	ld	r24, Z
     88c:	68 23       	and	r22, r24
     88e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     890:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     892:	0f 90       	pop	r0
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	1f 92       	push	r1
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	08 2f       	mov	r16, r24
     8ac:	f6 2e       	mov	r15, r22
     8ae:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8b0:	1a d1       	rcall	.+564    	; 0xae6 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8b2:	0f 70       	andi	r16, 0x0F	; 15
     8b4:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8b6:	8b e2       	ldi	r24, 0x2B	; 43
     8b8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8ba:	be 01       	movw	r22, r28
     8bc:	6f 5f       	subi	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	80 ea       	ldi	r24, 0xA0	; 160
     8c2:	99 e0       	ldi	r25, 0x09	; 9
     8c4:	9e d2       	rcall	.+1340   	; 0xe02 <usart_spi_select_device>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8cc:	e0 ea       	ldi	r30, 0xA0	; 160
     8ce:	f9 e0       	ldi	r31, 0x09	; 9
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8d2:	95 ff       	sbrs	r25, 5
     8d4:	fd cf       	rjmp	.-6      	; 0x8d0 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8d6:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8da:	e0 ea       	ldi	r30, 0xA0	; 160
     8dc:	f9 e0       	ldi	r31, 0x09	; 9
     8de:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8e0:	86 ff       	sbrs	r24, 6
     8e2:	fd cf       	rjmp	.-6      	; 0x8de <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8e4:	e0 ea       	ldi	r30, 0xA0	; 160
     8e6:	f9 e0       	ldi	r31, 0x09	; 9
     8e8:	80 e4       	ldi	r24, 0x40	; 64
     8ea:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8ec:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8ee:	be 01       	movw	r22, r28
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	80 ea       	ldi	r24, 0xA0	; 160
     8f6:	99 e0       	ldi	r25, 0x09	; 9
     8f8:	9a d2       	rcall	.+1332   	; 0xe2e <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8fa:	0f 2d       	mov	r16, r15
     8fc:	0f 77       	andi	r16, 0x7F	; 127
     8fe:	02 95       	swap	r16
     900:	0f 70       	andi	r16, 0x0F	; 15
     902:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     904:	8b e2       	ldi	r24, 0x2B	; 43
     906:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	80 ea       	ldi	r24, 0xA0	; 160
     910:	99 e0       	ldi	r25, 0x09	; 9
     912:	77 d2       	rcall	.+1262   	; 0xe02 <usart_spi_select_device>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     91a:	e0 ea       	ldi	r30, 0xA0	; 160
     91c:	f9 e0       	ldi	r31, 0x09	; 9
     91e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     920:	85 ff       	sbrs	r24, 5
     922:	fd cf       	rjmp	.-6      	; 0x91e <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     924:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     928:	e0 ea       	ldi	r30, 0xA0	; 160
     92a:	f9 e0       	ldi	r31, 0x09	; 9
     92c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     92e:	86 ff       	sbrs	r24, 6
     930:	fd cf       	rjmp	.-6      	; 0x92c <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     932:	e0 ea       	ldi	r30, 0xA0	; 160
     934:	f9 e0       	ldi	r31, 0x09	; 9
     936:	80 e4       	ldi	r24, 0x40	; 64
     938:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     93a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     93c:	be 01       	movw	r22, r28
     93e:	6f 5f       	subi	r22, 0xFF	; 255
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	80 ea       	ldi	r24, 0xA0	; 160
     944:	99 e0       	ldi	r25, 0x09	; 9
     946:	73 d2       	rcall	.+1254   	; 0xe2e <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     948:	0f 2d       	mov	r16, r15
     94a:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     94c:	8b e2       	ldi	r24, 0x2B	; 43
     94e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     950:	be 01       	movw	r22, r28
     952:	6f 5f       	subi	r22, 0xFF	; 255
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	80 ea       	ldi	r24, 0xA0	; 160
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	53 d2       	rcall	.+1190   	; 0xe02 <usart_spi_select_device>
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     962:	e0 ea       	ldi	r30, 0xA0	; 160
     964:	f9 e0       	ldi	r31, 0x09	; 9
     966:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     968:	85 ff       	sbrs	r24, 5
     96a:	fd cf       	rjmp	.-6      	; 0x966 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     96c:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     970:	e0 ea       	ldi	r30, 0xA0	; 160
     972:	f9 e0       	ldi	r31, 0x09	; 9
     974:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     976:	86 ff       	sbrs	r24, 6
     978:	fd cf       	rjmp	.-6      	; 0x974 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     97a:	e0 ea       	ldi	r30, 0xA0	; 160
     97c:	f9 e0       	ldi	r31, 0x09	; 9
     97e:	80 e4       	ldi	r24, 0x40	; 64
     980:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     982:	80 81       	ld	r24, Z
     984:	be 01       	movw	r22, r28
     986:	6f 5f       	subi	r22, 0xFF	; 255
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	80 ea       	ldi	r24, 0xA0	; 160
     98c:	99 e0       	ldi	r25, 0x09	; 9
     98e:	4f d2       	rcall	.+1182   	; 0xe2e <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     990:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	be 01       	movw	r22, r28
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	80 ea       	ldi	r24, 0xA0	; 160
     99c:	99 e0       	ldi	r25, 0x09	; 9
     99e:	31 d2       	rcall	.+1122   	; 0xe02 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9a6:	e0 ea       	ldi	r30, 0xA0	; 160
     9a8:	f9 e0       	ldi	r31, 0x09	; 9
     9aa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9ac:	85 ff       	sbrs	r24, 5
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9b0:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9b4:	e0 ea       	ldi	r30, 0xA0	; 160
     9b6:	f9 e0       	ldi	r31, 0x09	; 9
     9b8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9ba:	86 ff       	sbrs	r24, 6
     9bc:	fd cf       	rjmp	.-6      	; 0x9b8 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9be:	e0 ea       	ldi	r30, 0xA0	; 160
     9c0:	f9 e0       	ldi	r31, 0x09	; 9
     9c2:	80 e4       	ldi	r24, 0x40	; 64
     9c4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9c6:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9ce:	be 01       	movw	r22, r28
     9d0:	6f 5f       	subi	r22, 0xFF	; 255
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	80 ea       	ldi	r24, 0xA0	; 160
     9d6:	99 e0       	ldi	r25, 0x09	; 9
     9d8:	2a d2       	rcall	.+1108   	; 0xe2e <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9da:	0f 90       	pop	r0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	08 95       	ret

000009e8 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	1f 92       	push	r1
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9f6:	88 e2       	ldi	r24, 0x28	; 40
     9f8:	90 e2       	ldi	r25, 0x20	; 32
     9fa:	70 d0       	rcall	.+224    	; 0xadc <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9fc:	74 dd       	rcall	.-1304   	; 0x4e6 <st7565r_init>
     9fe:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a00:	89 83       	std	Y+1, r24	; 0x01
     a02:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a04:	6f 5f       	subi	r22, 0xFF	; 255
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	80 ea       	ldi	r24, 0xA0	; 160
     a0a:	99 e0       	ldi	r25, 0x09	; 9
     a0c:	fa d1       	rcall	.+1012   	; 0xe02 <usart_spi_select_device>
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     a14:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a16:	f9 e0       	ldi	r31, 0x09	; 9
     a18:	81 81       	ldd	r24, Z+1	; 0x01
     a1a:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <gfx_mono_st7565r_init+0x30>
     a1e:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a20:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a24:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a26:	f9 e0       	ldi	r31, 0x09	; 9
     a28:	81 81       	ldd	r24, Z+1	; 0x01
     a2a:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <gfx_mono_st7565r_init+0x40>
     a2e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a30:	f9 e0       	ldi	r31, 0x09	; 9
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	81 83       	std	Z+1, r24	; 0x01
     a36:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a38:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a3a:	6f 5f       	subi	r22, 0xFF	; 255
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	80 ea       	ldi	r24, 0xA0	; 160
     a40:	99 e0       	ldi	r25, 0x09	; 9
     a42:	f5 d1       	rcall	.+1002   	; 0xe2e <usart_spi_deselect_device>
     a44:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a46:	0a c0       	rjmp	.+20     	; 0xa5c <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	61 2f       	mov	r22, r17
     a4c:	80 2f       	mov	r24, r16
     a4e:	25 df       	rcall	.-438    	; 0x89a <gfx_mono_st7565r_put_byte>
     a50:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a52:	10 38       	cpi	r17, 0x80	; 128
     a54:	c9 f7       	brne	.-14     	; 0xa48 <gfx_mono_st7565r_init+0x60>
     a56:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a58:	04 30       	cpi	r16, 0x04	; 4
     a5a:	11 f0       	breq	.+4      	; 0xa60 <gfx_mono_st7565r_init+0x78>
     a5c:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a5e:	f4 cf       	rjmp	.-24     	; 0xa48 <gfx_mono_st7565r_init+0x60>
     a60:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <gfx_mono_st7565r_draw_pixel>:
     a6c:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a76:	88 23       	and	r24, r24
     a78:	4c f1       	brlt	.+82     	; 0xacc <gfx_mono_st7565r_draw_pixel+0x60>
     a7a:	60 32       	cpi	r22, 0x20	; 32
     a7c:	38 f5       	brcc	.+78     	; 0xacc <gfx_mono_st7565r_draw_pixel+0x60>
     a7e:	d4 2f       	mov	r29, r20
     a80:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a82:	f6 2e       	mov	r15, r22
     a84:	f6 94       	lsr	r15
     a86:	f6 94       	lsr	r15
     a88:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	88 e0       	ldi	r24, 0x08	; 8
     a8e:	f8 9e       	mul	r15, r24
     a90:	60 19       	sub	r22, r0
     a92:	71 09       	sbc	r23, r1
     a94:	11 24       	eor	r1, r1
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	8c 01       	movw	r16, r24
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x36>
     a9e:	00 0f       	add	r16, r16
     aa0:	11 1f       	adc	r17, r17
     aa2:	6a 95       	dec	r22
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aa6:	6c 2f       	mov	r22, r28
     aa8:	8f 2d       	mov	r24, r15
     aaa:	2b d0       	rcall	.+86     	; 0xb02 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     aac:	d1 30       	cpi	r29, 0x01	; 1
     aae:	21 f0       	breq	.+8      	; 0xab8 <gfx_mono_st7565r_draw_pixel+0x4c>
     ab0:	28 f0       	brcs	.+10     	; 0xabc <gfx_mono_st7565r_draw_pixel+0x50>
     ab2:	d2 30       	cpi	r29, 0x02	; 2
     ab4:	31 f0       	breq	.+12     	; 0xac2 <gfx_mono_st7565r_draw_pixel+0x56>
     ab6:	06 c0       	rjmp	.+12     	; 0xac4 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     ab8:	80 2b       	or	r24, r16
		break;
     aba:	04 c0       	rjmp	.+8      	; 0xac4 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     abc:	00 95       	com	r16
     abe:	80 23       	and	r24, r16
		break;
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     ac2:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     ac4:	48 2f       	mov	r20, r24
     ac6:	6c 2f       	mov	r22, r28
     ac8:	8f 2d       	mov	r24, r15
     aca:	e7 de       	rcall	.-562    	; 0x89a <gfx_mono_st7565r_put_byte>
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	08 95       	ret

00000ad8 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     ada:	08 95       	ret

00000adc <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     adc:	80 93 28 22 	sts	0x2228, r24	; 0x802228 <fbpointer>
     ae0:	90 93 29 22 	sts	0x2229, r25	; 0x802229 <fbpointer+0x1>
     ae4:	08 95       	ret

00000ae6 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     ae6:	20 91 28 22 	lds	r18, 0x2228	; 0x802228 <fbpointer>
     aea:	30 91 29 22 	lds	r19, 0x2229	; 0x802229 <fbpointer+0x1>
     aee:	90 e8       	ldi	r25, 0x80	; 128
     af0:	89 9f       	mul	r24, r25
     af2:	20 0d       	add	r18, r0
     af4:	31 1d       	adc	r19, r1
     af6:	11 24       	eor	r1, r1
     af8:	f9 01       	movw	r30, r18
     afa:	e6 0f       	add	r30, r22
     afc:	f1 1d       	adc	r31, r1
     afe:	40 83       	st	Z, r20
     b00:	08 95       	ret

00000b02 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b02:	20 91 28 22 	lds	r18, 0x2228	; 0x802228 <fbpointer>
     b06:	30 91 29 22 	lds	r19, 0x2229	; 0x802229 <fbpointer+0x1>
     b0a:	90 e8       	ldi	r25, 0x80	; 128
     b0c:	89 9f       	mul	r24, r25
     b0e:	20 0d       	add	r18, r0
     b10:	31 1d       	adc	r19, r1
     b12:	11 24       	eor	r1, r1
     b14:	f9 01       	movw	r30, r18
     b16:	e6 0f       	add	r30, r22
     b18:	f1 1d       	adc	r31, r1
}
     b1a:	80 81       	ld	r24, Z
     b1c:	08 95       	ret

00000b1e <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	e4 2f       	mov	r30, r20
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	e8 0f       	add	r30, r24
     b2e:	f1 1d       	adc	r31, r1
     b30:	e1 38       	cpi	r30, 0x81	; 129
     b32:	f1 05       	cpc	r31, r1
     b34:	1c f0       	brlt	.+6      	; 0xb3c <gfx_mono_generic_draw_horizontal_line+0x1e>
     b36:	c0 e8       	ldi	r28, 0x80	; 128
     b38:	4c 2f       	mov	r20, r28
     b3a:	48 1b       	sub	r20, r24
     b3c:	44 23       	and	r20, r20
     b3e:	09 f4       	brne	.+2      	; 0xb42 <gfx_mono_generic_draw_horizontal_line+0x24>
     b40:	4a c0       	rjmp	.+148    	; 0xbd6 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b42:	d6 2f       	mov	r29, r22
     b44:	d6 95       	lsr	r29
     b46:	d6 95       	lsr	r29
     b48:	d6 95       	lsr	r29
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	98 e0       	ldi	r25, 0x08	; 8
     b4e:	d9 9f       	mul	r29, r25
     b50:	60 19       	sub	r22, r0
     b52:	71 09       	sbc	r23, r1
     b54:	11 24       	eor	r1, r1
     b56:	e1 e0       	ldi	r30, 0x01	; 1
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	df 01       	movw	r26, r30
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <gfx_mono_generic_draw_horizontal_line+0x44>
     b5e:	aa 0f       	add	r26, r26
     b60:	bb 1f       	adc	r27, r27
     b62:	6a 95       	dec	r22
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <gfx_mono_generic_draw_horizontal_line+0x40>
     b66:	fa 2e       	mov	r15, r26
     b68:	21 30       	cpi	r18, 0x01	; 1
     b6a:	21 f0       	breq	.+8      	; 0xb74 <gfx_mono_generic_draw_horizontal_line+0x56>
     b6c:	98 f0       	brcs	.+38     	; 0xb94 <gfx_mono_generic_draw_horizontal_line+0x76>
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	19 f1       	breq	.+70     	; 0xbb8 <gfx_mono_generic_draw_horizontal_line+0x9a>
     b72:	31 c0       	rjmp	.+98     	; 0xbd6 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b74:	c4 2f       	mov	r28, r20
     b76:	1f ef       	ldi	r17, 0xFF	; 255
     b78:	18 0f       	add	r17, r24
     b7a:	01 2f       	mov	r16, r17
     b7c:	0c 0f       	add	r16, r28
     b7e:	60 2f       	mov	r22, r16
     b80:	8d 2f       	mov	r24, r29
     b82:	aa df       	rcall	.-172    	; 0xad8 <gfx_mono_st7565r_get_byte>
     b84:	4f 2d       	mov	r20, r15
     b86:	48 2b       	or	r20, r24
     b88:	60 2f       	mov	r22, r16
     b8a:	8d 2f       	mov	r24, r29
     b8c:	86 de       	rcall	.-756    	; 0x89a <gfx_mono_st7565r_put_byte>
     b8e:	c1 50       	subi	r28, 0x01	; 1
     b90:	a1 f7       	brne	.-24     	; 0xb7a <gfx_mono_generic_draw_horizontal_line+0x5c>
     b92:	21 c0       	rjmp	.+66     	; 0xbd6 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b94:	c4 2f       	mov	r28, r20
     b96:	1f ef       	ldi	r17, 0xFF	; 255
     b98:	18 0f       	add	r17, r24
     b9a:	fa 2e       	mov	r15, r26
     b9c:	f0 94       	com	r15
     b9e:	01 2f       	mov	r16, r17
     ba0:	0c 0f       	add	r16, r28
     ba2:	60 2f       	mov	r22, r16
     ba4:	8d 2f       	mov	r24, r29
     ba6:	98 df       	rcall	.-208    	; 0xad8 <gfx_mono_st7565r_get_byte>
     ba8:	4f 2d       	mov	r20, r15
     baa:	48 23       	and	r20, r24
     bac:	60 2f       	mov	r22, r16
     bae:	8d 2f       	mov	r24, r29
     bb0:	74 de       	rcall	.-792    	; 0x89a <gfx_mono_st7565r_put_byte>
     bb2:	c1 50       	subi	r28, 0x01	; 1
     bb4:	a1 f7       	brne	.-24     	; 0xb9e <gfx_mono_generic_draw_horizontal_line+0x80>
     bb6:	0f c0       	rjmp	.+30     	; 0xbd6 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bb8:	c4 2f       	mov	r28, r20
     bba:	1f ef       	ldi	r17, 0xFF	; 255
     bbc:	18 0f       	add	r17, r24
     bbe:	01 2f       	mov	r16, r17
     bc0:	0c 0f       	add	r16, r28
     bc2:	60 2f       	mov	r22, r16
     bc4:	8d 2f       	mov	r24, r29
     bc6:	88 df       	rcall	.-240    	; 0xad8 <gfx_mono_st7565r_get_byte>
     bc8:	4f 2d       	mov	r20, r15
     bca:	48 27       	eor	r20, r24
     bcc:	60 2f       	mov	r22, r16
     bce:	8d 2f       	mov	r24, r29
     bd0:	64 de       	rcall	.-824    	; 0x89a <gfx_mono_st7565r_put_byte>
     bd2:	c1 50       	subi	r28, 0x01	; 1
     bd4:	a1 f7       	brne	.-24     	; 0xbbe <gfx_mono_generic_draw_horizontal_line+0xa0>
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	08 95       	ret

00000be2 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
	if (height == 0) {
     bec:	22 23       	and	r18, r18
     bee:	69 f0       	breq	.+26     	; 0xc0a <gfx_mono_generic_draw_filled_rect+0x28>
     bf0:	f4 2e       	mov	r15, r20
     bf2:	18 2f       	mov	r17, r24
     bf4:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     bf6:	df ef       	ldi	r29, 0xFF	; 255
     bf8:	d6 0f       	add	r29, r22
     bfa:	6d 2f       	mov	r22, r29
     bfc:	6c 0f       	add	r22, r28
     bfe:	20 2f       	mov	r18, r16
     c00:	4f 2d       	mov	r20, r15
     c02:	81 2f       	mov	r24, r17
     c04:	8c df       	rcall	.-232    	; 0xb1e <gfx_mono_generic_draw_horizontal_line>
     c06:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c08:	c1 f7       	brne	.-16     	; 0xbfa <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	08 95       	ret

00000c16 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c16:	af 92       	push	r10
     c18:	bf 92       	push	r11
     c1a:	cf 92       	push	r12
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	c8 2f       	mov	r28, r24
     c2c:	e6 2e       	mov	r14, r22
     c2e:	b4 2e       	mov	r11, r20
     c30:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     c32:	00 e0       	ldi	r16, 0x00	; 0
     c34:	f9 01       	movw	r30, r18
     c36:	24 81       	ldd	r18, Z+4	; 0x04
     c38:	43 81       	ldd	r20, Z+3	; 0x03
     c3a:	6b 2d       	mov	r22, r11
     c3c:	8e 2d       	mov	r24, r14
     c3e:	d1 df       	rcall	.-94     	; 0xbe2 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     c40:	f6 01       	movw	r30, r12
     c42:	80 81       	ld	r24, Z
     c44:	81 11       	cpse	r24, r1
     c46:	39 c0       	rjmp	.+114    	; 0xcba <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     c48:	83 81       	ldd	r24, Z+3	; 0x03
     c4a:	28 2f       	mov	r18, r24
     c4c:	26 95       	lsr	r18
     c4e:	26 95       	lsr	r18
     c50:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     c52:	87 70       	andi	r24, 0x07	; 7
     c54:	09 f0       	breq	.+2      	; 0xc58 <gfx_mono_draw_char+0x42>
		char_row_size++;
     c56:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     c58:	f6 01       	movw	r30, r12
     c5a:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     c5c:	8c 2f       	mov	r24, r28
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	35 81       	ldd	r19, Z+5	; 0x05
     c62:	83 1b       	sub	r24, r19
     c64:	91 09       	sbc	r25, r1
     c66:	2a 9d       	mul	r18, r10
     c68:	90 01       	movw	r18, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	82 9f       	mul	r24, r18
     c6e:	a0 01       	movw	r20, r0
     c70:	83 9f       	mul	r24, r19
     c72:	50 0d       	add	r21, r0
     c74:	92 9f       	mul	r25, r18
     c76:	50 0d       	add	r21, r0
     c78:	11 24       	eor	r1, r1
     c7a:	01 81       	ldd	r16, Z+1	; 0x01
     c7c:	12 81       	ldd	r17, Z+2	; 0x02
     c7e:	04 0f       	add	r16, r20
     c80:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     c82:	f6 01       	movw	r30, r12
     c84:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     c86:	ff 20       	and	r15, r15
     c88:	a1 f0       	breq	.+40     	; 0xcb2 <gfx_mono_draw_char+0x9c>
     c8a:	d0 e0       	ldi	r29, 0x00	; 0
     c8c:	c0 e0       	ldi	r28, 0x00	; 0
     c8e:	8e 2d       	mov	r24, r14
     c90:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     c92:	9c 2f       	mov	r25, r28
     c94:	97 70       	andi	r25, 0x07	; 7
     c96:	21 f4       	brne	.+8      	; 0xca0 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     c98:	f8 01       	movw	r30, r16
     c9a:	d4 91       	lpm	r29, Z
				glyph_data++;
     c9c:	0f 5f       	subi	r16, 0xFF	; 255
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     ca0:	dd 23       	and	r29, r29
     ca2:	1c f4       	brge	.+6      	; 0xcaa <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	6b 2d       	mov	r22, r11
     ca8:	e1 de       	rcall	.-574    	; 0xa6c <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     caa:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     cac:	cf 5f       	subi	r28, 0xFF	; 255
     cae:	fc 12       	cpse	r15, r28
     cb0:	ee cf       	rjmp	.-36     	; 0xc8e <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     cb2:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     cb4:	aa 94       	dec	r10
	} while (rows_left > 0);
     cb6:	a1 10       	cpse	r10, r1
     cb8:	e4 cf       	rjmp	.-56     	; 0xc82 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	08 95       	ret

00000cd0 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     cd0:	df 92       	push	r13
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	d6 2e       	mov	r13, r22
     ce0:	04 2f       	mov	r16, r20
     ce2:	79 01       	movw	r14, r18
     ce4:	ec 01       	movw	r28, r24
     ce6:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     ce8:	89 91       	ld	r24, Y+
     cea:	8a 30       	cpi	r24, 0x0A	; 10
     cec:	31 f4       	brne	.+12     	; 0xcfa <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     cee:	f7 01       	movw	r30, r14
     cf0:	84 81       	ldd	r24, Z+4	; 0x04
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     cf6:	1d 2d       	mov	r17, r13
     cf8:	09 c0       	rjmp	.+18     	; 0xd0c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     cfa:	8d 30       	cpi	r24, 0x0D	; 13
     cfc:	39 f0       	breq	.+14     	; 0xd0c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     cfe:	97 01       	movw	r18, r14
     d00:	40 2f       	mov	r20, r16
     d02:	61 2f       	mov	r22, r17
     d04:	88 df       	rcall	.-240    	; 0xc16 <gfx_mono_draw_char>
			x += font->width;
     d06:	f7 01       	movw	r30, r14
     d08:	83 81       	ldd	r24, Z+3	; 0x03
     d0a:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d0c:	88 81       	ld	r24, Y
     d0e:	81 11       	cpse	r24, r1
     d10:	eb cf       	rjmp	.-42     	; 0xce8 <gfx_mono_draw_string+0x18>
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	08 95       	ret

00000d22 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     d2c:	c6 2f       	mov	r28, r22
     d2e:	d0 e0       	ldi	r29, 0x00	; 0
     d30:	de 01       	movw	r26, r28
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <ioport_configure_port_pin+0x18>
     d36:	b5 95       	asr	r27
     d38:	a7 95       	ror	r26
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <ioport_configure_port_pin+0x14>
     d3e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d40:	50 8b       	std	Z+16, r21	; 0x10
     d42:	2f 5f       	subi	r18, 0xFF	; 255
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     d48:	28 30       	cpi	r18, 0x08	; 8
     d4a:	31 05       	cpc	r19, r1
     d4c:	89 f7       	brne	.-30     	; 0xd30 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     d4e:	40 ff       	sbrs	r20, 0
     d50:	0a c0       	rjmp	.+20     	; 0xd66 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     d52:	41 ff       	sbrs	r20, 1
     d54:	03 c0       	rjmp	.+6      	; 0xd5c <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     d56:	fc 01       	movw	r30, r24
     d58:	65 83       	std	Z+5, r22	; 0x05
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     d5c:	fc 01       	movw	r30, r24
     d5e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     d60:	fc 01       	movw	r30, r24
     d62:	61 83       	std	Z+1, r22	; 0x01
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     d66:	fc 01       	movw	r30, r24
     d68:	62 83       	std	Z+2, r22	; 0x02
	}
}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     d70:	80 3a       	cpi	r24, 0xA0	; 160
     d72:	28 e0       	ldi	r18, 0x08	; 8
     d74:	92 07       	cpc	r25, r18
     d76:	21 f4       	brne	.+8      	; 0xd80 <usart_spi_init+0x10>
     d78:	60 e1       	ldi	r22, 0x10	; 16
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	78 cd       	rjmp	.-1296   	; 0x86e <sysclk_enable_module>
     d7e:	08 95       	ret
     d80:	80 3b       	cpi	r24, 0xB0	; 176
     d82:	28 e0       	ldi	r18, 0x08	; 8
     d84:	92 07       	cpc	r25, r18
     d86:	21 f4       	brne	.+8      	; 0xd90 <usart_spi_init+0x20>
     d88:	60 e2       	ldi	r22, 0x20	; 32
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	70 cd       	rjmp	.-1312   	; 0x86e <sysclk_enable_module>
     d8e:	08 95       	ret
     d90:	80 3a       	cpi	r24, 0xA0	; 160
     d92:	29 e0       	ldi	r18, 0x09	; 9
     d94:	92 07       	cpc	r25, r18
     d96:	21 f4       	brne	.+8      	; 0xda0 <usart_spi_init+0x30>
     d98:	60 e1       	ldi	r22, 0x10	; 16
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	68 cd       	rjmp	.-1328   	; 0x86e <sysclk_enable_module>
     d9e:	08 95       	ret
     da0:	80 3b       	cpi	r24, 0xB0	; 176
     da2:	29 e0       	ldi	r18, 0x09	; 9
     da4:	92 07       	cpc	r25, r18
     da6:	21 f4       	brne	.+8      	; 0xdb0 <usart_spi_init+0x40>
     da8:	60 e2       	ldi	r22, 0x20	; 32
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	60 cd       	rjmp	.-1344   	; 0x86e <sysclk_enable_module>
     dae:	08 95       	ret
     db0:	80 3a       	cpi	r24, 0xA0	; 160
     db2:	2a e0       	ldi	r18, 0x0A	; 10
     db4:	92 07       	cpc	r25, r18
     db6:	21 f4       	brne	.+8      	; 0xdc0 <usart_spi_init+0x50>
     db8:	60 e1       	ldi	r22, 0x10	; 16
     dba:	85 e0       	ldi	r24, 0x05	; 5
     dbc:	58 cd       	rjmp	.-1360   	; 0x86e <sysclk_enable_module>
     dbe:	08 95       	ret
     dc0:	80 3a       	cpi	r24, 0xA0	; 160
     dc2:	9b 40       	sbci	r25, 0x0B	; 11
     dc4:	19 f4       	brne	.+6      	; 0xdcc <usart_spi_init+0x5c>
     dc6:	60 e1       	ldi	r22, 0x10	; 16
     dc8:	86 e0       	ldi	r24, 0x06	; 6
     dca:	51 cd       	rjmp	.-1374   	; 0x86e <sysclk_enable_module>
     dcc:	08 95       	ret

00000dce <usart_spi_setup_device>:
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <usart_spi_setup_device+0xa>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <usart_spi_setup_device+0xc>
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	09 83       	std	Y+1, r16	; 0x01
     de0:	1a 83       	std	Y+2, r17	; 0x02
     de2:	2b 83       	std	Y+3, r18	; 0x03
     de4:	3c 83       	std	Y+4, r19	; 0x04
     de6:	4d 83       	std	Y+5, r20	; 0x05
     de8:	1e 82       	std	Y+6, r1	; 0x06
     dea:	be 01       	movw	r22, r28
     dec:	6f 5f       	subi	r22, 0xFF	; 255
     dee:	7f 4f       	sbci	r23, 0xFF	; 255
     df0:	02 d1       	rcall	.+516    	; 0xff6 <usart_init_spi>
     df2:	26 96       	adiw	r28, 0x06	; 6
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     e02:	fb 01       	movw	r30, r22
     e04:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e06:	e8 2f       	mov	r30, r24
     e08:	e6 95       	lsr	r30
     e0a:	e6 95       	lsr	r30
     e0c:	e6 95       	lsr	r30
     e0e:	40 e2       	ldi	r20, 0x20	; 32
     e10:	e4 9f       	mul	r30, r20
     e12:	f0 01       	movw	r30, r0
     e14:	11 24       	eor	r1, r1
     e16:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e18:	87 70       	andi	r24, 0x07	; 7
     e1a:	21 e0       	ldi	r18, 0x01	; 1
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	a9 01       	movw	r20, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <usart_spi_select_device+0x24>
     e22:	44 0f       	add	r20, r20
     e24:	55 1f       	adc	r21, r21
     e26:	8a 95       	dec	r24
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e2a:	46 83       	std	Z+6, r20	; 0x06
     e2c:	08 95       	ret

00000e2e <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e2e:	fb 01       	movw	r30, r22
     e30:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e32:	e8 2f       	mov	r30, r24
     e34:	e6 95       	lsr	r30
     e36:	e6 95       	lsr	r30
     e38:	e6 95       	lsr	r30
     e3a:	40 e2       	ldi	r20, 0x20	; 32
     e3c:	e4 9f       	mul	r30, r20
     e3e:	f0 01       	movw	r30, r0
     e40:	11 24       	eor	r1, r1
     e42:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e44:	87 70       	andi	r24, 0x07	; 7
     e46:	21 e0       	ldi	r18, 0x01	; 1
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	a9 01       	movw	r20, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <usart_spi_deselect_device+0x24>
     e4e:	44 0f       	add	r20, r20
     e50:	55 1f       	adc	r21, r21
     e52:	8a 95       	dec	r24
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e56:	45 83       	std	Z+5, r20	; 0x05
     e58:	08 95       	ret

00000e5a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     e5a:	43 e0       	ldi	r20, 0x03	; 3
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	80 ee       	ldi	r24, 0xE0	; 224
     e62:	97 e0       	ldi	r25, 0x07	; 7
     e64:	5e df       	rcall	.-324    	; 0xd22 <ioport_configure_port_pin>
     e66:	43 e0       	ldi	r20, 0x03	; 3
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	62 e0       	ldi	r22, 0x02	; 2
     e6c:	80 ee       	ldi	r24, 0xE0	; 224
     e6e:	97 e0       	ldi	r25, 0x07	; 7
     e70:	58 df       	rcall	.-336    	; 0xd22 <ioport_configure_port_pin>
     e72:	43 e0       	ldi	r20, 0x03	; 3
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	60 e1       	ldi	r22, 0x10	; 16
     e78:	80 e6       	ldi	r24, 0x60	; 96
     e7a:	96 e0       	ldi	r25, 0x06	; 6
     e7c:	52 df       	rcall	.-348    	; 0xd22 <ioport_configure_port_pin>
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	50 e4       	ldi	r21, 0x40	; 64
     e82:	60 e2       	ldi	r22, 0x20	; 32
     e84:	80 e6       	ldi	r24, 0x60	; 96
     e86:	96 e0       	ldi	r25, 0x06	; 6
     e88:	4c df       	rcall	.-360    	; 0xd22 <ioport_configure_port_pin>
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	5b e1       	ldi	r21, 0x1B	; 27
     e8e:	60 e2       	ldi	r22, 0x20	; 32
     e90:	80 e8       	ldi	r24, 0x80	; 128
     e92:	96 e0       	ldi	r25, 0x06	; 6
     e94:	46 df       	rcall	.-372    	; 0xd22 <ioport_configure_port_pin>
     e96:	40 e0       	ldi	r20, 0x00	; 0
     e98:	5b e1       	ldi	r21, 0x1B	; 27
     e9a:	62 e0       	ldi	r22, 0x02	; 2
     e9c:	80 ea       	ldi	r24, 0xA0	; 160
     e9e:	96 e0       	ldi	r25, 0x06	; 6
     ea0:	40 df       	rcall	.-384    	; 0xd22 <ioport_configure_port_pin>
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	5b e1       	ldi	r21, 0x1B	; 27
     ea6:	64 e0       	ldi	r22, 0x04	; 4
     ea8:	80 ea       	ldi	r24, 0xA0	; 160
     eaa:	96 e0       	ldi	r25, 0x06	; 6
     eac:	3a df       	rcall	.-396    	; 0xd22 <ioport_configure_port_pin>
     eae:	43 e0       	ldi	r20, 0x03	; 3
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	62 e0       	ldi	r22, 0x02	; 2
     eb4:	80 e6       	ldi	r24, 0x60	; 96
     eb6:	96 e0       	ldi	r25, 0x06	; 6
     eb8:	34 df       	rcall	.-408    	; 0xd22 <ioport_configure_port_pin>
     eba:	43 e0       	ldi	r20, 0x03	; 3
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	68 e0       	ldi	r22, 0x08	; 8
     ec0:	80 e6       	ldi	r24, 0x60	; 96
     ec2:	96 e0       	ldi	r25, 0x06	; 6
     ec4:	2e df       	rcall	.-420    	; 0xd22 <ioport_configure_port_pin>
     ec6:	43 e0       	ldi	r20, 0x03	; 3
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	68 e0       	ldi	r22, 0x08	; 8
     ecc:	80 ea       	ldi	r24, 0xA0	; 160
     ece:	96 e0       	ldi	r25, 0x06	; 6
     ed0:	28 df       	rcall	.-432    	; 0xd22 <ioport_configure_port_pin>
     ed2:	43 e0       	ldi	r20, 0x03	; 3
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	80 e6       	ldi	r24, 0x60	; 96
     eda:	96 e0       	ldi	r25, 0x06	; 6
     edc:	22 df       	rcall	.-444    	; 0xd22 <ioport_configure_port_pin>
     ede:	43 e0       	ldi	r20, 0x03	; 3
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	68 e0       	ldi	r22, 0x08	; 8
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	96 e0       	ldi	r25, 0x06	; 6
     ee8:	1c df       	rcall	.-456    	; 0xd22 <ioport_configure_port_pin>
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	60 e1       	ldi	r22, 0x10	; 16
     ef0:	80 e8       	ldi	r24, 0x80	; 128
     ef2:	96 e0       	ldi	r25, 0x06	; 6
     ef4:	16 df       	rcall	.-468    	; 0xd22 <ioport_configure_port_pin>
     ef6:	43 e0       	ldi	r20, 0x03	; 3
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	62 e0       	ldi	r22, 0x02	; 2
     efc:	80 e6       	ldi	r24, 0x60	; 96
     efe:	96 e0       	ldi	r25, 0x06	; 6
     f00:	10 df       	rcall	.-480    	; 0xd22 <ioport_configure_port_pin>
     f02:	43 e0       	ldi	r20, 0x03	; 3
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	68 e0       	ldi	r22, 0x08	; 8
     f08:	80 e6       	ldi	r24, 0x60	; 96
     f0a:	96 e0       	ldi	r25, 0x06	; 6
     f0c:	0a df       	rcall	.-492    	; 0xd22 <ioport_configure_port_pin>
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	64 e0       	ldi	r22, 0x04	; 4
     f14:	80 e6       	ldi	r24, 0x60	; 96
     f16:	96 e0       	ldi	r25, 0x06	; 6
     f18:	04 df       	rcall	.-504    	; 0xd22 <ioport_configure_port_pin>
     f1a:	43 e0       	ldi	r20, 0x03	; 3
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	60 e1       	ldi	r22, 0x10	; 16
     f20:	80 ea       	ldi	r24, 0xA0	; 160
     f22:	96 e0       	ldi	r25, 0x06	; 6
     f24:	fe de       	rcall	.-516    	; 0xd22 <ioport_configure_port_pin>
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	96 e0       	ldi	r25, 0x06	; 6
     f30:	f8 de       	rcall	.-528    	; 0xd22 <ioport_configure_port_pin>
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	64 e0       	ldi	r22, 0x04	; 4
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	96 e0       	ldi	r25, 0x06	; 6
     f3c:	f2 de       	rcall	.-540    	; 0xd22 <ioport_configure_port_pin>
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	96 e0       	ldi	r25, 0x06	; 6
     f48:	ec de       	rcall	.-552    	; 0xd22 <ioport_configure_port_pin>
     f4a:	43 e0       	ldi	r20, 0x03	; 3
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	68 e0       	ldi	r22, 0x08	; 8
     f50:	80 e4       	ldi	r24, 0x40	; 64
     f52:	96 e0       	ldi	r25, 0x06	; 6
     f54:	e6 de       	rcall	.-564    	; 0xd22 <ioport_configure_port_pin>
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	64 e0       	ldi	r22, 0x04	; 4
     f5c:	80 e4       	ldi	r24, 0x40	; 64
     f5e:	96 e0       	ldi	r25, 0x06	; 6
     f60:	e0 de       	rcall	.-576    	; 0xd22 <ioport_configure_port_pin>
     f62:	43 e0       	ldi	r20, 0x03	; 3
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	68 e0       	ldi	r22, 0x08	; 8
     f68:	80 e6       	ldi	r24, 0x60	; 96
     f6a:	96 e0       	ldi	r25, 0x06	; 6
     f6c:	da de       	rcall	.-588    	; 0xd22 <ioport_configure_port_pin>
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	64 e0       	ldi	r22, 0x04	; 4
     f74:	80 e6       	ldi	r24, 0x60	; 96
     f76:	96 e0       	ldi	r25, 0x06	; 6
     f78:	d4 de       	rcall	.-600    	; 0xd22 <ioport_configure_port_pin>
     f7a:	43 e0       	ldi	r20, 0x03	; 3
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	68 e0       	ldi	r22, 0x08	; 8
     f80:	80 e8       	ldi	r24, 0x80	; 128
     f82:	96 e0       	ldi	r25, 0x06	; 6
     f84:	ce de       	rcall	.-612    	; 0xd22 <ioport_configure_port_pin>
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	64 e0       	ldi	r22, 0x04	; 4
     f8c:	80 e8       	ldi	r24, 0x80	; 128
     f8e:	96 e0       	ldi	r25, 0x06	; 6
     f90:	c8 ce       	rjmp	.-624    	; 0xd22 <ioport_configure_port_pin>
     f92:	08 95       	ret

00000f94 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     f94:	cf 92       	push	r12
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     fa6:	d9 01       	movw	r26, r18
     fa8:	c8 01       	movw	r24, r16
     faa:	b6 95       	lsr	r27
     fac:	a7 95       	ror	r26
     fae:	97 95       	ror	r25
     fb0:	87 95       	ror	r24
     fb2:	48 17       	cp	r20, r24
     fb4:	59 07       	cpc	r21, r25
     fb6:	6a 07       	cpc	r22, r26
     fb8:	7b 07       	cpc	r23, r27
     fba:	70 f4       	brcc	.+28     	; 0xfd8 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     fbc:	6a 01       	movw	r12, r20
     fbe:	7b 01       	movw	r14, r22
     fc0:	cc 0c       	add	r12, r12
     fc2:	dd 1c       	adc	r13, r13
     fc4:	ee 1c       	adc	r14, r14
     fc6:	ff 1c       	adc	r15, r15
     fc8:	c9 01       	movw	r24, r18
     fca:	b8 01       	movw	r22, r16
     fcc:	a7 01       	movw	r20, r14
     fce:	96 01       	movw	r18, r12
     fd0:	6e d2       	rcall	.+1244   	; 0x14ae <__udivmodsi4>
     fd2:	21 50       	subi	r18, 0x01	; 1
     fd4:	31 09       	sbc	r19, r1
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     fdc:	83 2f       	mov	r24, r19
     fde:	8f 70       	andi	r24, 0x0F	; 15
     fe0:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     fe2:	2e 83       	std	Y+6, r18	; 0x06
}
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	08 95       	ret

00000ff6 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	1f 92       	push	r1
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	7c 01       	movw	r14, r24
    100c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	09 f4       	brne	.+2      	; 0x1014 <usart_init_spi+0x1e>
    1012:	b2 c1       	rjmp	.+868    	; 0x1378 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1014:	80 3c       	cpi	r24, 0xC0	; 192
    1016:	91 05       	cpc	r25, r1
    1018:	21 f4       	brne	.+8      	; 0x1022 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    101a:	60 e1       	ldi	r22, 0x10	; 16
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	27 dc       	rcall	.-1970   	; 0x86e <sysclk_enable_module>
    1020:	ab c1       	rjmp	.+854    	; 0x1378 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1022:	80 e8       	ldi	r24, 0x80	; 128
    1024:	e8 16       	cp	r14, r24
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	f8 06       	cpc	r15, r24
    102a:	21 f4       	brne	.+8      	; 0x1034 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    102c:	62 e0       	ldi	r22, 0x02	; 2
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	1e dc       	rcall	.-1988   	; 0x86e <sysclk_enable_module>
    1032:	a2 c1       	rjmp	.+836    	; 0x1378 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1034:	e1 14       	cp	r14, r1
    1036:	e1 e0       	ldi	r30, 0x01	; 1
    1038:	fe 06       	cpc	r15, r30
    103a:	21 f4       	brne	.+8      	; 0x1044 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	16 dc       	rcall	.-2004   	; 0x86e <sysclk_enable_module>
    1042:	9a c1       	rjmp	.+820    	; 0x1378 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1044:	f0 e8       	ldi	r31, 0x80	; 128
    1046:	ef 16       	cp	r14, r31
    1048:	f3 e0       	ldi	r31, 0x03	; 3
    104a:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    104c:	21 f4       	brne	.+8      	; 0x1056 <usart_init_spi+0x60>
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	0d dc       	rcall	.-2022   	; 0x86e <sysclk_enable_module>
    1054:	91 c1       	rjmp	.+802    	; 0x1378 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1056:	30 e9       	ldi	r19, 0x90	; 144
    1058:	e3 16       	cp	r14, r19
    105a:	33 e0       	ldi	r19, 0x03	; 3
    105c:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    105e:	21 f4       	brne	.+8      	; 0x1068 <usart_init_spi+0x72>
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	04 dc       	rcall	.-2040   	; 0x86e <sysclk_enable_module>
    1066:	88 c1       	rjmp	.+784    	; 0x1378 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1068:	e1 14       	cp	r14, r1
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    106e:	21 f4       	brne	.+8      	; 0x1078 <usart_init_spi+0x82>
    1070:	62 e0       	ldi	r22, 0x02	; 2
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	fc db       	rcall	.-2056   	; 0x86e <sysclk_enable_module>
    1076:	80 c1       	rjmp	.+768    	; 0x1378 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1078:	e0 e4       	ldi	r30, 0x40	; 64
    107a:	ee 16       	cp	r14, r30
    107c:	e2 e0       	ldi	r30, 0x02	; 2
    107e:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1080:	21 f4       	brne	.+8      	; 0x108a <usart_init_spi+0x94>
    1082:	62 e0       	ldi	r22, 0x02	; 2
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	f3 db       	rcall	.-2074   	; 0x86e <sysclk_enable_module>
    1088:	77 c1       	rjmp	.+750    	; 0x1378 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    108a:	f0 e2       	ldi	r31, 0x20	; 32
    108c:	ef 16       	cp	r14, r31
    108e:	f3 e0       	ldi	r31, 0x03	; 3
    1090:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1092:	21 f4       	brne	.+8      	; 0x109c <usart_init_spi+0xa6>
    1094:	64 e0       	ldi	r22, 0x04	; 4
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	ea db       	rcall	.-2092   	; 0x86e <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    109a:	6e c1       	rjmp	.+732    	; 0x1378 <usart_init_spi+0x382>
    109c:	e1 14       	cp	r14, r1
    109e:	38 e0       	ldi	r19, 0x08	; 8
    10a0:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10a2:	21 f4       	brne	.+8      	; 0x10ac <usart_init_spi+0xb6>
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	e2 db       	rcall	.-2108   	; 0x86e <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    10aa:	66 c1       	rjmp	.+716    	; 0x1378 <usart_init_spi+0x382>
    10ac:	e1 14       	cp	r14, r1
    10ae:	89 e0       	ldi	r24, 0x09	; 9
    10b0:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10b2:	21 f4       	brne	.+8      	; 0x10bc <usart_init_spi+0xc6>
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	da db       	rcall	.-2124   	; 0x86e <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    10ba:	5e c1       	rjmp	.+700    	; 0x1378 <usart_init_spi+0x382>
    10bc:	e1 14       	cp	r14, r1
    10be:	ea e0       	ldi	r30, 0x0A	; 10
    10c0:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    10c2:	21 f4       	brne	.+8      	; 0x10cc <usart_init_spi+0xd6>
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	85 e0       	ldi	r24, 0x05	; 5
    10c8:	d2 db       	rcall	.-2140   	; 0x86e <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    10ca:	56 c1       	rjmp	.+684    	; 0x1378 <usart_init_spi+0x382>
    10cc:	e1 14       	cp	r14, r1
    10ce:	fb e0       	ldi	r31, 0x0B	; 11
    10d0:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    10d2:	21 f4       	brne	.+8      	; 0x10dc <usart_init_spi+0xe6>
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	86 e0       	ldi	r24, 0x06	; 6
    10d8:	ca db       	rcall	.-2156   	; 0x86e <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    10da:	4e c1       	rjmp	.+668    	; 0x1378 <usart_init_spi+0x382>
    10dc:	30 e4       	ldi	r19, 0x40	; 64
    10de:	e3 16       	cp	r14, r19
    10e0:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    10e2:	f3 06       	cpc	r15, r19
    10e4:	21 f4       	brne	.+8      	; 0x10ee <usart_init_spi+0xf8>
    10e6:	62 e0       	ldi	r22, 0x02	; 2
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	c1 db       	rcall	.-2174   	; 0x86e <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    10ec:	45 c1       	rjmp	.+650    	; 0x1378 <usart_init_spi+0x382>
    10ee:	80 e4       	ldi	r24, 0x40	; 64
    10f0:	e8 16       	cp	r14, r24
    10f2:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    10f4:	f8 06       	cpc	r15, r24
    10f6:	21 f4       	brne	.+8      	; 0x1100 <usart_init_spi+0x10a>
    10f8:	62 e0       	ldi	r22, 0x02	; 2
    10fa:	84 e0       	ldi	r24, 0x04	; 4
    10fc:	b8 db       	rcall	.-2192   	; 0x86e <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    10fe:	3c c1       	rjmp	.+632    	; 0x1378 <usart_init_spi+0x382>
    1100:	e0 e4       	ldi	r30, 0x40	; 64
    1102:	ee 16       	cp	r14, r30
    1104:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1106:	fe 06       	cpc	r15, r30
    1108:	21 f4       	brne	.+8      	; 0x1112 <usart_init_spi+0x11c>
    110a:	62 e0       	ldi	r22, 0x02	; 2
    110c:	85 e0       	ldi	r24, 0x05	; 5
    110e:	af db       	rcall	.-2210   	; 0x86e <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1110:	33 c1       	rjmp	.+614    	; 0x1378 <usart_init_spi+0x382>
    1112:	f0 e9       	ldi	r31, 0x90	; 144
    1114:	ef 16       	cp	r14, r31
    1116:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1118:	ff 06       	cpc	r15, r31
    111a:	21 f4       	brne	.+8      	; 0x1124 <usart_init_spi+0x12e>
    111c:	64 e0       	ldi	r22, 0x04	; 4
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	a6 db       	rcall	.-2228   	; 0x86e <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1122:	2a c1       	rjmp	.+596    	; 0x1378 <usart_init_spi+0x382>
    1124:	30 e9       	ldi	r19, 0x90	; 144
    1126:	e3 16       	cp	r14, r19
    1128:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    112a:	f3 06       	cpc	r15, r19
    112c:	21 f4       	brne	.+8      	; 0x1136 <usart_init_spi+0x140>
    112e:	64 e0       	ldi	r22, 0x04	; 4
    1130:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1132:	9d db       	rcall	.-2246   	; 0x86e <sysclk_enable_module>
    1134:	21 c1       	rjmp	.+578    	; 0x1378 <usart_init_spi+0x382>
    1136:	80 e9       	ldi	r24, 0x90	; 144
    1138:	e8 16       	cp	r14, r24
    113a:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    113c:	f8 06       	cpc	r15, r24
    113e:	21 f4       	brne	.+8      	; 0x1148 <usart_init_spi+0x152>
    1140:	64 e0       	ldi	r22, 0x04	; 4
    1142:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1144:	94 db       	rcall	.-2264   	; 0x86e <sysclk_enable_module>
    1146:	18 c1       	rjmp	.+560    	; 0x1378 <usart_init_spi+0x382>
    1148:	e0 e9       	ldi	r30, 0x90	; 144
    114a:	ee 16       	cp	r14, r30
    114c:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    114e:	fe 06       	cpc	r15, r30
    1150:	21 f4       	brne	.+8      	; 0x115a <usart_init_spi+0x164>
    1152:	64 e0       	ldi	r22, 0x04	; 4
    1154:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1156:	8b db       	rcall	.-2282   	; 0x86e <sysclk_enable_module>
    1158:	0f c1       	rjmp	.+542    	; 0x1378 <usart_init_spi+0x382>
    115a:	f0 ec       	ldi	r31, 0xC0	; 192
    115c:	ef 16       	cp	r14, r31
    115e:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1160:	ff 06       	cpc	r15, r31
    1162:	21 f4       	brne	.+8      	; 0x116c <usart_init_spi+0x176>
    1164:	68 e0       	ldi	r22, 0x08	; 8
    1166:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1168:	82 db       	rcall	.-2300   	; 0x86e <sysclk_enable_module>
    116a:	06 c1       	rjmp	.+524    	; 0x1378 <usart_init_spi+0x382>
    116c:	30 ec       	ldi	r19, 0xC0	; 192
    116e:	e3 16       	cp	r14, r19
    1170:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1172:	f3 06       	cpc	r15, r19
    1174:	21 f4       	brne	.+8      	; 0x117e <usart_init_spi+0x188>
    1176:	68 e0       	ldi	r22, 0x08	; 8
    1178:	84 e0       	ldi	r24, 0x04	; 4
    117a:	79 db       	rcall	.-2318   	; 0x86e <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    117c:	fd c0       	rjmp	.+506    	; 0x1378 <usart_init_spi+0x382>
    117e:	80 ea       	ldi	r24, 0xA0	; 160
    1180:	e8 16       	cp	r14, r24
    1182:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1184:	f8 06       	cpc	r15, r24
    1186:	61 f4       	brne	.+24     	; 0x11a0 <usart_init_spi+0x1aa>
    1188:	60 e1       	ldi	r22, 0x10	; 16
    118a:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    118c:	70 db       	rcall	.-2336   	; 0x86e <sysclk_enable_module>
    118e:	e0 ea       	ldi	r30, 0xA0	; 160
    1190:	f8 e0       	ldi	r31, 0x08	; 8
    1192:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1194:	8f 7e       	andi	r24, 0xEF	; 239
    1196:	84 83       	std	Z+4, r24	; 0x04
    1198:	f8 01       	movw	r30, r16
    119a:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    119c:	22 50       	subi	r18, 0x02	; 2
    119e:	4c c0       	rjmp	.+152    	; 0x1238 <usart_init_spi+0x242>
    11a0:	f0 ea       	ldi	r31, 0xA0	; 160
    11a2:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    11a4:	f9 e0       	ldi	r31, 0x09	; 9
    11a6:	ff 06       	cpc	r15, r31
    11a8:	21 f4       	brne	.+8      	; 0x11b2 <usart_init_spi+0x1bc>
    11aa:	60 e1       	ldi	r22, 0x10	; 16
    11ac:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    11ae:	5f db       	rcall	.-2370   	; 0x86e <sysclk_enable_module>
    11b0:	e3 c0       	rjmp	.+454    	; 0x1378 <usart_init_spi+0x382>
    11b2:	30 ea       	ldi	r19, 0xA0	; 160
    11b4:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    11b6:	3a e0       	ldi	r19, 0x0A	; 10
    11b8:	f3 06       	cpc	r15, r19
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <usart_init_spi+0x1ce>
    11bc:	60 e1       	ldi	r22, 0x10	; 16
    11be:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    11c0:	56 db       	rcall	.-2388   	; 0x86e <sysclk_enable_module>
    11c2:	da c0       	rjmp	.+436    	; 0x1378 <usart_init_spi+0x382>
    11c4:	80 ea       	ldi	r24, 0xA0	; 160
    11c6:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    11c8:	8b e0       	ldi	r24, 0x0B	; 11
    11ca:	f8 06       	cpc	r15, r24
    11cc:	21 f4       	brne	.+8      	; 0x11d6 <usart_init_spi+0x1e0>
    11ce:	60 e1       	ldi	r22, 0x10	; 16
    11d0:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    11d2:	4d db       	rcall	.-2406   	; 0x86e <sysclk_enable_module>
    11d4:	d1 c0       	rjmp	.+418    	; 0x1378 <usart_init_spi+0x382>
    11d6:	e0 eb       	ldi	r30, 0xB0	; 176
    11d8:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    11da:	e8 e0       	ldi	r30, 0x08	; 8
    11dc:	fe 06       	cpc	r15, r30
    11de:	21 f4       	brne	.+8      	; 0x11e8 <usart_init_spi+0x1f2>
    11e0:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	44 db       	rcall	.-2424   	; 0x86e <sysclk_enable_module>
    11e6:	c8 c0       	rjmp	.+400    	; 0x1378 <usart_init_spi+0x382>
    11e8:	f0 eb       	ldi	r31, 0xB0	; 176
    11ea:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    11ec:	f9 e0       	ldi	r31, 0x09	; 9
    11ee:	ff 06       	cpc	r15, r31
    11f0:	21 f4       	brne	.+8      	; 0x11fa <usart_init_spi+0x204>
    11f2:	60 e2       	ldi	r22, 0x20	; 32
    11f4:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    11f6:	3b db       	rcall	.-2442   	; 0x86e <sysclk_enable_module>
    11f8:	bf c0       	rjmp	.+382    	; 0x1378 <usart_init_spi+0x382>
    11fa:	30 e8       	ldi	r19, 0x80	; 128
    11fc:	e3 16       	cp	r14, r19
    11fe:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1200:	f3 06       	cpc	r15, r19
    1202:	21 f4       	brne	.+8      	; 0x120c <usart_init_spi+0x216>
    1204:	60 e4       	ldi	r22, 0x40	; 64
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	32 db       	rcall	.-2460   	; 0x86e <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    120a:	b6 c0       	rjmp	.+364    	; 0x1378 <usart_init_spi+0x382>
    120c:	80 ea       	ldi	r24, 0xA0	; 160
    120e:	e8 16       	cp	r14, r24
    1210:	84 e0       	ldi	r24, 0x04	; 4
    1212:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1214:	21 f4       	brne	.+8      	; 0x121e <usart_init_spi+0x228>
    1216:	60 e4       	ldi	r22, 0x40	; 64
    1218:	85 e0       	ldi	r24, 0x05	; 5
    121a:	29 db       	rcall	.-2478   	; 0x86e <sysclk_enable_module>
    121c:	ad c0       	rjmp	.+346    	; 0x1378 <usart_init_spi+0x382>
    121e:	f7 01       	movw	r30, r14
    1220:	84 81       	ldd	r24, Z+4	; 0x04
    1222:	8f 7e       	andi	r24, 0xEF	; 239
    1224:	84 83       	std	Z+4, r24	; 0x04
    1226:	fb 01       	movw	r30, r22
    1228:	24 81       	ldd	r18, Z+4	; 0x04
    122a:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    122c:	c7 01       	movw	r24, r14
    122e:	f0 ea       	ldi	r31, 0xA0	; 160
    1230:	ef 16       	cp	r14, r31
    1232:	f8 e0       	ldi	r31, 0x08	; 8
    1234:	ff 06       	cpc	r15, r31
    1236:	49 f4       	brne	.+18     	; 0x124a <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1238:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    123c:	84 fd       	sbrc	r24, 4
    123e:	a5 c0       	rjmp	.+330    	; 0x138a <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1240:	0f 2e       	mov	r0, r31
    1242:	f1 e1       	ldi	r31, 0x11	; 17
    1244:	df 2e       	mov	r13, r31
    1246:	f0 2d       	mov	r31, r0
    1248:	a4 c0       	rjmp	.+328    	; 0x1392 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    124a:	80 3b       	cpi	r24, 0xB0	; 176
    124c:	38 e0       	ldi	r19, 0x08	; 8
    124e:	93 07       	cpc	r25, r19
    1250:	91 f0       	breq	.+36     	; 0x1276 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1252:	80 3a       	cpi	r24, 0xA0	; 160
    1254:	e9 e0       	ldi	r30, 0x09	; 9
    1256:	9e 07       	cpc	r25, r30
    1258:	49 f4       	brne	.+18     	; 0x126c <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    125a:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    125e:	34 fd       	sbrc	r19, 4
    1260:	9b c0       	rjmp	.+310    	; 0x1398 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1262:	0f 2e       	mov	r0, r31
    1264:	f9 e1       	ldi	r31, 0x19	; 25
    1266:	df 2e       	mov	r13, r31
    1268:	f0 2d       	mov	r31, r0
    126a:	16 c0       	rjmp	.+44     	; 0x1298 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    126c:	80 3b       	cpi	r24, 0xB0	; 176
    126e:	f9 e0       	ldi	r31, 0x09	; 9
    1270:	9f 07       	cpc	r25, r31
    1272:	f1 f0       	breq	.+60     	; 0x12b0 <usart_init_spi+0x2ba>
    1274:	04 c0       	rjmp	.+8      	; 0x127e <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1276:	0f 2e       	mov	r0, r31
    1278:	f5 e1       	ldi	r31, 0x15	; 21
    127a:	df 2e       	mov	r13, r31
    127c:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    127e:	80 3a       	cpi	r24, 0xA0	; 160
    1280:	3a e0       	ldi	r19, 0x0A	; 10
    1282:	93 07       	cpc	r25, r19
    1284:	49 f4       	brne	.+18     	; 0x1298 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1286:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    128a:	84 fd       	sbrc	r24, 4
    128c:	8a c0       	rjmp	.+276    	; 0x13a2 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    128e:	0f 2e       	mov	r0, r31
    1290:	f1 e2       	ldi	r31, 0x21	; 33
    1292:	df 2e       	mov	r13, r31
    1294:	f0 2d       	mov	r31, r0
    1296:	15 c0       	rjmp	.+42     	; 0x12c2 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1298:	80 3a       	cpi	r24, 0xA0	; 160
    129a:	9b 40       	sbci	r25, 0x0B	; 11
    129c:	91 f4       	brne	.+36     	; 0x12c2 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    129e:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    12a2:	84 fd       	sbrc	r24, 4
    12a4:	0a c0       	rjmp	.+20     	; 0x12ba <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    12a6:	0f 2e       	mov	r0, r31
    12a8:	f9 e2       	ldi	r31, 0x29	; 41
    12aa:	df 2e       	mov	r13, r31
    12ac:	f0 2d       	mov	r31, r0
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    12b0:	0f 2e       	mov	r0, r31
    12b2:	fd e1       	ldi	r31, 0x1D	; 29
    12b4:	df 2e       	mov	r13, r31
    12b6:	f0 2d       	mov	r31, r0
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    12ba:	0f 2e       	mov	r0, r31
    12bc:	fd e2       	ldi	r31, 0x2D	; 45
    12be:	df 2e       	mov	r13, r31
    12c0:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    12c2:	ed 2d       	mov	r30, r13
    12c4:	e6 95       	lsr	r30
    12c6:	e6 95       	lsr	r30
    12c8:	e6 95       	lsr	r30
    12ca:	30 e2       	ldi	r19, 0x20	; 32
    12cc:	e3 9f       	mul	r30, r19
    12ce:	f0 01       	movw	r30, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	fa 5f       	subi	r31, 0xFA	; 250
    12d4:	3d 2d       	mov	r19, r13
    12d6:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	03 2e       	mov	r0, r19
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <usart_init_spi+0x2ee>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    12e8:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	10 f0       	brcs	.+4      	; 0x12f2 <usart_init_spi+0x2fc>
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <usart_init_spi+0x2fe>
    12f2:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    12f4:	df 01       	movw	r26, r30
    12f6:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    12f8:	a3 0f       	add	r26, r19
    12fa:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12fc:	9f b7       	in	r25, 0x3f	; 63
    12fe:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1300:	f8 94       	cli
	return flags;
    1302:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1304:	2c 91       	ld	r18, X
    1306:	27 70       	andi	r18, 0x07	; 7
    1308:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    130a:	9c 91       	ld	r25, X
    130c:	94 2b       	or	r25, r20
    130e:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1310:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1312:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1314:	f7 01       	movw	r30, r14
    1316:	85 81       	ldd	r24, Z+5	; 0x05
    1318:	80 6c       	ori	r24, 0xC0	; 192
    131a:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    131c:	f8 01       	movw	r30, r16
    131e:	84 81       	ldd	r24, Z+4	; 0x04
    1320:	8d 7f       	andi	r24, 0xFD	; 253
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	29 f4       	brne	.+10     	; 0x1330 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    1326:	f7 01       	movw	r30, r14
    1328:	85 81       	ldd	r24, Z+5	; 0x05
    132a:	82 60       	ori	r24, 0x02	; 2
    132c:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <usart_init_spi+0x342>
    1330:	f7 01       	movw	r30, r14
    1332:	85 81       	ldd	r24, Z+5	; 0x05
    1334:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    1336:	85 83       	std	Z+5, r24	; 0x05
    1338:	f8 01       	movw	r30, r16
    133a:	85 81       	ldd	r24, Z+5	; 0x05
    133c:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    133e:	29 f0       	breq	.+10     	; 0x134a <usart_init_spi+0x354>
    1340:	f7 01       	movw	r30, r14
    1342:	85 81       	ldd	r24, Z+5	; 0x05
    1344:	84 60       	ori	r24, 0x04	; 4
    1346:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1348:	04 c0       	rjmp	.+8      	; 0x1352 <usart_init_spi+0x35c>
    134a:	f7 01       	movw	r30, r14
    134c:	85 81       	ldd	r24, Z+5	; 0x05
    134e:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1350:	85 83       	std	Z+5, r24	; 0x05
    1352:	f8 01       	movw	r30, r16
    1354:	40 81       	ld	r20, Z
    1356:	51 81       	ldd	r21, Z+1	; 0x01
    1358:	62 81       	ldd	r22, Z+2	; 0x02
    135a:	73 81       	ldd	r23, Z+3	; 0x03
    135c:	00 e8       	ldi	r16, 0x80	; 128
    135e:	14 e8       	ldi	r17, 0x84	; 132
    1360:	2e e1       	ldi	r18, 0x1E	; 30
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	c7 01       	movw	r24, r14
    1366:	16 de       	rcall	.-980    	; 0xf94 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1368:	f7 01       	movw	r30, r14
    136a:	84 81       	ldd	r24, Z+4	; 0x04
    136c:	88 60       	ori	r24, 0x08	; 8
    136e:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1370:	84 81       	ldd	r24, Z+4	; 0x04
    1372:	80 61       	ori	r24, 0x10	; 16
    1374:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1376:	1a c0       	rjmp	.+52     	; 0x13ac <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1378:	f7 01       	movw	r30, r14
    137a:	84 81       	ldd	r24, Z+4	; 0x04
    137c:	8f 7e       	andi	r24, 0xEF	; 239
    137e:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1380:	f8 01       	movw	r30, r16
    1382:	24 81       	ldd	r18, Z+4	; 0x04
    1384:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1386:	c7 01       	movw	r24, r14
    1388:	60 cf       	rjmp	.-320    	; 0x124a <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    138a:	0f 2e       	mov	r0, r31
    138c:	f5 e1       	ldi	r31, 0x15	; 21
    138e:	df 2e       	mov	r13, r31
    1390:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1392:	80 ea       	ldi	r24, 0xA0	; 160
    1394:	98 e0       	ldi	r25, 0x08	; 8
    1396:	6a cf       	rjmp	.-300    	; 0x126c <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1398:	0f 2e       	mov	r0, r31
    139a:	fd e1       	ldi	r31, 0x1D	; 29
    139c:	df 2e       	mov	r13, r31
    139e:	f0 2d       	mov	r31, r0
    13a0:	7b cf       	rjmp	.-266    	; 0x1298 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    13a2:	0f 2e       	mov	r0, r31
    13a4:	f5 e2       	ldi	r31, 0x25	; 37
    13a6:	df 2e       	mov	r13, r31
    13a8:	f0 2d       	mov	r31, r0
    13aa:	8b cf       	rjmp	.-234    	; 0x12c2 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    13ac:	0f 90       	pop	r0
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	08 95       	ret

000013be <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    13c0:	61 50       	subi	r22, 0x01	; 1
    13c2:	71 09       	sbc	r23, r1
    13c4:	81 09       	sbc	r24, r1
    13c6:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    13c8:	61 15       	cp	r22, r1
    13ca:	71 05       	cpc	r23, r1
    13cc:	81 05       	cpc	r24, r1
    13ce:	91 05       	cpc	r25, r1
    13d0:	b9 f7       	brne	.-18     	; 0x13c0 <__portable_avr_delay_cycles+0x2>
    13d2:	08 95       	ret

000013d4 <PWM_Init>:
static char strbuf[128];

void PWM_Init(void)
{
	/* Set output */
	PORTC.DIR |= PIN0_bm;
    13d4:	e0 e4       	ldi	r30, 0x40	; 64
    13d6:	f6 e0       	ldi	r31, 0x06	; 6
    13d8:	80 81       	ld	r24, Z
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	80 83       	st	Z, r24

	/* Set Register */
	TCC0.CTRLA = PIN1_bm; //(PIN2_bm) | (PIN0_bm);
    13de:	e0 e0       	ldi	r30, 0x00	; 0
    13e0:	f8 e0       	ldi	r31, 0x08	; 8
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	80 83       	st	Z, r24
	TCC0.CTRLB = (PIN4_bm) | (PIN2_bm) | (PIN1_bm);
    13e6:	86 e1       	ldi	r24, 0x16	; 22
    13e8:	81 83       	std	Z+1, r24	; 0x01
	
	/* Set Period */
	TCC0.PER = 1000;
    13ea:	88 ee       	ldi	r24, 0xE8	; 232
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	86 a3       	std	Z+38, r24	; 0x26
    13f0:	97 a3       	std	Z+39, r25	; 0x27

	/* Set Compare Register value for initial position (0 degrees) */
	TCC0.CCA = 50;
    13f2:	82 e3       	ldi	r24, 0x32	; 50
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	80 a7       	std	Z+40, r24	; 0x28
    13f8:	91 a7       	std	Z+41, r25	; 0x29
    13fa:	08 95       	ret

000013fc <main>:
}

int main(void) {
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
    13fc:	2e dd       	rcall	.-1444   	; 0xe5a <board_init>
	PWM_Init();
    13fe:	ea df       	rcall	.-44     	; 0x13d4 <PWM_Init>
	
	// Initialize the LCD
	gfx_mono_init();
    1400:	f3 da       	rcall	.-2586   	; 0x9e8 <gfx_mono_st7565r_init>
    1402:	80 e1       	ldi	r24, 0x10	; 16
    1404:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    1408:	20 e0       	ldi	r18, 0x00	; 0
	
	// Set the background LCD on
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);

	// Display the user's name on the first line of the LCD
	gfx_mono_draw_string("Raihan\nRaditya\nRafinal", 0, 0, &sysfont);
    140a:	30 e2       	ldi	r19, 0x20	; 32
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	87 e0       	ldi	r24, 0x07	; 7
    1412:	90 e2       	ldi	r25, 0x20	; 32
    1414:	5d dc       	rcall	.-1862   	; 0xcd0 <gfx_mono_draw_string>
    1416:	bb 24       	eor	r11, r11

	// variables for controlling servo
	uint16_t duty_cycle = 50; // Start at 0 degrees
	int8_t direction = 1; // 1 for increasing, -1 for decreasing
    1418:	b3 94       	inc	r11
    141a:	c2 e3       	ldi	r28, 0x32	; 50

	// Display the user's name on the first line of the LCD
	gfx_mono_draw_string("Raihan\nRaditya\nRafinal", 0, 0, &sysfont);

	// variables for controlling servo
	uint16_t duty_cycle = 50; // Start at 0 degrees
    141c:	d0 e0       	ldi	r29, 0x00	; 0
    141e:	c1 2c       	mov	r12, r1
	int8_t direction = 1; // 1 for increasing, -1 for decreasing

	while(1) {
		TCC0.CCA = duty_cycle * 10;
    1420:	68 94       	set
    1422:	dd 24       	eor	r13, r13
    1424:	d3 f8       	bld	r13, 3
    1426:	99 24       	eor	r9, r9
		duty_cycle += direction;
		
		// Change direction if reach the ends
		// 50 for 0 Degress and 84 for 180 degrees
		if (duty_cycle >= 84) {
			direction = -1; // Change direction to decrease
    1428:	9a 94       	dec	r9
    142a:	0f 2e       	mov	r0, r31
			} else if (duty_cycle <= 50) {
			direction = 1; // Change direction to increase
		}

		// Display the duty cycle value to keep track
		snprintf(strbuf, sizeof(strbuf), "Duty: %u", duty_cycle);
    142c:	fe e1       	ldi	r31, 0x1E	; 30
    142e:	ef 2e       	mov	r14, r31
    1430:	f0 e2       	ldi	r31, 0x20	; 32
    1432:	ff 2e       	mov	r15, r31
    1434:	f0 2d       	mov	r31, r0
    1436:	68 94       	set
    1438:	aa 24       	eor	r10, r10
    143a:	a7 f8       	bld	r10, 7
    143c:	0a e2       	ldi	r16, 0x2A	; 42
    143e:	12 e2       	ldi	r17, 0x22	; 34
    1440:	9e 01       	movw	r18, r28
	// variables for controlling servo
	uint16_t duty_cycle = 50; // Start at 0 degrees
	int8_t direction = 1; // 1 for increasing, -1 for decreasing

	while(1) {
		TCC0.CCA = duty_cycle * 10;
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	ce 01       	movw	r24, r28
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	82 0f       	add	r24, r18
    1456:	93 1f       	adc	r25, r19
    1458:	f6 01       	movw	r30, r12
    145a:	80 a7       	std	Z+40, r24	; 0x28
    145c:	91 a7       	std	Z+41, r25	; 0x29
    145e:	cb 0d       	add	r28, r11
		
		// Update the duty cycle
		duty_cycle += direction;
    1460:	d1 1d       	adc	r29, r1
    1462:	b7 fc       	sbrc	r11, 7
    1464:	da 95       	dec	r29
    1466:	c4 35       	cpi	r28, 0x54	; 84
		
		// Change direction if reach the ends
		// 50 for 0 Degress and 84 for 180 degrees
		if (duty_cycle >= 84) {
    1468:	d1 05       	cpc	r29, r1
    146a:	30 f4       	brcc	.+12     	; 0x1478 <main+0x7c>
    146c:	c3 33       	cpi	r28, 0x33	; 51
			direction = -1; // Change direction to decrease
			} else if (duty_cycle <= 50) {
    146e:	d1 05       	cpc	r29, r1
    1470:	20 f4       	brcc	.+8      	; 0x147a <main+0x7e>
    1472:	bb 24       	eor	r11, r11
			direction = 1; // Change direction to increase
    1474:	b3 94       	inc	r11
    1476:	01 c0       	rjmp	.+2      	; 0x147a <main+0x7e>
    1478:	b9 2c       	mov	r11, r9
		duty_cycle += direction;
		
		// Change direction if reach the ends
		// 50 for 0 Degress and 84 for 180 degrees
		if (duty_cycle >= 84) {
			direction = -1; // Change direction to decrease
    147a:	df 93       	push	r29
			} else if (duty_cycle <= 50) {
			direction = 1; // Change direction to increase
		}

		// Display the duty cycle value to keep track
		snprintf(strbuf, sizeof(strbuf), "Duty: %u", duty_cycle);
    147c:	cf 93       	push	r28
    147e:	ff 92       	push	r15
    1480:	ef 92       	push	r14
    1482:	1f 92       	push	r1
    1484:	af 92       	push	r10
    1486:	1f 93       	push	r17
    1488:	0f 93       	push	r16
    148a:	33 d0       	rcall	.+102    	; 0x14f2 <snprintf>
    148c:	20 e0       	ldi	r18, 0x00	; 0
		gfx_mono_draw_string(strbuf, 0, 24, &sysfont);
    148e:	30 e2       	ldi	r19, 0x20	; 32
    1490:	48 e1       	ldi	r20, 0x18	; 24
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	c8 01       	movw	r24, r16
    1496:	1c dc       	rcall	.-1992   	; 0xcd0 <gfx_mono_draw_string>

		delay_ms(20);
    1498:	6b e0       	ldi	r22, 0x0B	; 11
    149a:	7a e1       	ldi	r23, 0x1A	; 26
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	8e df       	rcall	.-228    	; 0x13be <__portable_avr_delay_cycles>
    14a2:	ed b7       	in	r30, 0x3d	; 61
	}
    14a4:	fe b7       	in	r31, 0x3e	; 62
    14a6:	38 96       	adiw	r30, 0x08	; 8
    14a8:	ed bf       	out	0x3d, r30	; 61
    14aa:	fe bf       	out	0x3e, r31	; 62
    14ac:	c9 cf       	rjmp	.-110    	; 0x1440 <main+0x44>

000014ae <__udivmodsi4>:
    14ae:	a1 e2       	ldi	r26, 0x21	; 33
    14b0:	1a 2e       	mov	r1, r26
    14b2:	aa 1b       	sub	r26, r26
    14b4:	bb 1b       	sub	r27, r27
    14b6:	fd 01       	movw	r30, r26
    14b8:	0d c0       	rjmp	.+26     	; 0x14d4 <__udivmodsi4_ep>

000014ba <__udivmodsi4_loop>:
    14ba:	aa 1f       	adc	r26, r26
    14bc:	bb 1f       	adc	r27, r27
    14be:	ee 1f       	adc	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	a2 17       	cp	r26, r18
    14c4:	b3 07       	cpc	r27, r19
    14c6:	e4 07       	cpc	r30, r20
    14c8:	f5 07       	cpc	r31, r21
    14ca:	20 f0       	brcs	.+8      	; 0x14d4 <__udivmodsi4_ep>
    14cc:	a2 1b       	sub	r26, r18
    14ce:	b3 0b       	sbc	r27, r19
    14d0:	e4 0b       	sbc	r30, r20
    14d2:	f5 0b       	sbc	r31, r21

000014d4 <__udivmodsi4_ep>:
    14d4:	66 1f       	adc	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	88 1f       	adc	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	1a 94       	dec	r1
    14de:	69 f7       	brne	.-38     	; 0x14ba <__udivmodsi4_loop>
    14e0:	60 95       	com	r22
    14e2:	70 95       	com	r23
    14e4:	80 95       	com	r24
    14e6:	90 95       	com	r25
    14e8:	9b 01       	movw	r18, r22
    14ea:	ac 01       	movw	r20, r24
    14ec:	bd 01       	movw	r22, r26
    14ee:	cf 01       	movw	r24, r30
    14f0:	08 95       	ret

000014f2 <snprintf>:
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	2e 97       	sbiw	r28, 0x0e	; 14
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0e 89       	ldd	r16, Y+22	; 0x16
    1506:	1f 89       	ldd	r17, Y+23	; 0x17
    1508:	88 8d       	ldd	r24, Y+24	; 0x18
    150a:	99 8d       	ldd	r25, Y+25	; 0x19
    150c:	26 e0       	ldi	r18, 0x06	; 6
    150e:	2c 83       	std	Y+4, r18	; 0x04
    1510:	09 83       	std	Y+1, r16	; 0x01
    1512:	1a 83       	std	Y+2, r17	; 0x02
    1514:	97 ff       	sbrs	r25, 7
    1516:	02 c0       	rjmp	.+4      	; 0x151c <snprintf+0x2a>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e8       	ldi	r25, 0x80	; 128
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	ae 01       	movw	r20, r28
    1524:	44 5e       	subi	r20, 0xE4	; 228
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	6a 8d       	ldd	r22, Y+26	; 0x1a
    152a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	16 d0       	rcall	.+44     	; 0x155e <vfprintf>
    1532:	4d 81       	ldd	r20, Y+5	; 0x05
    1534:	5e 81       	ldd	r21, Y+6	; 0x06
    1536:	57 fd       	sbrc	r21, 7
    1538:	0a c0       	rjmp	.+20     	; 0x154e <snprintf+0x5c>
    153a:	2f 81       	ldd	r18, Y+7	; 0x07
    153c:	38 85       	ldd	r19, Y+8	; 0x08
    153e:	42 17       	cp	r20, r18
    1540:	53 07       	cpc	r21, r19
    1542:	0c f4       	brge	.+2      	; 0x1546 <snprintf+0x54>
    1544:	9a 01       	movw	r18, r20
    1546:	f8 01       	movw	r30, r16
    1548:	e2 0f       	add	r30, r18
    154a:	f3 1f       	adc	r31, r19
    154c:	10 82       	st	Z, r1
    154e:	2e 96       	adiw	r28, 0x0e	; 14
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	08 95       	ret

0000155e <vfprintf>:
    155e:	2f 92       	push	r2
    1560:	3f 92       	push	r3
    1562:	4f 92       	push	r4
    1564:	5f 92       	push	r5
    1566:	6f 92       	push	r6
    1568:	7f 92       	push	r7
    156a:	8f 92       	push	r8
    156c:	9f 92       	push	r9
    156e:	af 92       	push	r10
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	2b 97       	sbiw	r28, 0x0b	; 11
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	6c 01       	movw	r12, r24
    158e:	7b 01       	movw	r14, r22
    1590:	8a 01       	movw	r16, r20
    1592:	fc 01       	movw	r30, r24
    1594:	16 82       	std	Z+6, r1	; 0x06
    1596:	17 82       	std	Z+7, r1	; 0x07
    1598:	83 81       	ldd	r24, Z+3	; 0x03
    159a:	81 ff       	sbrs	r24, 1
    159c:	bf c1       	rjmp	.+894    	; 0x191c <vfprintf+0x3be>
    159e:	ce 01       	movw	r24, r28
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	3c 01       	movw	r6, r24
    15a4:	f6 01       	movw	r30, r12
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	f7 01       	movw	r30, r14
    15aa:	93 fd       	sbrc	r25, 3
    15ac:	85 91       	lpm	r24, Z+
    15ae:	93 ff       	sbrs	r25, 3
    15b0:	81 91       	ld	r24, Z+
    15b2:	7f 01       	movw	r14, r30
    15b4:	88 23       	and	r24, r24
    15b6:	09 f4       	brne	.+2      	; 0x15ba <vfprintf+0x5c>
    15b8:	ad c1       	rjmp	.+858    	; 0x1914 <vfprintf+0x3b6>
    15ba:	85 32       	cpi	r24, 0x25	; 37
    15bc:	39 f4       	brne	.+14     	; 0x15cc <vfprintf+0x6e>
    15be:	93 fd       	sbrc	r25, 3
    15c0:	85 91       	lpm	r24, Z+
    15c2:	93 ff       	sbrs	r25, 3
    15c4:	81 91       	ld	r24, Z+
    15c6:	7f 01       	movw	r14, r30
    15c8:	85 32       	cpi	r24, 0x25	; 37
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <vfprintf+0x76>
    15cc:	b6 01       	movw	r22, r12
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	d3 d1       	rcall	.+934    	; 0x1978 <fputc>
    15d2:	e8 cf       	rjmp	.-48     	; 0x15a4 <vfprintf+0x46>
    15d4:	91 2c       	mov	r9, r1
    15d6:	21 2c       	mov	r2, r1
    15d8:	31 2c       	mov	r3, r1
    15da:	ff e1       	ldi	r31, 0x1F	; 31
    15dc:	f3 15       	cp	r31, r3
    15de:	d8 f0       	brcs	.+54     	; 0x1616 <vfprintf+0xb8>
    15e0:	8b 32       	cpi	r24, 0x2B	; 43
    15e2:	79 f0       	breq	.+30     	; 0x1602 <vfprintf+0xa4>
    15e4:	38 f4       	brcc	.+14     	; 0x15f4 <vfprintf+0x96>
    15e6:	80 32       	cpi	r24, 0x20	; 32
    15e8:	79 f0       	breq	.+30     	; 0x1608 <vfprintf+0xaa>
    15ea:	83 32       	cpi	r24, 0x23	; 35
    15ec:	a1 f4       	brne	.+40     	; 0x1616 <vfprintf+0xb8>
    15ee:	23 2d       	mov	r18, r3
    15f0:	20 61       	ori	r18, 0x10	; 16
    15f2:	1d c0       	rjmp	.+58     	; 0x162e <vfprintf+0xd0>
    15f4:	8d 32       	cpi	r24, 0x2D	; 45
    15f6:	61 f0       	breq	.+24     	; 0x1610 <vfprintf+0xb2>
    15f8:	80 33       	cpi	r24, 0x30	; 48
    15fa:	69 f4       	brne	.+26     	; 0x1616 <vfprintf+0xb8>
    15fc:	23 2d       	mov	r18, r3
    15fe:	21 60       	ori	r18, 0x01	; 1
    1600:	16 c0       	rjmp	.+44     	; 0x162e <vfprintf+0xd0>
    1602:	83 2d       	mov	r24, r3
    1604:	82 60       	ori	r24, 0x02	; 2
    1606:	38 2e       	mov	r3, r24
    1608:	e3 2d       	mov	r30, r3
    160a:	e4 60       	ori	r30, 0x04	; 4
    160c:	3e 2e       	mov	r3, r30
    160e:	2a c0       	rjmp	.+84     	; 0x1664 <vfprintf+0x106>
    1610:	f3 2d       	mov	r31, r3
    1612:	f8 60       	ori	r31, 0x08	; 8
    1614:	1d c0       	rjmp	.+58     	; 0x1650 <vfprintf+0xf2>
    1616:	37 fc       	sbrc	r3, 7
    1618:	2d c0       	rjmp	.+90     	; 0x1674 <vfprintf+0x116>
    161a:	20 ed       	ldi	r18, 0xD0	; 208
    161c:	28 0f       	add	r18, r24
    161e:	2a 30       	cpi	r18, 0x0A	; 10
    1620:	40 f0       	brcs	.+16     	; 0x1632 <vfprintf+0xd4>
    1622:	8e 32       	cpi	r24, 0x2E	; 46
    1624:	b9 f4       	brne	.+46     	; 0x1654 <vfprintf+0xf6>
    1626:	36 fc       	sbrc	r3, 6
    1628:	75 c1       	rjmp	.+746    	; 0x1914 <vfprintf+0x3b6>
    162a:	23 2d       	mov	r18, r3
    162c:	20 64       	ori	r18, 0x40	; 64
    162e:	32 2e       	mov	r3, r18
    1630:	19 c0       	rjmp	.+50     	; 0x1664 <vfprintf+0x106>
    1632:	36 fe       	sbrs	r3, 6
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <vfprintf+0xe4>
    1636:	8a e0       	ldi	r24, 0x0A	; 10
    1638:	98 9e       	mul	r9, r24
    163a:	20 0d       	add	r18, r0
    163c:	11 24       	eor	r1, r1
    163e:	92 2e       	mov	r9, r18
    1640:	11 c0       	rjmp	.+34     	; 0x1664 <vfprintf+0x106>
    1642:	ea e0       	ldi	r30, 0x0A	; 10
    1644:	2e 9e       	mul	r2, r30
    1646:	20 0d       	add	r18, r0
    1648:	11 24       	eor	r1, r1
    164a:	22 2e       	mov	r2, r18
    164c:	f3 2d       	mov	r31, r3
    164e:	f0 62       	ori	r31, 0x20	; 32
    1650:	3f 2e       	mov	r3, r31
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <vfprintf+0x106>
    1654:	8c 36       	cpi	r24, 0x6C	; 108
    1656:	21 f4       	brne	.+8      	; 0x1660 <vfprintf+0x102>
    1658:	83 2d       	mov	r24, r3
    165a:	80 68       	ori	r24, 0x80	; 128
    165c:	38 2e       	mov	r3, r24
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <vfprintf+0x106>
    1660:	88 36       	cpi	r24, 0x68	; 104
    1662:	41 f4       	brne	.+16     	; 0x1674 <vfprintf+0x116>
    1664:	f7 01       	movw	r30, r14
    1666:	93 fd       	sbrc	r25, 3
    1668:	85 91       	lpm	r24, Z+
    166a:	93 ff       	sbrs	r25, 3
    166c:	81 91       	ld	r24, Z+
    166e:	7f 01       	movw	r14, r30
    1670:	81 11       	cpse	r24, r1
    1672:	b3 cf       	rjmp	.-154    	; 0x15da <vfprintf+0x7c>
    1674:	98 2f       	mov	r25, r24
    1676:	9f 7d       	andi	r25, 0xDF	; 223
    1678:	95 54       	subi	r25, 0x45	; 69
    167a:	93 30       	cpi	r25, 0x03	; 3
    167c:	28 f4       	brcc	.+10     	; 0x1688 <vfprintf+0x12a>
    167e:	0c 5f       	subi	r16, 0xFC	; 252
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	9f e3       	ldi	r25, 0x3F	; 63
    1684:	99 83       	std	Y+1, r25	; 0x01
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <vfprintf+0x144>
    1688:	83 36       	cpi	r24, 0x63	; 99
    168a:	31 f0       	breq	.+12     	; 0x1698 <vfprintf+0x13a>
    168c:	83 37       	cpi	r24, 0x73	; 115
    168e:	71 f0       	breq	.+28     	; 0x16ac <vfprintf+0x14e>
    1690:	83 35       	cpi	r24, 0x53	; 83
    1692:	09 f0       	breq	.+2      	; 0x1696 <vfprintf+0x138>
    1694:	55 c0       	rjmp	.+170    	; 0x1740 <vfprintf+0x1e2>
    1696:	20 c0       	rjmp	.+64     	; 0x16d8 <vfprintf+0x17a>
    1698:	f8 01       	movw	r30, r16
    169a:	80 81       	ld	r24, Z
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	0e 5f       	subi	r16, 0xFE	; 254
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	88 24       	eor	r8, r8
    16a4:	83 94       	inc	r8
    16a6:	91 2c       	mov	r9, r1
    16a8:	53 01       	movw	r10, r6
    16aa:	12 c0       	rjmp	.+36     	; 0x16d0 <vfprintf+0x172>
    16ac:	28 01       	movw	r4, r16
    16ae:	f2 e0       	ldi	r31, 0x02	; 2
    16b0:	4f 0e       	add	r4, r31
    16b2:	51 1c       	adc	r5, r1
    16b4:	f8 01       	movw	r30, r16
    16b6:	a0 80       	ld	r10, Z
    16b8:	b1 80       	ldd	r11, Z+1	; 0x01
    16ba:	36 fe       	sbrs	r3, 6
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <vfprintf+0x166>
    16be:	69 2d       	mov	r22, r9
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <vfprintf+0x16a>
    16c4:	6f ef       	ldi	r22, 0xFF	; 255
    16c6:	7f ef       	ldi	r23, 0xFF	; 255
    16c8:	c5 01       	movw	r24, r10
    16ca:	4b d1       	rcall	.+662    	; 0x1962 <strnlen>
    16cc:	4c 01       	movw	r8, r24
    16ce:	82 01       	movw	r16, r4
    16d0:	f3 2d       	mov	r31, r3
    16d2:	ff 77       	andi	r31, 0x7F	; 127
    16d4:	3f 2e       	mov	r3, r31
    16d6:	15 c0       	rjmp	.+42     	; 0x1702 <vfprintf+0x1a4>
    16d8:	28 01       	movw	r4, r16
    16da:	22 e0       	ldi	r18, 0x02	; 2
    16dc:	42 0e       	add	r4, r18
    16de:	51 1c       	adc	r5, r1
    16e0:	f8 01       	movw	r30, r16
    16e2:	a0 80       	ld	r10, Z
    16e4:	b1 80       	ldd	r11, Z+1	; 0x01
    16e6:	36 fe       	sbrs	r3, 6
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <vfprintf+0x192>
    16ea:	69 2d       	mov	r22, r9
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <vfprintf+0x196>
    16f0:	6f ef       	ldi	r22, 0xFF	; 255
    16f2:	7f ef       	ldi	r23, 0xFF	; 255
    16f4:	c5 01       	movw	r24, r10
    16f6:	2a d1       	rcall	.+596    	; 0x194c <strnlen_P>
    16f8:	4c 01       	movw	r8, r24
    16fa:	f3 2d       	mov	r31, r3
    16fc:	f0 68       	ori	r31, 0x80	; 128
    16fe:	3f 2e       	mov	r3, r31
    1700:	82 01       	movw	r16, r4
    1702:	33 fc       	sbrc	r3, 3
    1704:	19 c0       	rjmp	.+50     	; 0x1738 <vfprintf+0x1da>
    1706:	82 2d       	mov	r24, r2
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	88 16       	cp	r8, r24
    170c:	99 06       	cpc	r9, r25
    170e:	a0 f4       	brcc	.+40     	; 0x1738 <vfprintf+0x1da>
    1710:	b6 01       	movw	r22, r12
    1712:	80 e2       	ldi	r24, 0x20	; 32
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	30 d1       	rcall	.+608    	; 0x1978 <fputc>
    1718:	2a 94       	dec	r2
    171a:	f5 cf       	rjmp	.-22     	; 0x1706 <vfprintf+0x1a8>
    171c:	f5 01       	movw	r30, r10
    171e:	37 fc       	sbrc	r3, 7
    1720:	85 91       	lpm	r24, Z+
    1722:	37 fe       	sbrs	r3, 7
    1724:	81 91       	ld	r24, Z+
    1726:	5f 01       	movw	r10, r30
    1728:	b6 01       	movw	r22, r12
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	25 d1       	rcall	.+586    	; 0x1978 <fputc>
    172e:	21 10       	cpse	r2, r1
    1730:	2a 94       	dec	r2
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	82 1a       	sub	r8, r18
    1736:	91 08       	sbc	r9, r1
    1738:	81 14       	cp	r8, r1
    173a:	91 04       	cpc	r9, r1
    173c:	79 f7       	brne	.-34     	; 0x171c <vfprintf+0x1be>
    173e:	e1 c0       	rjmp	.+450    	; 0x1902 <vfprintf+0x3a4>
    1740:	84 36       	cpi	r24, 0x64	; 100
    1742:	11 f0       	breq	.+4      	; 0x1748 <vfprintf+0x1ea>
    1744:	89 36       	cpi	r24, 0x69	; 105
    1746:	39 f5       	brne	.+78     	; 0x1796 <vfprintf+0x238>
    1748:	f8 01       	movw	r30, r16
    174a:	37 fe       	sbrs	r3, 7
    174c:	07 c0       	rjmp	.+14     	; 0x175c <vfprintf+0x1fe>
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	82 81       	ldd	r24, Z+2	; 0x02
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	0c 5f       	subi	r16, 0xFC	; 252
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	08 c0       	rjmp	.+16     	; 0x176c <vfprintf+0x20e>
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	07 2e       	mov	r0, r23
    1762:	00 0c       	add	r0, r0
    1764:	88 0b       	sbc	r24, r24
    1766:	99 0b       	sbc	r25, r25
    1768:	0e 5f       	subi	r16, 0xFE	; 254
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	f3 2d       	mov	r31, r3
    176e:	ff 76       	andi	r31, 0x6F	; 111
    1770:	3f 2e       	mov	r3, r31
    1772:	97 ff       	sbrs	r25, 7
    1774:	09 c0       	rjmp	.+18     	; 0x1788 <vfprintf+0x22a>
    1776:	90 95       	com	r25
    1778:	80 95       	com	r24
    177a:	70 95       	com	r23
    177c:	61 95       	neg	r22
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	8f 4f       	sbci	r24, 0xFF	; 255
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	f0 68       	ori	r31, 0x80	; 128
    1786:	3f 2e       	mov	r3, r31
    1788:	2a e0       	ldi	r18, 0x0A	; 10
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	a3 01       	movw	r20, r6
    178e:	30 d1       	rcall	.+608    	; 0x19f0 <__ultoa_invert>
    1790:	88 2e       	mov	r8, r24
    1792:	86 18       	sub	r8, r6
    1794:	44 c0       	rjmp	.+136    	; 0x181e <vfprintf+0x2c0>
    1796:	85 37       	cpi	r24, 0x75	; 117
    1798:	31 f4       	brne	.+12     	; 0x17a6 <vfprintf+0x248>
    179a:	23 2d       	mov	r18, r3
    179c:	2f 7e       	andi	r18, 0xEF	; 239
    179e:	b2 2e       	mov	r11, r18
    17a0:	2a e0       	ldi	r18, 0x0A	; 10
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	25 c0       	rjmp	.+74     	; 0x17f0 <vfprintf+0x292>
    17a6:	93 2d       	mov	r25, r3
    17a8:	99 7f       	andi	r25, 0xF9	; 249
    17aa:	b9 2e       	mov	r11, r25
    17ac:	8f 36       	cpi	r24, 0x6F	; 111
    17ae:	c1 f0       	breq	.+48     	; 0x17e0 <vfprintf+0x282>
    17b0:	18 f4       	brcc	.+6      	; 0x17b8 <vfprintf+0x25a>
    17b2:	88 35       	cpi	r24, 0x58	; 88
    17b4:	79 f0       	breq	.+30     	; 0x17d4 <vfprintf+0x276>
    17b6:	ae c0       	rjmp	.+348    	; 0x1914 <vfprintf+0x3b6>
    17b8:	80 37       	cpi	r24, 0x70	; 112
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <vfprintf+0x264>
    17bc:	88 37       	cpi	r24, 0x78	; 120
    17be:	21 f0       	breq	.+8      	; 0x17c8 <vfprintf+0x26a>
    17c0:	a9 c0       	rjmp	.+338    	; 0x1914 <vfprintf+0x3b6>
    17c2:	e9 2f       	mov	r30, r25
    17c4:	e0 61       	ori	r30, 0x10	; 16
    17c6:	be 2e       	mov	r11, r30
    17c8:	b4 fe       	sbrs	r11, 4
    17ca:	0d c0       	rjmp	.+26     	; 0x17e6 <vfprintf+0x288>
    17cc:	fb 2d       	mov	r31, r11
    17ce:	f4 60       	ori	r31, 0x04	; 4
    17d0:	bf 2e       	mov	r11, r31
    17d2:	09 c0       	rjmp	.+18     	; 0x17e6 <vfprintf+0x288>
    17d4:	34 fe       	sbrs	r3, 4
    17d6:	0a c0       	rjmp	.+20     	; 0x17ec <vfprintf+0x28e>
    17d8:	29 2f       	mov	r18, r25
    17da:	26 60       	ori	r18, 0x06	; 6
    17dc:	b2 2e       	mov	r11, r18
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0x28e>
    17e0:	28 e0       	ldi	r18, 0x08	; 8
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <vfprintf+0x292>
    17e6:	20 e1       	ldi	r18, 0x10	; 16
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0x292>
    17ec:	20 e1       	ldi	r18, 0x10	; 16
    17ee:	32 e0       	ldi	r19, 0x02	; 2
    17f0:	f8 01       	movw	r30, r16
    17f2:	b7 fe       	sbrs	r11, 7
    17f4:	07 c0       	rjmp	.+14     	; 0x1804 <vfprintf+0x2a6>
    17f6:	60 81       	ld	r22, Z
    17f8:	71 81       	ldd	r23, Z+1	; 0x01
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	93 81       	ldd	r25, Z+3	; 0x03
    17fe:	0c 5f       	subi	r16, 0xFC	; 252
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	06 c0       	rjmp	.+12     	; 0x1810 <vfprintf+0x2b2>
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 5f       	subi	r16, 0xFE	; 254
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	a3 01       	movw	r20, r6
    1812:	ee d0       	rcall	.+476    	; 0x19f0 <__ultoa_invert>
    1814:	88 2e       	mov	r8, r24
    1816:	86 18       	sub	r8, r6
    1818:	fb 2d       	mov	r31, r11
    181a:	ff 77       	andi	r31, 0x7F	; 127
    181c:	3f 2e       	mov	r3, r31
    181e:	36 fe       	sbrs	r3, 6
    1820:	0d c0       	rjmp	.+26     	; 0x183c <vfprintf+0x2de>
    1822:	23 2d       	mov	r18, r3
    1824:	2e 7f       	andi	r18, 0xFE	; 254
    1826:	a2 2e       	mov	r10, r18
    1828:	89 14       	cp	r8, r9
    182a:	58 f4       	brcc	.+22     	; 0x1842 <vfprintf+0x2e4>
    182c:	34 fe       	sbrs	r3, 4
    182e:	0b c0       	rjmp	.+22     	; 0x1846 <vfprintf+0x2e8>
    1830:	32 fc       	sbrc	r3, 2
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <vfprintf+0x2e8>
    1834:	83 2d       	mov	r24, r3
    1836:	8e 7e       	andi	r24, 0xEE	; 238
    1838:	a8 2e       	mov	r10, r24
    183a:	05 c0       	rjmp	.+10     	; 0x1846 <vfprintf+0x2e8>
    183c:	b8 2c       	mov	r11, r8
    183e:	a3 2c       	mov	r10, r3
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <vfprintf+0x2ea>
    1842:	b8 2c       	mov	r11, r8
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <vfprintf+0x2ea>
    1846:	b9 2c       	mov	r11, r9
    1848:	a4 fe       	sbrs	r10, 4
    184a:	0f c0       	rjmp	.+30     	; 0x186a <vfprintf+0x30c>
    184c:	fe 01       	movw	r30, r28
    184e:	e8 0d       	add	r30, r8
    1850:	f1 1d       	adc	r31, r1
    1852:	80 81       	ld	r24, Z
    1854:	80 33       	cpi	r24, 0x30	; 48
    1856:	21 f4       	brne	.+8      	; 0x1860 <vfprintf+0x302>
    1858:	9a 2d       	mov	r25, r10
    185a:	99 7e       	andi	r25, 0xE9	; 233
    185c:	a9 2e       	mov	r10, r25
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <vfprintf+0x314>
    1860:	a2 fe       	sbrs	r10, 2
    1862:	06 c0       	rjmp	.+12     	; 0x1870 <vfprintf+0x312>
    1864:	b3 94       	inc	r11
    1866:	b3 94       	inc	r11
    1868:	04 c0       	rjmp	.+8      	; 0x1872 <vfprintf+0x314>
    186a:	8a 2d       	mov	r24, r10
    186c:	86 78       	andi	r24, 0x86	; 134
    186e:	09 f0       	breq	.+2      	; 0x1872 <vfprintf+0x314>
    1870:	b3 94       	inc	r11
    1872:	a3 fc       	sbrc	r10, 3
    1874:	10 c0       	rjmp	.+32     	; 0x1896 <vfprintf+0x338>
    1876:	a0 fe       	sbrs	r10, 0
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <vfprintf+0x328>
    187a:	b2 14       	cp	r11, r2
    187c:	80 f4       	brcc	.+32     	; 0x189e <vfprintf+0x340>
    187e:	28 0c       	add	r2, r8
    1880:	92 2c       	mov	r9, r2
    1882:	9b 18       	sub	r9, r11
    1884:	0d c0       	rjmp	.+26     	; 0x18a0 <vfprintf+0x342>
    1886:	b2 14       	cp	r11, r2
    1888:	58 f4       	brcc	.+22     	; 0x18a0 <vfprintf+0x342>
    188a:	b6 01       	movw	r22, r12
    188c:	80 e2       	ldi	r24, 0x20	; 32
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	73 d0       	rcall	.+230    	; 0x1978 <fputc>
    1892:	b3 94       	inc	r11
    1894:	f8 cf       	rjmp	.-16     	; 0x1886 <vfprintf+0x328>
    1896:	b2 14       	cp	r11, r2
    1898:	18 f4       	brcc	.+6      	; 0x18a0 <vfprintf+0x342>
    189a:	2b 18       	sub	r2, r11
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <vfprintf+0x344>
    189e:	98 2c       	mov	r9, r8
    18a0:	21 2c       	mov	r2, r1
    18a2:	a4 fe       	sbrs	r10, 4
    18a4:	0f c0       	rjmp	.+30     	; 0x18c4 <vfprintf+0x366>
    18a6:	b6 01       	movw	r22, r12
    18a8:	80 e3       	ldi	r24, 0x30	; 48
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	65 d0       	rcall	.+202    	; 0x1978 <fputc>
    18ae:	a2 fe       	sbrs	r10, 2
    18b0:	16 c0       	rjmp	.+44     	; 0x18de <vfprintf+0x380>
    18b2:	a1 fc       	sbrc	r10, 1
    18b4:	03 c0       	rjmp	.+6      	; 0x18bc <vfprintf+0x35e>
    18b6:	88 e7       	ldi	r24, 0x78	; 120
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <vfprintf+0x362>
    18bc:	88 e5       	ldi	r24, 0x58	; 88
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	b6 01       	movw	r22, r12
    18c2:	0c c0       	rjmp	.+24     	; 0x18dc <vfprintf+0x37e>
    18c4:	8a 2d       	mov	r24, r10
    18c6:	86 78       	andi	r24, 0x86	; 134
    18c8:	51 f0       	breq	.+20     	; 0x18de <vfprintf+0x380>
    18ca:	a1 fe       	sbrs	r10, 1
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <vfprintf+0x374>
    18ce:	8b e2       	ldi	r24, 0x2B	; 43
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <vfprintf+0x376>
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	a7 fc       	sbrc	r10, 7
    18d6:	8d e2       	ldi	r24, 0x2D	; 45
    18d8:	b6 01       	movw	r22, r12
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	4d d0       	rcall	.+154    	; 0x1978 <fputc>
    18de:	89 14       	cp	r8, r9
    18e0:	30 f4       	brcc	.+12     	; 0x18ee <vfprintf+0x390>
    18e2:	b6 01       	movw	r22, r12
    18e4:	80 e3       	ldi	r24, 0x30	; 48
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	47 d0       	rcall	.+142    	; 0x1978 <fputc>
    18ea:	9a 94       	dec	r9
    18ec:	f8 cf       	rjmp	.-16     	; 0x18de <vfprintf+0x380>
    18ee:	8a 94       	dec	r8
    18f0:	f3 01       	movw	r30, r6
    18f2:	e8 0d       	add	r30, r8
    18f4:	f1 1d       	adc	r31, r1
    18f6:	80 81       	ld	r24, Z
    18f8:	b6 01       	movw	r22, r12
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	3d d0       	rcall	.+122    	; 0x1978 <fputc>
    18fe:	81 10       	cpse	r8, r1
    1900:	f6 cf       	rjmp	.-20     	; 0x18ee <vfprintf+0x390>
    1902:	22 20       	and	r2, r2
    1904:	09 f4       	brne	.+2      	; 0x1908 <vfprintf+0x3aa>
    1906:	4e ce       	rjmp	.-868    	; 0x15a4 <vfprintf+0x46>
    1908:	b6 01       	movw	r22, r12
    190a:	80 e2       	ldi	r24, 0x20	; 32
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	34 d0       	rcall	.+104    	; 0x1978 <fputc>
    1910:	2a 94       	dec	r2
    1912:	f7 cf       	rjmp	.-18     	; 0x1902 <vfprintf+0x3a4>
    1914:	f6 01       	movw	r30, r12
    1916:	86 81       	ldd	r24, Z+6	; 0x06
    1918:	97 81       	ldd	r25, Z+7	; 0x07
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <vfprintf+0x3c2>
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	2b 96       	adiw	r28, 0x0b	; 11
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	bf 90       	pop	r11
    1938:	af 90       	pop	r10
    193a:	9f 90       	pop	r9
    193c:	8f 90       	pop	r8
    193e:	7f 90       	pop	r7
    1940:	6f 90       	pop	r6
    1942:	5f 90       	pop	r5
    1944:	4f 90       	pop	r4
    1946:	3f 90       	pop	r3
    1948:	2f 90       	pop	r2
    194a:	08 95       	ret

0000194c <strnlen_P>:
    194c:	fc 01       	movw	r30, r24
    194e:	05 90       	lpm	r0, Z+
    1950:	61 50       	subi	r22, 0x01	; 1
    1952:	70 40       	sbci	r23, 0x00	; 0
    1954:	01 10       	cpse	r0, r1
    1956:	d8 f7       	brcc	.-10     	; 0x194e <strnlen_P+0x2>
    1958:	80 95       	com	r24
    195a:	90 95       	com	r25
    195c:	8e 0f       	add	r24, r30
    195e:	9f 1f       	adc	r25, r31
    1960:	08 95       	ret

00001962 <strnlen>:
    1962:	fc 01       	movw	r30, r24
    1964:	61 50       	subi	r22, 0x01	; 1
    1966:	70 40       	sbci	r23, 0x00	; 0
    1968:	01 90       	ld	r0, Z+
    196a:	01 10       	cpse	r0, r1
    196c:	d8 f7       	brcc	.-10     	; 0x1964 <strnlen+0x2>
    196e:	80 95       	com	r24
    1970:	90 95       	com	r25
    1972:	8e 0f       	add	r24, r30
    1974:	9f 1f       	adc	r25, r31
    1976:	08 95       	ret

00001978 <fputc>:
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	fb 01       	movw	r30, r22
    1982:	23 81       	ldd	r18, Z+3	; 0x03
    1984:	21 fd       	sbrc	r18, 1
    1986:	03 c0       	rjmp	.+6      	; 0x198e <fputc+0x16>
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	9f ef       	ldi	r25, 0xFF	; 255
    198c:	2c c0       	rjmp	.+88     	; 0x19e6 <fputc+0x6e>
    198e:	22 ff       	sbrs	r18, 2
    1990:	16 c0       	rjmp	.+44     	; 0x19be <fputc+0x46>
    1992:	46 81       	ldd	r20, Z+6	; 0x06
    1994:	57 81       	ldd	r21, Z+7	; 0x07
    1996:	24 81       	ldd	r18, Z+4	; 0x04
    1998:	35 81       	ldd	r19, Z+5	; 0x05
    199a:	42 17       	cp	r20, r18
    199c:	53 07       	cpc	r21, r19
    199e:	44 f4       	brge	.+16     	; 0x19b0 <fputc+0x38>
    19a0:	a0 81       	ld	r26, Z
    19a2:	b1 81       	ldd	r27, Z+1	; 0x01
    19a4:	9d 01       	movw	r18, r26
    19a6:	2f 5f       	subi	r18, 0xFF	; 255
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	20 83       	st	Z, r18
    19ac:	31 83       	std	Z+1, r19	; 0x01
    19ae:	8c 93       	st	X, r24
    19b0:	26 81       	ldd	r18, Z+6	; 0x06
    19b2:	37 81       	ldd	r19, Z+7	; 0x07
    19b4:	2f 5f       	subi	r18, 0xFF	; 255
    19b6:	3f 4f       	sbci	r19, 0xFF	; 255
    19b8:	26 83       	std	Z+6, r18	; 0x06
    19ba:	37 83       	std	Z+7, r19	; 0x07
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <fputc+0x6e>
    19be:	8b 01       	movw	r16, r22
    19c0:	ec 01       	movw	r28, r24
    19c2:	fb 01       	movw	r30, r22
    19c4:	00 84       	ldd	r0, Z+8	; 0x08
    19c6:	f1 85       	ldd	r31, Z+9	; 0x09
    19c8:	e0 2d       	mov	r30, r0
    19ca:	19 95       	eicall
    19cc:	89 2b       	or	r24, r25
    19ce:	e1 f6       	brne	.-72     	; 0x1988 <fputc+0x10>
    19d0:	d8 01       	movw	r26, r16
    19d2:	16 96       	adiw	r26, 0x06	; 6
    19d4:	8d 91       	ld	r24, X+
    19d6:	9c 91       	ld	r25, X
    19d8:	17 97       	sbiw	r26, 0x07	; 7
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	16 96       	adiw	r26, 0x06	; 6
    19de:	8d 93       	st	X+, r24
    19e0:	9c 93       	st	X, r25
    19e2:	17 97       	sbiw	r26, 0x07	; 7
    19e4:	ce 01       	movw	r24, r28
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret

000019f0 <__ultoa_invert>:
    19f0:	fa 01       	movw	r30, r20
    19f2:	aa 27       	eor	r26, r26
    19f4:	28 30       	cpi	r18, 0x08	; 8
    19f6:	51 f1       	breq	.+84     	; 0x1a4c <__ultoa_invert+0x5c>
    19f8:	20 31       	cpi	r18, 0x10	; 16
    19fa:	81 f1       	breq	.+96     	; 0x1a5c <__ultoa_invert+0x6c>
    19fc:	e8 94       	clt
    19fe:	6f 93       	push	r22
    1a00:	6e 7f       	andi	r22, 0xFE	; 254
    1a02:	6e 5f       	subi	r22, 0xFE	; 254
    1a04:	7f 4f       	sbci	r23, 0xFF	; 255
    1a06:	8f 4f       	sbci	r24, 0xFF	; 255
    1a08:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0a:	af 4f       	sbci	r26, 0xFF	; 255
    1a0c:	b1 e0       	ldi	r27, 0x01	; 1
    1a0e:	3e d0       	rcall	.+124    	; 0x1a8c <__ultoa_invert+0x9c>
    1a10:	b4 e0       	ldi	r27, 0x04	; 4
    1a12:	3c d0       	rcall	.+120    	; 0x1a8c <__ultoa_invert+0x9c>
    1a14:	67 0f       	add	r22, r23
    1a16:	78 1f       	adc	r23, r24
    1a18:	89 1f       	adc	r24, r25
    1a1a:	9a 1f       	adc	r25, r26
    1a1c:	a1 1d       	adc	r26, r1
    1a1e:	68 0f       	add	r22, r24
    1a20:	79 1f       	adc	r23, r25
    1a22:	8a 1f       	adc	r24, r26
    1a24:	91 1d       	adc	r25, r1
    1a26:	a1 1d       	adc	r26, r1
    1a28:	6a 0f       	add	r22, r26
    1a2a:	71 1d       	adc	r23, r1
    1a2c:	81 1d       	adc	r24, r1
    1a2e:	91 1d       	adc	r25, r1
    1a30:	a1 1d       	adc	r26, r1
    1a32:	20 d0       	rcall	.+64     	; 0x1a74 <__ultoa_invert+0x84>
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <__ultoa_invert+0x48>
    1a36:	68 94       	set
    1a38:	3f 91       	pop	r19
    1a3a:	2a e0       	ldi	r18, 0x0A	; 10
    1a3c:	26 9f       	mul	r18, r22
    1a3e:	11 24       	eor	r1, r1
    1a40:	30 19       	sub	r19, r0
    1a42:	30 5d       	subi	r19, 0xD0	; 208
    1a44:	31 93       	st	Z+, r19
    1a46:	de f6       	brtc	.-74     	; 0x19fe <__ultoa_invert+0xe>
    1a48:	cf 01       	movw	r24, r30
    1a4a:	08 95       	ret
    1a4c:	46 2f       	mov	r20, r22
    1a4e:	47 70       	andi	r20, 0x07	; 7
    1a50:	40 5d       	subi	r20, 0xD0	; 208
    1a52:	41 93       	st	Z+, r20
    1a54:	b3 e0       	ldi	r27, 0x03	; 3
    1a56:	0f d0       	rcall	.+30     	; 0x1a76 <__ultoa_invert+0x86>
    1a58:	c9 f7       	brne	.-14     	; 0x1a4c <__ultoa_invert+0x5c>
    1a5a:	f6 cf       	rjmp	.-20     	; 0x1a48 <__ultoa_invert+0x58>
    1a5c:	46 2f       	mov	r20, r22
    1a5e:	4f 70       	andi	r20, 0x0F	; 15
    1a60:	40 5d       	subi	r20, 0xD0	; 208
    1a62:	4a 33       	cpi	r20, 0x3A	; 58
    1a64:	18 f0       	brcs	.+6      	; 0x1a6c <__ultoa_invert+0x7c>
    1a66:	49 5d       	subi	r20, 0xD9	; 217
    1a68:	31 fd       	sbrc	r19, 1
    1a6a:	40 52       	subi	r20, 0x20	; 32
    1a6c:	41 93       	st	Z+, r20
    1a6e:	02 d0       	rcall	.+4      	; 0x1a74 <__ultoa_invert+0x84>
    1a70:	a9 f7       	brne	.-22     	; 0x1a5c <__ultoa_invert+0x6c>
    1a72:	ea cf       	rjmp	.-44     	; 0x1a48 <__ultoa_invert+0x58>
    1a74:	b4 e0       	ldi	r27, 0x04	; 4
    1a76:	a6 95       	lsr	r26
    1a78:	97 95       	ror	r25
    1a7a:	87 95       	ror	r24
    1a7c:	77 95       	ror	r23
    1a7e:	67 95       	ror	r22
    1a80:	ba 95       	dec	r27
    1a82:	c9 f7       	brne	.-14     	; 0x1a76 <__ultoa_invert+0x86>
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	61 05       	cpc	r22, r1
    1a88:	71 05       	cpc	r23, r1
    1a8a:	08 95       	ret
    1a8c:	9b 01       	movw	r18, r22
    1a8e:	ac 01       	movw	r20, r24
    1a90:	0a 2e       	mov	r0, r26
    1a92:	06 94       	lsr	r0
    1a94:	57 95       	ror	r21
    1a96:	47 95       	ror	r20
    1a98:	37 95       	ror	r19
    1a9a:	27 95       	ror	r18
    1a9c:	ba 95       	dec	r27
    1a9e:	c9 f7       	brne	.-14     	; 0x1a92 <__ultoa_invert+0xa2>
    1aa0:	62 0f       	add	r22, r18
    1aa2:	73 1f       	adc	r23, r19
    1aa4:	84 1f       	adc	r24, r20
    1aa6:	95 1f       	adc	r25, r21
    1aa8:	a0 1d       	adc	r26, r0
    1aaa:	08 95       	ret

00001aac <_exit>:
    1aac:	f8 94       	cli

00001aae <__stop_program>:
    1aae:	ff cf       	rjmp	.-2      	; 0x1aae <__stop_program>
